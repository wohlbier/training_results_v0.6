50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
Done (t=3.95s)
creating index...
Done (t=3.95s)
creating index...
Done (t=3.99s)
creating index...
Done (t=3.91s)
creating index...
Done (t=3.97s)
creating index...
Done (t=3.99s)
creating index...
Done (t=4.00s)
creating index...
Done (t=4.00s)
creating index...
index created!
index created!
index created!
index created!
index created!
index created!
index created!
index created!
  0%|                                                  | 0/2532 [00:00<?, ?it/s]2020-02-11 06:39:07,869 maskrcnn_benchmark.inference INFO: Start evaluation on coco_2014_val dataset(40504 images).
100%|███████████████████████████████████████| 2532/2532 [03:49<00:00, 11.02it/s]
 99%|██████████████████████████████████████▋| 2510/2532 [03:49<00:01, 11.88it/s]
 99%|██████████████████████████████████████▋| 2509/2532 [03:49<00:02, 11.39it/s]
100%|███████████████████████████████████████| 2532/2532 [03:50<00:00, 10.98it/s]
 99%|██████████████████████████████████████▋| 2511/2532 [03:52<00:01, 10.93it/s]
100%|███████████████████████████████████████| 2532/2532 [03:53<00:00, 10.86it/s]
100%|███████████████████████████████████████| 2532/2532 [03:53<00:00, 10.82it/s]
100%|███████████████████████████████████████| 2532/2532 [03:55<00:00, 10.75it/s]
2020-02-11 06:43:03,448 maskrcnn_benchmark.inference INFO: Total inference time: 0:03:55.578679 (0.046529464516365644 s / img per device, on 8 devices)
2020-02-11 06:43:04,484 maskrcnn_benchmark.inference INFO: Preparing results for COCO format
2020-02-11 06:43:04,484 maskrcnn_benchmark.inference INFO: Preparing bbox results
2020-02-11 06:43:06,084 maskrcnn_benchmark.inference INFO: Preparing segm results
:::MLL 1581403631.283 block_start: {"value": null, "metadata": {"first_epoch_num": 26, "epoch_count": 1, "file": "tools/train_mlperf.py", "lineno": 134}}
:::MLL 1581403631.285 epoch_start: {"value": null, "metadata": {"epoch_num": 26, "file": "tools/train_mlperf.py", "lineno": 135}}
Evaluating predictions
creating index...
GT annotations already exist!
2020-02-11 06:47:28,175 maskrcnn_benchmark.trainer INFO: eta: 8:58:37  iter: 21420  loss: 0.5970 (0.7674)  loss_classifier: 0.1957 (0.2712)  loss_box_reg: 0.0943 (0.1266)  loss_mask: 0.2429 (0.2776)  loss_objectness: 0.0169 (0.0393)  loss_rpn_box_reg: 0.0396 (0.0527)  time: 0.8391 (1.5704)  data: 0.0030 (0.7348)  lr: 0.001200  max mem: 24032
2020-02-11 06:47:45,158 maskrcnn_benchmark.trainer INFO: eta: 8:57:52  iter: 21440  loss: 0.6845 (0.7673)  loss_classifier: 0.2200 (0.2712)  loss_box_reg: 0.1296 (0.1266)  loss_mask: 0.2502 (0.2776)  loss_objectness: 0.0210 (0.0393)  loss_rpn_box_reg: 0.0496 (0.0527)  time: 0.8464 (1.5697)  data: 0.0029 (0.7342)  lr: 0.001200  max mem: 24032
2020-02-11 06:48:02,184 maskrcnn_benchmark.trainer INFO: eta: 8:57:07  iter: 21460  loss: 0.6186 (0.7672)  loss_classifier: 0.1948 (0.2711)  loss_box_reg: 0.1094 (0.1266)  loss_mask: 0.2538 (0.2775)  loss_objectness: 0.0172 (0.0393)  loss_rpn_box_reg: 0.0442 (0.0527)  time: 0.8484 (1.5690)  data: 0.0028 (0.7335)  lr: 0.001200  max mem: 24032
Loading and preparing results...
resFile is ./inference/coco_2014_val/bbox.json
DONE (t=6.75s)
Running per image evaluation...
Evaluate annotation type *bbox*
2020-02-11 06:48:19,165 maskrcnn_benchmark.trainer INFO: eta: 8:56:22  iter: 21480  loss: 0.6028 (0.7671)  loss_classifier: 0.1923 (0.2710)  loss_box_reg: 0.1049 (0.1266)  loss_mask: 0.2481 (0.2775)  loss_objectness: 0.0159 (0.0393)  loss_rpn_box_reg: 0.0459 (0.0527)  time: 0.8510 (1.5683)  data: 0.0031 (0.7328)  lr: 0.001200  max mem: 24032
2020-02-11 06:48:36,111 maskrcnn_benchmark.trainer INFO: eta: 8:55:37  iter: 21500  loss: 0.5804 (0.7669)  loss_classifier: 0.2068 (0.2710)  loss_box_reg: 0.0998 (0.1266)  loss_mask: 0.2439 (0.2775)  loss_objectness: 0.0152 (0.0392)  loss_rpn_box_reg: 0.0282 (0.0527)  time: 0.8472 (1.5677)  data: 0.0030 (0.7321)  lr: 0.001200  max mem: 24032
DONE (t=25.83s).
Accumulating evaluation results...
DONE (t=0.00s).
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.36259
 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=100 ] = 0.57402
 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=100 ] = 0.39402
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.19111
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.37918
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.46673
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=  1 ] = 0.30384
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets= 10 ] = 0.47387
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.49505
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.29645
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.52227
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.63208
2020-02-11 06:48:53,052 maskrcnn_benchmark.trainer INFO: eta: 8:54:52  iter: 21520  loss: 0.5795 (0.7668)  loss_classifier: 0.1843 (0.2709)  loss_box_reg: 0.0978 (0.1266)  loss_mask: 0.2456 (0.2775)  loss_objectness: 0.0152 (0.0392)  loss_rpn_box_reg: 0.0279 (0.0526)  time: 0.8465 (1.5670)  data: 0.0027 (0.7314)  lr: 0.001200  max mem: 24032
2020-02-11 06:49:10,014 maskrcnn_benchmark.trainer INFO: eta: 8:54:07  iter: 21540  loss: 0.5961 (0.7666)  loss_classifier: 0.1949 (0.2708)  loss_box_reg: 0.0992 (0.1265)  loss_mask: 0.2293 (0.2774)  loss_objectness: 0.0172 (0.0392)  loss_rpn_box_reg: 0.0365 (0.0526)  time: 0.8443 (1.5663)  data: 0.0028 (0.7308)  lr: 0.001200  max mem: 24032
2020-02-11 06:49:26,839 maskrcnn_benchmark.trainer INFO: eta: 8:53:22  iter: 21560  loss: 0.5999 (0.7665)  loss_classifier: 0.1831 (0.2708)  loss_box_reg: 0.1033 (0.1265)  loss_mask: 0.2479 (0.2774)  loss_objectness: 0.0157 (0.0392)  loss_rpn_box_reg: 0.0341 (0.0526)  time: 0.8390 (1.5657)  data: 0.0028 (0.7301)  lr: 0.001200  max mem: 24032
Loading and preparing results...
resFile is ./inference/coco_2014_val/segm.json
2020-02-11 06:49:43,815 maskrcnn_benchmark.trainer INFO: eta: 8:52:37  iter: 21580  loss: 0.6057 (0.7663)  loss_classifier: 0.1935 (0.2707)  loss_box_reg: 0.1003 (0.1265)  loss_mask: 0.2426 (0.2774)  loss_objectness: 0.0163 (0.0392)  loss_rpn_box_reg: 0.0381 (0.0526)  time: 0.8479 (1.5650)  data: 0.0029 (0.7294)  lr: 0.001200  max mem: 24032
DONE (t=15.57s)
Running per image evaluation...
Evaluate annotation type *segm*
2020-02-11 06:50:00,774 maskrcnn_benchmark.trainer INFO: eta: 8:51:52  iter: 21600  loss: 0.6243 (0.7662)  loss_classifier: 0.2037 (0.2706)  loss_box_reg: 0.1039 (0.1265)  loss_mask: 0.2443 (0.2773)  loss_objectness: 0.0155 (0.0391)  loss_rpn_box_reg: 0.0296 (0.0526)  time: 0.8486 (1.5643)  data: 0.0030 (0.7287)  lr: 0.001200  max mem: 24032
2020-02-11 06:50:18,072 maskrcnn_benchmark.trainer INFO: eta: 8:51:08  iter: 21620  loss: 0.6322 (0.7660)  loss_classifier: 0.2111 (0.2706)  loss_box_reg: 0.1094 (0.1264)  loss_mask: 0.2416 (0.2773)  loss_objectness: 0.0180 (0.0391)  loss_rpn_box_reg: 0.0384 (0.0526)  time: 0.8509 (1.5637)  data: 0.0028 (0.7281)  lr: 0.001200  max mem: 24032
DONE (t=32.77s).
Accumulating evaluation results...
DONE (t=0.00s).
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.32836
 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=100 ] = 0.54216
 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=100 ] = 0.34644
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.13668
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.34121
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.48139
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=  1 ] = 0.28563
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets= 10 ] = 0.43391
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.45142
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.25160
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.48129
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.60429
2020-02-11 06:50:25,590 maskrcnn_benchmark.trainer INFO: bbox mAP: 0.36258726192882557, segm mAP: 0.32835589728103015
:::MLL 1581403825.605 eval_accuracy: {"value": {"accuracy": {"BBOX": 0.36258726192882557, "SEGM": 0.32835589728103015}}, "metadata": {"epoch_num": 25, "file": "tools/train_mlperf.py", "lineno": 99}}
:::MLL 1581403825.606 eval_stop: {"value": null, "metadata": {"epoch_num": 25, "file": "tools/train_mlperf.py", "lineno": 100}}
2020-02-11 06:50:37,462 maskrcnn_benchmark.trainer INFO: eta: 8:50:25  iter: 21640  loss: 0.6334 (0.7659)  loss_classifier: 0.1951 (0.2705)  loss_box_reg: 0.0934 (0.1264)  loss_mask: 0.2577 (0.2773)  loss_objectness: 0.0170 (0.0391)  loss_rpn_box_reg: 0.0295 (0.0526)  time: 0.8550 (1.5631)  data: 0.0030 (0.7274)  lr: 0.001200  max mem: 24032
2020-02-11 06:50:54,363 maskrcnn_benchmark.trainer INFO: eta: 8:49:40  iter: 21660  loss: 0.5738 (0.7657)  loss_classifier: 0.1801 (0.2704)  loss_box_reg: 0.0902 (0.1264)  loss_mask: 0.2418 (0.2772)  loss_objectness: 0.0140 (0.0391)  loss_rpn_box_reg: 0.0352 (0.0526)  time: 0.8445 (1.5625)  data: 0.0029 (0.7267)  lr: 0.001200  max mem: 24032
2020-02-11 06:51:11,370 maskrcnn_benchmark.trainer INFO: eta: 8:48:56  iter: 21680  loss: 0.5836 (0.7656)  loss_classifier: 0.1920 (0.2704)  loss_box_reg: 0.0970 (0.1264)  loss_mask: 0.2417 (0.2772)  loss_objectness: 0.0151 (0.0391)  loss_rpn_box_reg: 0.0309 (0.0525)  time: 0.8476 (1.5618)  data: 0.0030 (0.7261)  lr: 0.001200  max mem: 24032
2020-02-11 06:51:28,171 maskrcnn_benchmark.trainer INFO: eta: 8:48:11  iter: 21700  loss: 0.5767 (0.7654)  loss_classifier: 0.1887 (0.2703)  loss_box_reg: 0.0980 (0.1263)  loss_mask: 0.2387 (0.2772)  loss_objectness: 0.0170 (0.0390)  loss_rpn_box_reg: 0.0279 (0.0525)  time: 0.8380 (1.5612)  data: 0.0030 (0.7254)  lr: 0.001200  max mem: 24032
2020-02-11 06:51:45,123 maskrcnn_benchmark.trainer INFO: eta: 8:47:26  iter: 21720  loss: 0.6168 (0.7652)  loss_classifier: 0.2050 (0.2702)  loss_box_reg: 0.0991 (0.1263)  loss_mask: 0.2389 (0.2771)  loss_objectness: 0.0169 (0.0390)  loss_rpn_box_reg: 0.0284 (0.0525)  time: 0.8472 (1.5605)  data: 0.0029 (0.7247)  lr: 0.001200  max mem: 24032
2020-02-11 06:52:02,079 maskrcnn_benchmark.trainer INFO: eta: 8:46:42  iter: 21740  loss: 0.6154 (0.7651)  loss_classifier: 0.2048 (0.2702)  loss_box_reg: 0.1118 (0.1263)  loss_mask: 0.2511 (0.2771)  loss_objectness: 0.0183 (0.0390)  loss_rpn_box_reg: 0.0274 (0.0525)  time: 0.8440 (1.5598)  data: 0.0030 (0.7241)  lr: 0.001200  max mem: 24032
2020-02-11 06:52:19,136 maskrcnn_benchmark.trainer INFO: eta: 8:45:58  iter: 21760  loss: 0.6000 (0.7650)  loss_classifier: 0.1949 (0.2701)  loss_box_reg: 0.1028 (0.1263)  loss_mask: 0.2483 (0.2771)  loss_objectness: 0.0182 (0.0390)  loss_rpn_box_reg: 0.0362 (0.0525)  time: 0.8525 (1.5592)  data: 0.0030 (0.7234)  lr: 0.001200  max mem: 24032
2020-02-11 06:52:36,066 maskrcnn_benchmark.trainer INFO: eta: 8:45:13  iter: 21780  loss: 0.6115 (0.7648)  loss_classifier: 0.2004 (0.2700)  loss_box_reg: 0.1016 (0.1263)  loss_mask: 0.2459 (0.2771)  loss_objectness: 0.0206 (0.0390)  loss_rpn_box_reg: 0.0354 (0.0525)  time: 0.8484 (1.5585)  data: 0.0031 (0.7227)  lr: 0.001200  max mem: 24032
2020-02-11 06:52:52,892 maskrcnn_benchmark.trainer INFO: eta: 8:44:29  iter: 21800  loss: 0.6002 (0.7647)  loss_classifier: 0.1798 (0.2700)  loss_box_reg: 0.0950 (0.1262)  loss_mask: 0.2529 (0.2770)  loss_objectness: 0.0181 (0.0390)  loss_rpn_box_reg: 0.0356 (0.0525)  time: 0.8410 (1.5579)  data: 0.0028 (0.7221)  lr: 0.001200  max mem: 24032
2020-02-11 06:53:09,951 maskrcnn_benchmark.trainer INFO: eta: 8:43:45  iter: 21820  loss: 0.6337 (0.7646)  loss_classifier: 0.2143 (0.2699)  loss_box_reg: 0.1159 (0.1262)  loss_mask: 0.2606 (0.2770)  loss_objectness: 0.0162 (0.0389)  loss_rpn_box_reg: 0.0368 (0.0525)  time: 0.8527 (1.5572)  data: 0.0032 (0.7214)  lr: 0.001200  max mem: 24032
2020-02-11 06:53:26,854 maskrcnn_benchmark.trainer INFO: eta: 8:43:00  iter: 21840  loss: 0.6293 (0.7644)  loss_classifier: 0.1997 (0.2699)  loss_box_reg: 0.0990 (0.1262)  loss_mask: 0.2402 (0.2770)  loss_objectness: 0.0217 (0.0389)  loss_rpn_box_reg: 0.0444 (0.0524)  time: 0.8457 (1.5566)  data: 0.0032 (0.7208)  lr: 0.001200  max mem: 24032
2020-02-11 06:53:43,778 maskrcnn_benchmark.trainer INFO: eta: 8:42:16  iter: 21860  loss: 0.6148 (0.7643)  loss_classifier: 0.2016 (0.2698)  loss_box_reg: 0.1044 (0.1262)  loss_mask: 0.2442 (0.2770)  loss_objectness: 0.0187 (0.0389)  loss_rpn_box_reg: 0.0364 (0.0524)  time: 0.8465 (1.5559)  data: 0.0030 (0.7201)  lr: 0.001200  max mem: 24032
2020-02-11 06:54:00,598 maskrcnn_benchmark.trainer INFO: eta: 8:41:32  iter: 21880  loss: 0.6665 (0.7642)  loss_classifier: 0.2242 (0.2698)  loss_box_reg: 0.1209 (0.1262)  loss_mask: 0.2482 (0.2769)  loss_objectness: 0.0194 (0.0389)  loss_rpn_box_reg: 0.0366 (0.0524)  time: 0.8385 (1.5553)  data: 0.0031 (0.7195)  lr: 0.001200  max mem: 24032
2020-02-11 06:54:17,608 maskrcnn_benchmark.trainer INFO: eta: 8:40:48  iter: 21900  loss: 0.6034 (0.7640)  loss_classifier: 0.1955 (0.2697)  loss_box_reg: 0.0982 (0.1262)  loss_mask: 0.2494 (0.2769)  loss_objectness: 0.0178 (0.0389)  loss_rpn_box_reg: 0.0305 (0.0524)  time: 0.8514 (1.5546)  data: 0.0030 (0.7188)  lr: 0.001200  max mem: 24032
2020-02-11 06:54:34,417 maskrcnn_benchmark.trainer INFO: eta: 8:40:04  iter: 21920  loss: 0.5695 (0.7639)  loss_classifier: 0.1936 (0.2696)  loss_box_reg: 0.0936 (0.1261)  loss_mask: 0.2350 (0.2769)  loss_objectness: 0.0180 (0.0388)  loss_rpn_box_reg: 0.0291 (0.0524)  time: 0.8444 (1.5540)  data: 0.0030 (0.7182)  lr: 0.001200  max mem: 24032
2020-02-11 06:54:51,295 maskrcnn_benchmark.trainer INFO: eta: 8:39:19  iter: 21940  loss: 0.6015 (0.7637)  loss_classifier: 0.2011 (0.2695)  loss_box_reg: 0.0983 (0.1261)  loss_mask: 0.2340 (0.2768)  loss_objectness: 0.0197 (0.0388)  loss_rpn_box_reg: 0.0298 (0.0524)  time: 0.8429 (1.5533)  data: 0.0029 (0.7175)  lr: 0.001200  max mem: 24032
2020-02-11 06:55:08,290 maskrcnn_benchmark.trainer INFO: eta: 8:38:36  iter: 21960  loss: 0.6121 (0.7636)  loss_classifier: 0.2054 (0.2695)  loss_box_reg: 0.1045 (0.1261)  loss_mask: 0.2559 (0.2768)  loss_objectness: 0.0227 (0.0388)  loss_rpn_box_reg: 0.0326 (0.0524)  time: 0.8523 (1.5527)  data: 0.0031 (0.7169)  lr: 0.001200  max mem: 24032
2020-02-11 06:55:25,234 maskrcnn_benchmark.trainer INFO: eta: 8:37:52  iter: 21980  loss: 0.5890 (0.7634)  loss_classifier: 0.1806 (0.2694)  loss_box_reg: 0.0928 (0.1261)  loss_mask: 0.2425 (0.2768)  loss_objectness: 0.0186 (0.0388)  loss_rpn_box_reg: 0.0285 (0.0524)  time: 0.8462 (1.5521)  data: 0.0029 (0.7162)  lr: 0.001200  max mem: 24032
2020-02-11 06:55:42,207 maskrcnn_benchmark.trainer INFO: eta: 8:37:08  iter: 22000  loss: 0.6454 (0.7633)  loss_classifier: 0.2155 (0.2694)  loss_box_reg: 0.1112 (0.1260)  loss_mask: 0.2461 (0.2767)  loss_objectness: 0.0206 (0.0388)  loss_rpn_box_reg: 0.0346 (0.0524)  time: 0.8473 (1.5514)  data: 0.0031 (0.7156)  lr: 0.001200  max mem: 24032
2020-02-11 06:55:59,201 maskrcnn_benchmark.trainer INFO: eta: 8:36:24  iter: 22020  loss: 0.6021 (0.7632)  loss_classifier: 0.2007 (0.2693)  loss_box_reg: 0.1044 (0.1260)  loss_mask: 0.2308 (0.2767)  loss_objectness: 0.0174 (0.0388)  loss_rpn_box_reg: 0.0366 (0.0523)  time: 0.8519 (1.5508)  data: 0.0030 (0.7149)  lr: 0.001200  max mem: 24032
2020-02-11 06:56:16,230 maskrcnn_benchmark.trainer INFO: eta: 8:35:40  iter: 22040  loss: 0.5884 (0.7630)  loss_classifier: 0.2044 (0.2693)  loss_box_reg: 0.1034 (0.1260)  loss_mask: 0.2342 (0.2767)  loss_objectness: 0.0180 (0.0387)  loss_rpn_box_reg: 0.0327 (0.0523)  time: 0.8550 (1.5501)  data: 0.0031 (0.7143)  lr: 0.001200  max mem: 24032
2020-02-11 06:56:33,244 maskrcnn_benchmark.trainer INFO: eta: 8:34:57  iter: 22060  loss: 0.5842 (0.7629)  loss_classifier: 0.1759 (0.2692)  loss_box_reg: 0.0915 (0.1260)  loss_mask: 0.2451 (0.2766)  loss_objectness: 0.0220 (0.0387)  loss_rpn_box_reg: 0.0427 (0.0523)  time: 0.8494 (1.5495)  data: 0.0030 (0.7136)  lr: 0.001200  max mem: 24032
2020-02-11 06:56:50,310 maskrcnn_benchmark.trainer INFO: eta: 8:34:13  iter: 22080  loss: 0.6130 (0.7627)  loss_classifier: 0.1875 (0.2691)  loss_box_reg: 0.1030 (0.1260)  loss_mask: 0.2410 (0.2766)  loss_objectness: 0.0167 (0.0387)  loss_rpn_box_reg: 0.0354 (0.0523)  time: 0.8518 (1.5489)  data: 0.0030 (0.7130)  lr: 0.001200  max mem: 24032
2020-02-11 06:57:07,243 maskrcnn_benchmark.trainer INFO: eta: 8:33:30  iter: 22100  loss: 0.5647 (0.7626)  loss_classifier: 0.1718 (0.2691)  loss_box_reg: 0.0939 (0.1259)  loss_mask: 0.2446 (0.2766)  loss_objectness: 0.0180 (0.0387)  loss_rpn_box_reg: 0.0367 (0.0523)  time: 0.8465 (1.5482)  data: 0.0029 (0.7123)  lr: 0.001200  max mem: 24032
2020-02-11 06:57:24,212 maskrcnn_benchmark.trainer INFO: eta: 8:32:46  iter: 22120  loss: 0.6418 (0.7625)  loss_classifier: 0.2048 (0.2690)  loss_box_reg: 0.1146 (0.1259)  loss_mask: 0.2405 (0.2766)  loss_objectness: 0.0167 (0.0387)  loss_rpn_box_reg: 0.0340 (0.0523)  time: 0.8520 (1.5476)  data: 0.0032 (0.7117)  lr: 0.001200  max mem: 24032
2020-02-11 06:57:41,165 maskrcnn_benchmark.trainer INFO: eta: 8:32:02  iter: 22140  loss: 0.5864 (0.7623)  loss_classifier: 0.2013 (0.2689)  loss_box_reg: 0.0978 (0.1259)  loss_mask: 0.2335 (0.2765)  loss_objectness: 0.0135 (0.0387)  loss_rpn_box_reg: 0.0290 (0.0523)  time: 0.8476 (1.5470)  data: 0.0029 (0.7110)  lr: 0.001200  max mem: 24032
2020-02-11 06:57:58,092 maskrcnn_benchmark.trainer INFO: eta: 8:31:19  iter: 22160  loss: 0.6523 (0.7622)  loss_classifier: 0.2292 (0.2689)  loss_box_reg: 0.1079 (0.1259)  loss_mask: 0.2440 (0.2765)  loss_objectness: 0.0209 (0.0386)  loss_rpn_box_reg: 0.0355 (0.0523)  time: 0.8486 (1.5463)  data: 0.0031 (0.7104)  lr: 0.001200  max mem: 24032
2020-02-11 06:58:15,031 maskrcnn_benchmark.trainer INFO: eta: 8:30:36  iter: 22180  loss: 0.6212 (0.7621)  loss_classifier: 0.2158 (0.2688)  loss_box_reg: 0.1138 (0.1259)  loss_mask: 0.2430 (0.2765)  loss_objectness: 0.0173 (0.0386)  loss_rpn_box_reg: 0.0293 (0.0523)  time: 0.8437 (1.5457)  data: 0.0031 (0.7098)  lr: 0.001200  max mem: 24032
2020-02-11 06:58:32,023 maskrcnn_benchmark.trainer INFO: eta: 8:29:52  iter: 22200  loss: 0.6149 (0.7619)  loss_classifier: 0.2205 (0.2688)  loss_box_reg: 0.1024 (0.1258)  loss_mask: 0.2387 (0.2764)  loss_objectness: 0.0155 (0.0386)  loss_rpn_box_reg: 0.0309 (0.0522)  time: 0.8480 (1.5451)  data: 0.0031 (0.7091)  lr: 0.001200  max mem: 24032
2020-02-11 06:58:48,973 maskrcnn_benchmark.trainer INFO: eta: 8:29:09  iter: 22220  loss: 0.5498 (0.7618)  loss_classifier: 0.1939 (0.2687)  loss_box_reg: 0.0901 (0.1258)  loss_mask: 0.2390 (0.2764)  loss_objectness: 0.0198 (0.0386)  loss_rpn_box_reg: 0.0296 (0.0522)  time: 0.8451 (1.5445)  data: 0.0030 (0.7085)  lr: 0.001200  max mem: 24032
2020-02-11 06:59:05,990 maskrcnn_benchmark.trainer INFO: eta: 8:28:26  iter: 22240  loss: 0.6446 (0.7616)  loss_classifier: 0.2125 (0.2687)  loss_box_reg: 0.1059 (0.1258)  loss_mask: 0.2353 (0.2764)  loss_objectness: 0.0199 (0.0386)  loss_rpn_box_reg: 0.0305 (0.0522)  time: 0.8466 (1.5438)  data: 0.0030 (0.7079)  lr: 0.001200  max mem: 24032
:::MLL 1581404359.178 epoch_stop: {"value": null, "metadata": {"epoch_num": 26, "file": "tools/train_mlperf.py", "lineno": 75}}
:::MLL 1581404359.178 block_stop: {"value": null, "metadata": {"first_epoch_num": 26, "file": "tools/train_mlperf.py", "lineno": 76}}
:::MLL 1581404359.179 eval_start: {"value": null, "metadata": {"epoch_num": 26, "file": "tools/train_mlperf.py", "lineno": 77}}
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
2020-02-11 06:59:20,038 maskrcnn_benchmark.data.build WARNING: When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
Done (t=3.93s)
creating index...
Done (t=3.90s)
creating index...
Done (t=3.97s)
creating index...
Done (t=4.04s)
creating index...
index created!
Done (t=3.92s)
creating index...
Done (t=3.88s)
creating index...
Done (t=3.94s)
creating index...
Done (t=3.93s)
creating index...
index created!
  0%|                                                  | 0/2532 [00:00<?, ?it/s]index created!
  0%|                                                  | 0/2532 [00:00<?, ?it/s]index created!
  0%|                                                  | 0/2532 [00:00<?, ?it/s]index created!
index created!
index created!
  0%|                                                  | 0/2532 [00:00<?, ?it/s]index created!
  0%|                                                  | 0/2532 [00:00<?, ?it/s]2020-02-11 06:59:24,419 maskrcnn_benchmark.inference INFO: Start evaluation on coco_2014_val dataset(40504 images).
 99%|██████████████████████████████████████▍| 2499/2532 [03:44<00:02, 12.13it/s]
100%|███████████████████████████████████████| 2532/2532 [03:45<00:00, 11.22it/s]
100%|███████████████████████████████████████| 2532/2532 [03:46<00:00, 11.20it/s]
100%|███████████████████████████████████████| 2532/2532 [03:46<00:00, 11.20it/s]
100%|██████████████████████████████████████▉| 2527/2532 [03:46<00:00, 12.34it/s]
100%|███████████████████████████████████████| 2532/2532 [03:47<00:00, 11.11it/s]
100%|███████████████████████████████████████| 2532/2532 [03:48<00:00, 11.08it/s]
100%|███████████████████████████████████████| 2532/2532 [03:49<00:00, 13.37it/s]
2020-02-11 07:03:15,190 maskrcnn_benchmark.inference INFO: Total inference time: 0:03:50.770849 (0.045579863564666256 s / img per device, on 8 devices)
2020-02-11 07:03:16,215 maskrcnn_benchmark.inference INFO: Preparing results for COCO format
2020-02-11 07:03:16,215 maskrcnn_benchmark.inference INFO: Preparing bbox results
2020-02-11 07:03:17,721 maskrcnn_benchmark.inference INFO: Preparing segm results
:::MLL 1581404840.883 block_start: {"value": null, "metadata": {"first_epoch_num": 27, "epoch_count": 1, "file": "tools/train_mlperf.py", "lineno": 134}}
:::MLL 1581404840.886 epoch_start: {"value": null, "metadata": {"epoch_num": 27, "file": "tools/train_mlperf.py", "lineno": 135}}
2020-02-11 07:07:24,312 maskrcnn_benchmark.trainer INFO: eta: 8:34:49  iter: 22260  loss: 0.5996 (0.7615)  loss_classifier: 0.1996 (0.2686)  loss_box_reg: 0.1040 (0.1258)  loss_mask: 0.2386 (0.2763)  loss_objectness: 0.0196 (0.0386)  loss_rpn_box_reg: 0.0411 (0.0522)  time: 0.8470 (1.5648)  data: 0.0031 (0.7289)  lr: 0.001200  max mem: 24032
Evaluating predictions
creating index...
GT annotations already exist!
2020-02-11 07:07:41,228 maskrcnn_benchmark.trainer INFO: eta: 8:34:05  iter: 22280  loss: 0.6579 (0.7614)  loss_classifier: 0.2308 (0.2686)  loss_box_reg: 0.1131 (0.1258)  loss_mask: 0.2408 (0.2763)  loss_objectness: 0.0222 (0.0385)  loss_rpn_box_reg: 0.0406 (0.0522)  time: 0.8469 (1.5642)  data: 0.0031 (0.7282)  lr: 0.001200  max mem: 24032
2020-02-11 07:07:58,094 maskrcnn_benchmark.trainer INFO: eta: 8:33:21  iter: 22300  loss: 0.6272 (0.7613)  loss_classifier: 0.2207 (0.2685)  loss_box_reg: 0.1117 (0.1258)  loss_mask: 0.2548 (0.2763)  loss_objectness: 0.0193 (0.0385)  loss_rpn_box_reg: 0.0423 (0.0522)  time: 0.8426 (1.5635)  data: 0.0031 (0.7276)  lr: 0.001200  max mem: 24032
Loading and preparing results...
resFile is ./inference/coco_2014_val/bbox.json
2020-02-11 07:08:14,962 maskrcnn_benchmark.trainer INFO: eta: 8:32:37  iter: 22320  loss: 0.6676 (0.7612)  loss_classifier: 0.2069 (0.2685)  loss_box_reg: 0.1138 (0.1258)  loss_mask: 0.2553 (0.2763)  loss_objectness: 0.0188 (0.0385)  loss_rpn_box_reg: 0.0403 (0.0522)  time: 0.8403 (1.5629)  data: 0.0030 (0.7269)  lr: 0.001200  max mem: 24032
DONE (t=6.22s)
Running per image evaluation...
Evaluate annotation type *bbox*
2020-02-11 07:08:31,958 maskrcnn_benchmark.trainer INFO: eta: 8:31:54  iter: 22340  loss: 0.5970 (0.7611)  loss_classifier: 0.2073 (0.2684)  loss_box_reg: 0.0971 (0.1257)  loss_mask: 0.2541 (0.2763)  loss_objectness: 0.0186 (0.0385)  loss_rpn_box_reg: 0.0278 (0.0522)  time: 0.8431 (1.5623)  data: 0.0029 (0.7263)  lr: 0.001200  max mem: 24032
DONE (t=24.11s).
Accumulating evaluation results...
DONE (t=0.00s).
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.36224
 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=100 ] = 0.57346
 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=100 ] = 0.39368
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.19020
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.37878
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.46648
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=  1 ] = 0.30332
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets= 10 ] = 0.47288
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.49410
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.29611
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.52084
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.63100
2020-02-11 07:08:48,805 maskrcnn_benchmark.trainer INFO: eta: 8:31:10  iter: 22360  loss: 0.6381 (0.7610)  loss_classifier: 0.2098 (0.2684)  loss_box_reg: 0.1170 (0.1257)  loss_mask: 0.2580 (0.2762)  loss_objectness: 0.0187 (0.0385)  loss_rpn_box_reg: 0.0342 (0.0522)  time: 0.8456 (1.5616)  data: 0.0029 (0.7256)  lr: 0.001200  max mem: 24032
2020-02-11 07:09:05,897 maskrcnn_benchmark.trainer INFO: eta: 8:30:26  iter: 22380  loss: 0.6346 (0.7609)  loss_classifier: 0.2088 (0.2683)  loss_box_reg: 0.1034 (0.1257)  loss_mask: 0.2445 (0.2762)  loss_objectness: 0.0175 (0.0385)  loss_rpn_box_reg: 0.0372 (0.0522)  time: 0.8513 (1.5610)  data: 0.0030 (0.7250)  lr: 0.001200  max mem: 24032
2020-02-11 07:09:22,907 maskrcnn_benchmark.trainer INFO: eta: 8:29:42  iter: 22400  loss: 0.6241 (0.7607)  loss_classifier: 0.1999 (0.2683)  loss_box_reg: 0.1038 (0.1257)  loss_mask: 0.2425 (0.2762)  loss_objectness: 0.0187 (0.0384)  loss_rpn_box_reg: 0.0379 (0.0522)  time: 0.8496 (1.5603)  data: 0.0029 (0.7243)  lr: 0.001200  max mem: 24032
Loading and preparing results...
resFile is ./inference/coco_2014_val/segm.json
2020-02-11 07:09:39,823 maskrcnn_benchmark.trainer INFO: eta: 8:28:59  iter: 22420  loss: 0.6555 (0.7606)  loss_classifier: 0.2214 (0.2682)  loss_box_reg: 0.1093 (0.1257)  loss_mask: 0.2461 (0.2762)  loss_objectness: 0.0233 (0.0384)  loss_rpn_box_reg: 0.0470 (0.0521)  time: 0.8455 (1.5597)  data: 0.0029 (0.7237)  lr: 0.001200  max mem: 24032
DONE (t=14.52s)
Running per image evaluation...
Evaluate annotation type *segm*
2020-02-11 07:09:56,752 maskrcnn_benchmark.trainer INFO: eta: 8:28:15  iter: 22440  loss: 0.5214 (0.7605)  loss_classifier: 0.1624 (0.2681)  loss_box_reg: 0.0911 (0.1257)  loss_mask: 0.2424 (0.2761)  loss_objectness: 0.0167 (0.0384)  loss_rpn_box_reg: 0.0233 (0.0521)  time: 0.8441 (1.5591)  data: 0.0029 (0.7230)  lr: 0.001200  max mem: 24032
2020-02-11 07:10:13,762 maskrcnn_benchmark.trainer INFO: eta: 8:27:32  iter: 22460  loss: 0.5832 (0.7603)  loss_classifier: 0.1906 (0.2681)  loss_box_reg: 0.0958 (0.1256)  loss_mask: 0.2413 (0.2761)  loss_objectness: 0.0169 (0.0384)  loss_rpn_box_reg: 0.0350 (0.0521)  time: 0.8455 (1.5584)  data: 0.0027 (0.7224)  lr: 0.001200  max mem: 24032
DONE (t=31.16s).
Accumulating evaluation results...
DONE (t=0.00s).
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.32777
 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=100 ] = 0.54185
 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=100 ] = 0.34594
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.13568
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.34064
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.48121
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=  1 ] = 0.28477
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets= 10 ] = 0.43295
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.45052
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.25071
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.47999
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.60296
2020-02-11 07:10:24,585 maskrcnn_benchmark.trainer INFO: bbox mAP: 0.3622447916841842, segm mAP: 0.3277727028549207
:::MLL 1581405024.586 eval_accuracy: {"value": {"accuracy": {"BBOX": 0.3622447916841842, "SEGM": 0.3277727028549207}}, "metadata": {"epoch_num": 26, "file": "tools/train_mlperf.py", "lineno": 99}}
:::MLL 1581405024.586 eval_stop: {"value": null, "metadata": {"epoch_num": 26, "file": "tools/train_mlperf.py", "lineno": 100}}
2020-02-11 07:10:33,118 maskrcnn_benchmark.trainer INFO: eta: 8:26:50  iter: 22480  loss: 0.6000 (0.7602)  loss_classifier: 0.2056 (0.2680)  loss_box_reg: 0.1001 (0.1256)  loss_mask: 0.2433 (0.2761)  loss_objectness: 0.0179 (0.0384)  loss_rpn_box_reg: 0.0318 (0.0521)  time: 0.8460 (1.5579)  data: 0.0030 (0.7218)  lr: 0.001200  max mem: 24032
2020-02-11 07:10:49,949 maskrcnn_benchmark.trainer INFO: eta: 8:26:07  iter: 22500  loss: 0.5921 (0.7601)  loss_classifier: 0.1968 (0.2680)  loss_box_reg: 0.1008 (0.1256)  loss_mask: 0.2374 (0.2760)  loss_objectness: 0.0185 (0.0384)  loss_rpn_box_reg: 0.0340 (0.0521)  time: 0.8467 (1.5573)  data: 0.0028 (0.7211)  lr: 0.001200  max mem: 24032
2020-02-11 07:11:06,746 maskrcnn_benchmark.trainer INFO: eta: 8:25:23  iter: 22520  loss: 0.6365 (0.7599)  loss_classifier: 0.2150 (0.2679)  loss_box_reg: 0.1107 (0.1256)  loss_mask: 0.2370 (0.2760)  loss_objectness: 0.0189 (0.0383)  loss_rpn_box_reg: 0.0379 (0.0521)  time: 0.8392 (1.5566)  data: 0.0029 (0.7205)  lr: 0.001200  max mem: 24032
2020-02-11 07:11:23,755 maskrcnn_benchmark.trainer INFO: eta: 8:24:40  iter: 22540  loss: 0.5381 (0.7598)  loss_classifier: 0.1797 (0.2678)  loss_box_reg: 0.0956 (0.1256)  loss_mask: 0.2208 (0.2760)  loss_objectness: 0.0169 (0.0383)  loss_rpn_box_reg: 0.0310 (0.0521)  time: 0.8453 (1.5560)  data: 0.0028 (0.7199)  lr: 0.001200  max mem: 24032
2020-02-11 07:11:40,531 maskrcnn_benchmark.trainer INFO: eta: 8:23:56  iter: 22560  loss: 0.5871 (0.7596)  loss_classifier: 0.1825 (0.2678)  loss_box_reg: 0.0947 (0.1255)  loss_mask: 0.2444 (0.2760)  loss_objectness: 0.0152 (0.0383)  loss_rpn_box_reg: 0.0326 (0.0521)  time: 0.8379 (1.5554)  data: 0.0029 (0.7192)  lr: 0.001200  max mem: 24032
2020-02-11 07:11:57,398 maskrcnn_benchmark.trainer INFO: eta: 8:23:13  iter: 22580  loss: 0.6288 (0.7595)  loss_classifier: 0.2102 (0.2677)  loss_box_reg: 0.1009 (0.1255)  loss_mask: 0.2563 (0.2759)  loss_objectness: 0.0162 (0.0383)  loss_rpn_box_reg: 0.0367 (0.0521)  time: 0.8424 (1.5548)  data: 0.0030 (0.7186)  lr: 0.001200  max mem: 24032
2020-02-11 07:12:14,305 maskrcnn_benchmark.trainer INFO: eta: 8:22:30  iter: 22600  loss: 0.6089 (0.7594)  loss_classifier: 0.2126 (0.2677)  loss_box_reg: 0.0997 (0.1255)  loss_mask: 0.2279 (0.2759)  loss_objectness: 0.0183 (0.0383)  loss_rpn_box_reg: 0.0357 (0.0520)  time: 0.8408 (1.5541)  data: 0.0029 (0.7180)  lr: 0.001200  max mem: 24032
2020-02-11 07:12:31,330 maskrcnn_benchmark.trainer INFO: eta: 8:21:46  iter: 22620  loss: 0.6307 (0.7593)  loss_classifier: 0.2183 (0.2676)  loss_box_reg: 0.1141 (0.1255)  loss_mask: 0.2485 (0.2759)  loss_objectness: 0.0187 (0.0383)  loss_rpn_box_reg: 0.0334 (0.0520)  time: 0.8501 (1.5535)  data: 0.0030 (0.7173)  lr: 0.001200  max mem: 24032
2020-02-11 07:12:48,165 maskrcnn_benchmark.trainer INFO: eta: 8:21:03  iter: 22640  loss: 0.5990 (0.7592)  loss_classifier: 0.1844 (0.2676)  loss_box_reg: 0.0927 (0.1255)  loss_mask: 0.2319 (0.2758)  loss_objectness: 0.0179 (0.0382)  loss_rpn_box_reg: 0.0331 (0.0520)  time: 0.8416 (1.5529)  data: 0.0030 (0.7167)  lr: 0.001200  max mem: 24032
2020-02-11 07:13:05,209 maskrcnn_benchmark.trainer INFO: eta: 8:20:20  iter: 22660  loss: 0.5848 (0.7590)  loss_classifier: 0.1980 (0.2675)  loss_box_reg: 0.0966 (0.1255)  loss_mask: 0.2415 (0.2758)  loss_objectness: 0.0182 (0.0382)  loss_rpn_box_reg: 0.0279 (0.0520)  time: 0.8522 (1.5523)  data: 0.0029 (0.7161)  lr: 0.001200  max mem: 24032
2020-02-11 07:13:22,133 maskrcnn_benchmark.trainer INFO: eta: 8:19:37  iter: 22680  loss: 0.6173 (0.7589)  loss_classifier: 0.1906 (0.2674)  loss_box_reg: 0.1047 (0.1254)  loss_mask: 0.2509 (0.2758)  loss_objectness: 0.0159 (0.0382)  loss_rpn_box_reg: 0.0360 (0.0520)  time: 0.8464 (1.5516)  data: 0.0031 (0.7154)  lr: 0.001200  max mem: 24032
2020-02-11 07:13:38,962 maskrcnn_benchmark.trainer INFO: eta: 8:18:54  iter: 22700  loss: 0.6099 (0.7587)  loss_classifier: 0.1978 (0.2674)  loss_box_reg: 0.1016 (0.1254)  loss_mask: 0.2444 (0.2757)  loss_objectness: 0.0181 (0.0382)  loss_rpn_box_reg: 0.0364 (0.0520)  time: 0.8396 (1.5510)  data: 0.0031 (0.7148)  lr: 0.001200  max mem: 24032
2020-02-11 07:13:55,890 maskrcnn_benchmark.trainer INFO: eta: 8:18:11  iter: 22720  loss: 0.5985 (0.7586)  loss_classifier: 0.1930 (0.2673)  loss_box_reg: 0.1058 (0.1254)  loss_mask: 0.2406 (0.2757)  loss_objectness: 0.0175 (0.0382)  loss_rpn_box_reg: 0.0353 (0.0520)  time: 0.8411 (1.5504)  data: 0.0029 (0.7142)  lr: 0.001200  max mem: 24032
2020-02-11 07:14:12,779 maskrcnn_benchmark.trainer INFO: eta: 8:17:28  iter: 22740  loss: 0.5237 (0.7584)  loss_classifier: 0.1607 (0.2673)  loss_box_reg: 0.0865 (0.1254)  loss_mask: 0.2399 (0.2757)  loss_objectness: 0.0125 (0.0382)  loss_rpn_box_reg: 0.0299 (0.0520)  time: 0.8430 (1.5498)  data: 0.0028 (0.7135)  lr: 0.001200  max mem: 24032
2020-02-11 07:14:29,682 maskrcnn_benchmark.trainer INFO: eta: 8:16:45  iter: 22760  loss: 0.6132 (0.7583)  loss_classifier: 0.1858 (0.2672)  loss_box_reg: 0.1063 (0.1253)  loss_mask: 0.2460 (0.2757)  loss_objectness: 0.0175 (0.0381)  loss_rpn_box_reg: 0.0354 (0.0520)  time: 0.8444 (1.5491)  data: 0.0030 (0.7129)  lr: 0.001200  max mem: 24032
2020-02-11 07:14:46,546 maskrcnn_benchmark.trainer INFO: eta: 8:16:02  iter: 22780  loss: 0.6533 (0.7582)  loss_classifier: 0.2129 (0.2672)  loss_box_reg: 0.1142 (0.1253)  loss_mask: 0.2553 (0.2756)  loss_objectness: 0.0199 (0.0381)  loss_rpn_box_reg: 0.0384 (0.0519)  time: 0.8436 (1.5485)  data: 0.0030 (0.7123)  lr: 0.001200  max mem: 24032
2020-02-11 07:15:03,389 maskrcnn_benchmark.trainer INFO: eta: 8:15:19  iter: 22800  loss: 0.5670 (0.7581)  loss_classifier: 0.1884 (0.2671)  loss_box_reg: 0.0959 (0.1253)  loss_mask: 0.2336 (0.2756)  loss_objectness: 0.0173 (0.0381)  loss_rpn_box_reg: 0.0303 (0.0519)  time: 0.8369 (1.5479)  data: 0.0031 (0.7117)  lr: 0.001200  max mem: 24032
2020-02-11 07:15:20,264 maskrcnn_benchmark.trainer INFO: eta: 8:14:37  iter: 22820  loss: 0.5138 (0.7579)  loss_classifier: 0.1660 (0.2670)  loss_box_reg: 0.0864 (0.1253)  loss_mask: 0.2322 (0.2756)  loss_objectness: 0.0164 (0.0381)  loss_rpn_box_reg: 0.0306 (0.0519)  time: 0.8405 (1.5473)  data: 0.0028 (0.7111)  lr: 0.001200  max mem: 24032
2020-02-11 07:15:37,197 maskrcnn_benchmark.trainer INFO: eta: 8:13:54  iter: 22840  loss: 0.5925 (0.7577)  loss_classifier: 0.1898 (0.2670)  loss_box_reg: 0.1004 (0.1253)  loss_mask: 0.2384 (0.2755)  loss_objectness: 0.0156 (0.0381)  loss_rpn_box_reg: 0.0328 (0.0519)  time: 0.8460 (1.5467)  data: 0.0029 (0.7104)  lr: 0.001200  max mem: 24032
2020-02-11 07:15:54,215 maskrcnn_benchmark.trainer INFO: eta: 8:13:11  iter: 22860  loss: 0.5742 (0.7576)  loss_classifier: 0.1846 (0.2669)  loss_box_reg: 0.0978 (0.1253)  loss_mask: 0.2379 (0.2755)  loss_objectness: 0.0165 (0.0380)  loss_rpn_box_reg: 0.0364 (0.0519)  time: 0.8509 (1.5461)  data: 0.0030 (0.7098)  lr: 0.001200  max mem: 24032
2020-02-11 07:16:11,008 maskrcnn_benchmark.trainer INFO: eta: 8:12:29  iter: 22880  loss: 0.6390 (0.7575)  loss_classifier: 0.2091 (0.2668)  loss_box_reg: 0.1032 (0.1252)  loss_mask: 0.2406 (0.2755)  loss_objectness: 0.0204 (0.0380)  loss_rpn_box_reg: 0.0399 (0.0519)  time: 0.8408 (1.5455)  data: 0.0031 (0.7092)  lr: 0.001200  max mem: 24032
2020-02-11 07:16:27,974 maskrcnn_benchmark.trainer INFO: eta: 8:11:46  iter: 22900  loss: 0.5894 (0.7573)  loss_classifier: 0.1942 (0.2668)  loss_box_reg: 0.0996 (0.1252)  loss_mask: 0.2322 (0.2755)  loss_objectness: 0.0185 (0.0380)  loss_rpn_box_reg: 0.0351 (0.0519)  time: 0.8508 (1.5448)  data: 0.0030 (0.7086)  lr: 0.001200  max mem: 24032
2020-02-11 07:16:44,718 maskrcnn_benchmark.trainer INFO: eta: 8:11:03  iter: 22920  loss: 0.5585 (0.7572)  loss_classifier: 0.1788 (0.2667)  loss_box_reg: 0.0874 (0.1252)  loss_mask: 0.2308 (0.2754)  loss_objectness: 0.0170 (0.0380)  loss_rpn_box_reg: 0.0365 (0.0519)  time: 0.8366 (1.5442)  data: 0.0028 (0.7080)  lr: 0.001200  max mem: 24032
2020-02-11 07:17:01,529 maskrcnn_benchmark.trainer INFO: eta: 8:10:21  iter: 22940  loss: 0.5870 (0.7571)  loss_classifier: 0.1877 (0.2667)  loss_box_reg: 0.0926 (0.1252)  loss_mask: 0.2421 (0.2754)  loss_objectness: 0.0200 (0.0380)  loss_rpn_box_reg: 0.0435 (0.0519)  time: 0.8368 (1.5436)  data: 0.0030 (0.7074)  lr: 0.001200  max mem: 24032
2020-02-11 07:17:18,439 maskrcnn_benchmark.trainer INFO: eta: 8:09:38  iter: 22960  loss: 0.5574 (0.7569)  loss_classifier: 0.1852 (0.2666)  loss_box_reg: 0.1013 (0.1252)  loss_mask: 0.2330 (0.2754)  loss_objectness: 0.0175 (0.0380)  loss_rpn_box_reg: 0.0348 (0.0518)  time: 0.8482 (1.5430)  data: 0.0028 (0.7067)  lr: 0.001200  max mem: 24032
2020-02-11 07:17:35,271 maskrcnn_benchmark.trainer INFO: eta: 8:08:56  iter: 22980  loss: 0.5747 (0.7568)  loss_classifier: 0.1933 (0.2665)  loss_box_reg: 0.0975 (0.1251)  loss_mask: 0.2395 (0.2753)  loss_objectness: 0.0142 (0.0380)  loss_rpn_box_reg: 0.0353 (0.0518)  time: 0.8369 (1.5424)  data: 0.0028 (0.7061)  lr: 0.001200  max mem: 24032
2020-02-11 07:17:52,230 maskrcnn_benchmark.trainer INFO: eta: 8:08:13  iter: 23000  loss: 0.6080 (0.7567)  loss_classifier: 0.1966 (0.2665)  loss_box_reg: 0.1003 (0.1251)  loss_mask: 0.2376 (0.2753)  loss_objectness: 0.0192 (0.0379)  loss_rpn_box_reg: 0.0337 (0.0518)  time: 0.8452 (1.5418)  data: 0.0030 (0.7055)  lr: 0.001200  max mem: 24032
2020-02-11 07:18:09,212 maskrcnn_benchmark.trainer INFO: eta: 8:07:31  iter: 23020  loss: 0.5891 (0.7565)  loss_classifier: 0.1851 (0.2664)  loss_box_reg: 0.0994 (0.1251)  loss_mask: 0.2408 (0.2753)  loss_objectness: 0.0188 (0.0379)  loss_rpn_box_reg: 0.0329 (0.0518)  time: 0.8511 (1.5412)  data: 0.0030 (0.7049)  lr: 0.001200  max mem: 24032
2020-02-11 07:18:26,157 maskrcnn_benchmark.trainer INFO: eta: 8:06:49  iter: 23040  loss: 0.5942 (0.7564)  loss_classifier: 0.1826 (0.2664)  loss_box_reg: 0.0951 (0.1251)  loss_mask: 0.2438 (0.2753)  loss_objectness: 0.0160 (0.0379)  loss_rpn_box_reg: 0.0359 (0.0518)  time: 0.8462 (1.5406)  data: 0.0029 (0.7043)  lr: 0.001200  max mem: 24032
2020-02-11 07:18:42,961 maskrcnn_benchmark.trainer INFO: eta: 8:06:07  iter: 23060  loss: 0.5852 (0.7563)  loss_classifier: 0.1998 (0.2663)  loss_box_reg: 0.1008 (0.1251)  loss_mask: 0.2337 (0.2752)  loss_objectness: 0.0170 (0.0379)  loss_rpn_box_reg: 0.0264 (0.0518)  time: 0.8392 (1.5400)  data: 0.0029 (0.7037)  lr: 0.001200  max mem: 24032
2020-02-11 07:18:59,822 maskrcnn_benchmark.trainer INFO: eta: 8:05:24  iter: 23080  loss: 0.5618 (0.7561)  loss_classifier: 0.1714 (0.2662)  loss_box_reg: 0.0948 (0.1250)  loss_mask: 0.2384 (0.2752)  loss_objectness: 0.0189 (0.0379)  loss_rpn_box_reg: 0.0255 (0.0518)  time: 0.8430 (1.5394)  data: 0.0030 (0.7031)  lr: 0.001200  max mem: 24032
2020-02-11 07:19:16,805 maskrcnn_benchmark.trainer INFO: eta: 8:04:42  iter: 23100  loss: 0.5986 (0.7560)  loss_classifier: 0.1952 (0.2662)  loss_box_reg: 0.1073 (0.1250)  loss_mask: 0.2402 (0.2752)  loss_objectness: 0.0159 (0.0379)  loss_rpn_box_reg: 0.0372 (0.0518)  time: 0.8516 (1.5388)  data: 0.0029 (0.7025)  lr: 0.001200  max mem: 24032
:::MLL 1581405566.628 epoch_stop: {"value": null, "metadata": {"epoch_num": 27, "file": "tools/train_mlperf.py", "lineno": 75}}
:::MLL 1581405566.628 block_stop: {"value": null, "metadata": {"first_epoch_num": 27, "file": "tools/train_mlperf.py", "lineno": 76}}
:::MLL 1581405566.629 eval_start: {"value": null, "metadata": {"epoch_num": 27, "file": "tools/train_mlperf.py", "lineno": 77}}
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
2020-02-11 07:19:27,391 maskrcnn_benchmark.data.build WARNING: When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
Done (t=3.95s)
creating index...
Done (t=3.90s)
creating index...
Done (t=3.91s)
creating index...
Done (t=3.90s)
creating index...
index created!
Done (t=3.98s)
creating index...
Done (t=3.86s)
creating index...
  0%|                                                  | 0/2532 [00:00<?, ?it/s]Done (t=3.94s)
creating index...
Done (t=3.98s)
creating index...
index created!
index created!
index created!
index created!
  0%|                                                  | 0/2532 [00:00<?, ?it/s]index created!
  0%|                                                  | 0/2532 [00:00<?, ?it/s]index created!
  0%|                                                  | 0/2532 [00:00<?, ?it/s]index created!
  0%|                                                  | 0/2532 [00:00<?, ?it/s]2020-02-11 07:19:31,785 maskrcnn_benchmark.inference INFO: Start evaluation on coco_2014_val dataset(40504 images).
100%|███████████████████████████████████████| 2532/2532 [03:44<00:00, 11.30it/s]
100%|███████████████████████████████████████| 2532/2532 [03:44<00:00, 11.28it/s]
 99%|██████████████████████████████████████▍| 2495/2532 [03:45<00:03, 11.38it/s]
100%|███████████████████████████████████████| 2532/2532 [03:47<00:00, 11.14it/s]
100%|███████████████████████████████████████| 2532/2532 [03:47<00:00, 11.14it/s]
100%|███████████████████████████████████████| 2532/2532 [03:48<00:00, 11.08it/s]
100%|███████████████████████████████████████| 2532/2532 [03:50<00:00, 11.00it/s]
100%|███████████████████████████████████████| 2532/2532 [03:52<00:00, 13.38it/s]
2020-02-11 07:23:25,504 maskrcnn_benchmark.inference INFO: Total inference time: 0:03:53.718262 (0.046162011099266674 s / img per device, on 8 devices)
2020-02-11 07:23:26,530 maskrcnn_benchmark.inference INFO: Preparing results for COCO format
2020-02-11 07:23:26,530 maskrcnn_benchmark.inference INFO: Preparing bbox results
2020-02-11 07:23:28,046 maskrcnn_benchmark.inference INFO: Preparing segm results
:::MLL 1581406048.188 block_start: {"value": null, "metadata": {"first_epoch_num": 28, "epoch_count": 1, "file": "tools/train_mlperf.py", "lineno": 134}}
:::MLL 1581406048.190 epoch_start: {"value": null, "metadata": {"epoch_num": 28, "file": "tools/train_mlperf.py", "lineno": 135}}
2020-02-11 07:27:34,950 maskrcnn_benchmark.trainer INFO: eta: 8:10:33  iter: 23120  loss: 0.5323 (0.7558)  loss_classifier: 0.1788 (0.2661)  loss_box_reg: 0.0870 (0.1250)  loss_mask: 0.2321 (0.2751)  loss_objectness: 0.0164 (0.0378)  loss_rpn_box_reg: 0.0323 (0.0517)  time: 0.8364 (1.5590)  data: 0.0030 (0.7227)  lr: 0.001200  max mem: 24032
Evaluating predictions
creating index...
GT annotations already exist!
2020-02-11 07:27:51,956 maskrcnn_benchmark.trainer INFO: eta: 8:09:51  iter: 23140  loss: 0.5963 (0.7557)  loss_classifier: 0.1971 (0.2660)  loss_box_reg: 0.0930 (0.1250)  loss_mask: 0.2416 (0.2751)  loss_objectness: 0.0174 (0.0378)  loss_rpn_box_reg: 0.0350 (0.0517)  time: 0.8496 (1.5584)  data: 0.0029 (0.7221)  lr: 0.001200  max mem: 24032
2020-02-11 07:28:08,991 maskrcnn_benchmark.trainer INFO: eta: 8:09:08  iter: 23160  loss: 0.6176 (0.7556)  loss_classifier: 0.1965 (0.2660)  loss_box_reg: 0.1041 (0.1250)  loss_mask: 0.2318 (0.2751)  loss_objectness: 0.0130 (0.0378)  loss_rpn_box_reg: 0.0344 (0.0517)  time: 0.8393 (1.5578)  data: 0.0030 (0.7215)  lr: 0.001200  max mem: 24032
Gradient overflow.  Skipping step, loss scaler 0 reducing loss scale to 131072.0
Gradient overflow.  Skipping step, loss scaler 0 reducing loss scale to 131072.0
Gradient overflow.  Skipping step, loss scaler 0 reducing loss scale to 131072.0
Gradient overflow.  Skipping step, loss scaler 0 reducing loss scale to 131072.0
Gradient overflow.  Skipping step, loss scaler 0 reducing loss scale to 131072.0
Gradient overflow.  Skipping step, loss scaler 0 reducing loss scale to 131072.0
Gradient overflow.  Skipping step, loss scaler 0 reducing loss scale to 131072.0
Gradient overflow.  Skipping step, loss scaler 0 reducing loss scale to 131072.0
Loading and preparing results...
resFile is ./inference/coco_2014_val/bbox.json
2020-02-11 07:28:26,039 maskrcnn_benchmark.trainer INFO: eta: 8:08:25  iter: 23180  loss: 0.6366 (0.7554)  loss_classifier: 0.2030 (0.2659)  loss_box_reg: 0.0976 (0.1249)  loss_mask: 0.2419 (0.2751)  loss_objectness: 0.0195 (0.0378)  loss_rpn_box_reg: 0.0368 (0.0517)  time: 0.8447 (1.5572)  data: 0.0030 (0.7208)  lr: 0.001200  max mem: 24032
DONE (t=6.33s)
Running per image evaluation...
Evaluate annotation type *bbox*
2020-02-11 07:28:42,903 maskrcnn_benchmark.trainer INFO: eta: 8:07:43  iter: 23200  loss: 0.5910 (0.7553)  loss_classifier: 0.1843 (0.2659)  loss_box_reg: 0.1017 (0.1249)  loss_mask: 0.2360 (0.2750)  loss_objectness: 0.0163 (0.0378)  loss_rpn_box_reg: 0.0372 (0.0517)  time: 0.8366 (1.5565)  data: 0.0030 (0.7202)  lr: 0.001200  max mem: 24032
DONE (t=24.66s).
Accumulating evaluation results...
DONE (t=0.00s).
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.36194
 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=100 ] = 0.57360
 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=100 ] = 0.39294
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.18981
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.37819
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.46686
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=  1 ] = 0.30355
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets= 10 ] = 0.47314
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.49449
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.29608
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.52129
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.63249
2020-02-11 07:28:59,645 maskrcnn_benchmark.trainer INFO: eta: 8:07:00  iter: 23220  loss: 0.5976 (0.7552)  loss_classifier: 0.1942 (0.2658)  loss_box_reg: 0.0912 (0.1249)  loss_mask: 0.2377 (0.2750)  loss_objectness: 0.0210 (0.0378)  loss_rpn_box_reg: 0.0419 (0.0517)  time: 0.8379 (1.5559)  data: 0.0030 (0.7196)  lr: 0.001200  max mem: 24032
2020-02-11 07:29:16,607 maskrcnn_benchmark.trainer INFO: eta: 8:06:17  iter: 23240  loss: 0.6199 (0.7551)  loss_classifier: 0.1991 (0.2658)  loss_box_reg: 0.0995 (0.1249)  loss_mask: 0.2452 (0.2750)  loss_objectness: 0.0159 (0.0377)  loss_rpn_box_reg: 0.0327 (0.0517)  time: 0.8470 (1.5553)  data: 0.0030 (0.7190)  lr: 0.001200  max mem: 24032
2020-02-11 07:29:33,543 maskrcnn_benchmark.trainer INFO: eta: 8:05:35  iter: 23260  loss: 0.5870 (0.7549)  loss_classifier: 0.1963 (0.2657)  loss_box_reg: 0.1034 (0.1248)  loss_mask: 0.2417 (0.2749)  loss_objectness: 0.0187 (0.0377)  loss_rpn_box_reg: 0.0331 (0.0517)  time: 0.8462 (1.5547)  data: 0.0029 (0.7184)  lr: 0.001200  max mem: 24032
Loading and preparing results...
resFile is ./inference/coco_2014_val/segm.json
2020-02-11 07:29:50,356 maskrcnn_benchmark.trainer INFO: eta: 8:04:52  iter: 23280  loss: 0.5621 (0.7548)  loss_classifier: 0.1912 (0.2656)  loss_box_reg: 0.0933 (0.1248)  loss_mask: 0.2271 (0.2749)  loss_objectness: 0.0166 (0.0377)  loss_rpn_box_reg: 0.0409 (0.0517)  time: 0.8382 (1.5541)  data: 0.0028 (0.7178)  lr: 0.001200  max mem: 24032
DONE (t=14.83s)
Running per image evaluation...
Evaluate annotation type *segm*
2020-02-11 07:30:07,260 maskrcnn_benchmark.trainer INFO: eta: 8:04:10  iter: 23300  loss: 0.5751 (0.7546)  loss_classifier: 0.1855 (0.2656)  loss_box_reg: 0.0979 (0.1248)  loss_mask: 0.2385 (0.2749)  loss_objectness: 0.0196 (0.0377)  loss_rpn_box_reg: 0.0326 (0.0517)  time: 0.8371 (1.5535)  data: 0.0029 (0.7171)  lr: 0.001200  max mem: 24032
2020-02-11 07:30:24,044 maskrcnn_benchmark.trainer INFO: eta: 8:03:27  iter: 23320  loss: 0.5907 (0.7545)  loss_classifier: 0.2064 (0.2655)  loss_box_reg: 0.1021 (0.1248)  loss_mask: 0.2354 (0.2748)  loss_objectness: 0.0211 (0.0377)  loss_rpn_box_reg: 0.0345 (0.0516)  time: 0.8366 (1.5529)  data: 0.0030 (0.7165)  lr: 0.001200  max mem: 24032
DONE (t=31.87s).
Accumulating evaluation results...
DONE (t=0.00s).
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.32770
 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=100 ] = 0.54181
 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=100 ] = 0.34625
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.13522
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.34023
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.48165
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=  1 ] = 0.28524
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets= 10 ] = 0.43339
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.45108
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.25150
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.48043
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.60466
2020-02-11 07:30:34,876 maskrcnn_benchmark.trainer INFO: bbox mAP: 0.36194339255978464, segm mAP: 0.32769629172650283
:::MLL 1581406234.892 eval_accuracy: {"value": {"accuracy": {"BBOX": 0.36194339255978464, "SEGM": 0.32769629172650283}}, "metadata": {"epoch_num": 27, "file": "tools/train_mlperf.py", "lineno": 99}}
:::MLL 1581406234.893 eval_stop: {"value": null, "metadata": {"epoch_num": 27, "file": "tools/train_mlperf.py", "lineno": 100}}
2020-02-11 07:30:43,268 maskrcnn_benchmark.trainer INFO: eta: 8:02:47  iter: 23340  loss: 0.5716 (0.7544)  loss_classifier: 0.1837 (0.2655)  loss_box_reg: 0.0972 (0.1248)  loss_mask: 0.2484 (0.2748)  loss_objectness: 0.0167 (0.0377)  loss_rpn_box_reg: 0.0275 (0.0516)  time: 0.8484 (1.5524)  data: 0.0030 (0.7159)  lr: 0.001200  max mem: 24032
2020-02-11 07:31:00,223 maskrcnn_benchmark.trainer INFO: eta: 8:02:04  iter: 23360  loss: 0.5394 (0.7542)  loss_classifier: 0.1782 (0.2654)  loss_box_reg: 0.0943 (0.1248)  loss_mask: 0.2436 (0.2748)  loss_objectness: 0.0168 (0.0376)  loss_rpn_box_reg: 0.0283 (0.0516)  time: 0.8548 (1.5518)  data: 0.0029 (0.7153)  lr: 0.001200  max mem: 24032
2020-02-11 07:31:17,266 maskrcnn_benchmark.trainer INFO: eta: 8:01:22  iter: 23380  loss: 0.6372 (0.7541)  loss_classifier: 0.2071 (0.2654)  loss_box_reg: 0.1120 (0.1247)  loss_mask: 0.2518 (0.2748)  loss_objectness: 0.0180 (0.0376)  loss_rpn_box_reg: 0.0396 (0.0516)  time: 0.8506 (1.5512)  data: 0.0031 (0.7147)  lr: 0.001200  max mem: 24032
2020-02-11 07:31:34,143 maskrcnn_benchmark.trainer INFO: eta: 8:00:40  iter: 23400  loss: 0.6286 (0.7540)  loss_classifier: 0.2095 (0.2653)  loss_box_reg: 0.1017 (0.1247)  loss_mask: 0.2361 (0.2748)  loss_objectness: 0.0186 (0.0376)  loss_rpn_box_reg: 0.0409 (0.0516)  time: 0.8418 (1.5506)  data: 0.0030 (0.7141)  lr: 0.001200  max mem: 24032
2020-02-11 07:31:51,057 maskrcnn_benchmark.trainer INFO: eta: 7:59:58  iter: 23420  loss: 0.6077 (0.7539)  loss_classifier: 0.2093 (0.2653)  loss_box_reg: 0.0996 (0.1247)  loss_mask: 0.2520 (0.2747)  loss_objectness: 0.0202 (0.0376)  loss_rpn_box_reg: 0.0341 (0.0516)  time: 0.8446 (1.5500)  data: 0.0030 (0.7135)  lr: 0.001200  max mem: 24032
2020-02-11 07:32:07,978 maskrcnn_benchmark.trainer INFO: eta: 7:59:16  iter: 23440  loss: 0.6123 (0.7538)  loss_classifier: 0.2004 (0.2652)  loss_box_reg: 0.1030 (0.1247)  loss_mask: 0.2480 (0.2747)  loss_objectness: 0.0204 (0.0376)  loss_rpn_box_reg: 0.0357 (0.0516)  time: 0.8468 (1.5494)  data: 0.0031 (0.7129)  lr: 0.001200  max mem: 24032
2020-02-11 07:32:24,916 maskrcnn_benchmark.trainer INFO: eta: 7:58:33  iter: 23460  loss: 0.6188 (0.7537)  loss_classifier: 0.2112 (0.2652)  loss_box_reg: 0.1020 (0.1247)  loss_mask: 0.2386 (0.2747)  loss_objectness: 0.0184 (0.0376)  loss_rpn_box_reg: 0.0296 (0.0516)  time: 0.8478 (1.5488)  data: 0.0030 (0.7123)  lr: 0.001200  max mem: 24032
2020-02-11 07:32:41,805 maskrcnn_benchmark.trainer INFO: eta: 7:57:51  iter: 23480  loss: 0.5754 (0.7535)  loss_classifier: 0.1790 (0.2651)  loss_box_reg: 0.0871 (0.1247)  loss_mask: 0.2317 (0.2746)  loss_objectness: 0.0143 (0.0376)  loss_rpn_box_reg: 0.0347 (0.0516)  time: 0.8441 (1.5482)  data: 0.0029 (0.7117)  lr: 0.001200  max mem: 24032
2020-02-11 07:32:58,670 maskrcnn_benchmark.trainer INFO: eta: 7:57:09  iter: 23500  loss: 0.5961 (0.7534)  loss_classifier: 0.1943 (0.2651)  loss_box_reg: 0.0941 (0.1246)  loss_mask: 0.2378 (0.2746)  loss_objectness: 0.0182 (0.0375)  loss_rpn_box_reg: 0.0379 (0.0516)  time: 0.8467 (1.5476)  data: 0.0030 (0.7111)  lr: 0.001200  max mem: 24032
2020-02-11 07:33:15,605 maskrcnn_benchmark.trainer INFO: eta: 7:56:27  iter: 23520  loss: 0.6276 (0.7533)  loss_classifier: 0.2134 (0.2650)  loss_box_reg: 0.1091 (0.1246)  loss_mask: 0.2399 (0.2746)  loss_objectness: 0.0224 (0.0375)  loss_rpn_box_reg: 0.0387 (0.0516)  time: 0.8496 (1.5470)  data: 0.0031 (0.7105)  lr: 0.001200  max mem: 24032
2020-02-11 07:33:32,369 maskrcnn_benchmark.trainer INFO: eta: 7:55:45  iter: 23540  loss: 0.5564 (0.7532)  loss_classifier: 0.1913 (0.2650)  loss_box_reg: 0.0896 (0.1246)  loss_mask: 0.2501 (0.2746)  loss_objectness: 0.0146 (0.0375)  loss_rpn_box_reg: 0.0287 (0.0515)  time: 0.8420 (1.5464)  data: 0.0030 (0.7099)  lr: 0.001200  max mem: 24032
2020-02-11 07:33:49,365 maskrcnn_benchmark.trainer INFO: eta: 7:55:03  iter: 23560  loss: 0.6456 (0.7531)  loss_classifier: 0.2070 (0.2649)  loss_box_reg: 0.1050 (0.1246)  loss_mask: 0.2418 (0.2746)  loss_objectness: 0.0180 (0.0375)  loss_rpn_box_reg: 0.0398 (0.0515)  time: 0.8491 (1.5458)  data: 0.0031 (0.7093)  lr: 0.001200  max mem: 24032
2020-02-11 07:34:06,320 maskrcnn_benchmark.trainer INFO: eta: 7:54:22  iter: 23580  loss: 0.6915 (0.7530)  loss_classifier: 0.2416 (0.2649)  loss_box_reg: 0.1209 (0.1246)  loss_mask: 0.2503 (0.2745)  loss_objectness: 0.0224 (0.0375)  loss_rpn_box_reg: 0.0401 (0.0515)  time: 0.8484 (1.5452)  data: 0.0033 (0.7087)  lr: 0.001200  max mem: 24032
2020-02-11 07:34:23,225 maskrcnn_benchmark.trainer INFO: eta: 7:53:40  iter: 23600  loss: 0.5952 (0.7529)  loss_classifier: 0.1992 (0.2648)  loss_box_reg: 0.0998 (0.1246)  loss_mask: 0.2508 (0.2745)  loss_objectness: 0.0179 (0.0375)  loss_rpn_box_reg: 0.0305 (0.0515)  time: 0.8408 (1.5446)  data: 0.0031 (0.7081)  lr: 0.001200  max mem: 24032
2020-02-11 07:34:40,093 maskrcnn_benchmark.trainer INFO: eta: 7:52:58  iter: 23620  loss: 0.6080 (0.7528)  loss_classifier: 0.1920 (0.2648)  loss_box_reg: 0.0997 (0.1245)  loss_mask: 0.2480 (0.2745)  loss_objectness: 0.0164 (0.0374)  loss_rpn_box_reg: 0.0329 (0.0515)  time: 0.8444 (1.5440)  data: 0.0030 (0.7075)  lr: 0.001200  max mem: 24032
2020-02-11 07:34:56,981 maskrcnn_benchmark.trainer INFO: eta: 7:52:16  iter: 23640  loss: 0.6102 (0.7527)  loss_classifier: 0.2086 (0.2647)  loss_box_reg: 0.1095 (0.1245)  loss_mask: 0.2425 (0.2745)  loss_objectness: 0.0178 (0.0374)  loss_rpn_box_reg: 0.0363 (0.0515)  time: 0.8441 (1.5434)  data: 0.0029 (0.7069)  lr: 0.001200  max mem: 24032
2020-02-11 07:35:13,851 maskrcnn_benchmark.trainer INFO: eta: 7:51:35  iter: 23660  loss: 0.6160 (0.7525)  loss_classifier: 0.2061 (0.2647)  loss_box_reg: 0.1017 (0.1245)  loss_mask: 0.2318 (0.2744)  loss_objectness: 0.0176 (0.0374)  loss_rpn_box_reg: 0.0428 (0.0515)  time: 0.8423 (1.5428)  data: 0.0032 (0.7063)  lr: 0.001200  max mem: 24032
2020-02-11 07:35:30,830 maskrcnn_benchmark.trainer INFO: eta: 7:50:53  iter: 23680  loss: 0.5554 (0.7524)  loss_classifier: 0.1862 (0.2646)  loss_box_reg: 0.0877 (0.1245)  loss_mask: 0.2382 (0.2744)  loss_objectness: 0.0154 (0.0374)  loss_rpn_box_reg: 0.0302 (0.0515)  time: 0.8482 (1.5422)  data: 0.0028 (0.7057)  lr: 0.001200  max mem: 24032
2020-02-11 07:35:47,561 maskrcnn_benchmark.trainer INFO: eta: 7:50:11  iter: 23700  loss: 0.6023 (0.7523)  loss_classifier: 0.1921 (0.2646)  loss_box_reg: 0.0911 (0.1245)  loss_mask: 0.2397 (0.2744)  loss_objectness: 0.0176 (0.0374)  loss_rpn_box_reg: 0.0381 (0.0515)  time: 0.8402 (1.5416)  data: 0.0029 (0.7051)  lr: 0.001200  max mem: 24032
2020-02-11 07:36:04,563 maskrcnn_benchmark.trainer INFO: eta: 7:49:30  iter: 23720  loss: 0.6444 (0.7522)  loss_classifier: 0.2231 (0.2645)  loss_box_reg: 0.1072 (0.1245)  loss_mask: 0.2492 (0.2744)  loss_objectness: 0.0193 (0.0374)  loss_rpn_box_reg: 0.0439 (0.0515)  time: 0.8501 (1.5410)  data: 0.0031 (0.7045)  lr: 0.001200  max mem: 24032
2020-02-11 07:36:21,388 maskrcnn_benchmark.trainer INFO: eta: 7:48:48  iter: 23740  loss: 0.5838 (0.7520)  loss_classifier: 0.1949 (0.2645)  loss_box_reg: 0.0982 (0.1244)  loss_mask: 0.2446 (0.2743)  loss_objectness: 0.0170 (0.0374)  loss_rpn_box_reg: 0.0300 (0.0515)  time: 0.8410 (1.5405)  data: 0.0030 (0.7039)  lr: 0.001200  max mem: 24032
2020-02-11 07:36:38,368 maskrcnn_benchmark.trainer INFO: eta: 7:48:07  iter: 23760  loss: 0.5640 (0.7519)  loss_classifier: 0.1812 (0.2644)  loss_box_reg: 0.0897 (0.1244)  loss_mask: 0.2340 (0.2743)  loss_objectness: 0.0170 (0.0373)  loss_rpn_box_reg: 0.0294 (0.0514)  time: 0.8493 (1.5399)  data: 0.0030 (0.7033)  lr: 0.001200  max mem: 24032
2020-02-11 07:36:55,296 maskrcnn_benchmark.trainer INFO: eta: 7:47:25  iter: 23780  loss: 0.5297 (0.7517)  loss_classifier: 0.1650 (0.2643)  loss_box_reg: 0.0784 (0.1244)  loss_mask: 0.2224 (0.2743)  loss_objectness: 0.0149 (0.0373)  loss_rpn_box_reg: 0.0282 (0.0514)  time: 0.8458 (1.5393)  data: 0.0029 (0.7027)  lr: 0.001200  max mem: 24032
2020-02-11 07:37:12,153 maskrcnn_benchmark.trainer INFO: eta: 7:46:44  iter: 23800  loss: 0.5674 (0.7516)  loss_classifier: 0.1735 (0.2643)  loss_box_reg: 0.0955 (0.1244)  loss_mask: 0.2390 (0.2742)  loss_objectness: 0.0126 (0.0373)  loss_rpn_box_reg: 0.0345 (0.0514)  time: 0.8431 (1.5387)  data: 0.0029 (0.7021)  lr: 0.001200  max mem: 24032
2020-02-11 07:37:28,954 maskrcnn_benchmark.trainer INFO: eta: 7:46:02  iter: 23820  loss: 0.6007 (0.7514)  loss_classifier: 0.2048 (0.2642)  loss_box_reg: 0.1013 (0.1243)  loss_mask: 0.2313 (0.2742)  loss_objectness: 0.0186 (0.0373)  loss_rpn_box_reg: 0.0265 (0.0514)  time: 0.8387 (1.5381)  data: 0.0030 (0.7016)  lr: 0.001200  max mem: 24032
2020-02-11 07:37:45,915 maskrcnn_benchmark.trainer INFO: eta: 7:45:21  iter: 23840  loss: 0.5721 (0.7513)  loss_classifier: 0.2007 (0.2642)  loss_box_reg: 0.0992 (0.1243)  loss_mask: 0.2381 (0.2742)  loss_objectness: 0.0182 (0.0373)  loss_rpn_box_reg: 0.0314 (0.0514)  time: 0.8470 (1.5375)  data: 0.0029 (0.7010)  lr: 0.001200  max mem: 24032
2020-02-11 07:38:02,757 maskrcnn_benchmark.trainer INFO: eta: 7:44:40  iter: 23860  loss: 0.6553 (0.7512)  loss_classifier: 0.2263 (0.2641)  loss_box_reg: 0.1150 (0.1243)  loss_mask: 0.2516 (0.2742)  loss_objectness: 0.0224 (0.0373)  loss_rpn_box_reg: 0.0412 (0.0514)  time: 0.8381 (1.5370)  data: 0.0031 (0.7004)  lr: 0.001200  max mem: 24032
2020-02-11 07:38:19,637 maskrcnn_benchmark.trainer INFO: eta: 7:43:59  iter: 23880  loss: 0.6290 (0.7511)  loss_classifier: 0.2120 (0.2641)  loss_box_reg: 0.1009 (0.1243)  loss_mask: 0.2408 (0.2741)  loss_objectness: 0.0207 (0.0373)  loss_rpn_box_reg: 0.0431 (0.0514)  time: 0.8468 (1.5364)  data: 0.0031 (0.6998)  lr: 0.001200  max mem: 24032
2020-02-11 07:38:36,469 maskrcnn_benchmark.trainer INFO: eta: 7:43:17  iter: 23900  loss: 0.5756 (0.7510)  loss_classifier: 0.2057 (0.2640)  loss_box_reg: 0.1033 (0.1243)  loss_mask: 0.2484 (0.2741)  loss_objectness: 0.0217 (0.0372)  loss_rpn_box_reg: 0.0385 (0.0514)  time: 0.8402 (1.5358)  data: 0.0030 (0.6992)  lr: 0.001200  max mem: 24032
2020-02-11 07:38:53,187 maskrcnn_benchmark.trainer INFO: eta: 7:42:36  iter: 23920  loss: 0.5823 (0.7509)  loss_classifier: 0.1975 (0.2640)  loss_box_reg: 0.1013 (0.1243)  loss_mask: 0.2464 (0.2741)  loss_objectness: 0.0174 (0.0372)  loss_rpn_box_reg: 0.0327 (0.0514)  time: 0.8384 (1.5352)  data: 0.0029 (0.6986)  lr: 0.001200  max mem: 24032
2020-02-11 07:39:09,999 maskrcnn_benchmark.trainer INFO: eta: 7:41:55  iter: 23940  loss: 0.6303 (0.7508)  loss_classifier: 0.2013 (0.2639)  loss_box_reg: 0.1021 (0.1242)  loss_mask: 0.2370 (0.2740)  loss_objectness: 0.0191 (0.0372)  loss_rpn_box_reg: 0.0428 (0.0514)  time: 0.8425 (1.5346)  data: 0.0032 (0.6980)  lr: 0.001200  max mem: 24032
2020-02-11 07:39:26,969 maskrcnn_benchmark.trainer INFO: eta: 7:41:14  iter: 23960  loss: 0.5826 (0.7507)  loss_classifier: 0.1776 (0.2639)  loss_box_reg: 0.0999 (0.1242)  loss_mask: 0.2476 (0.2740)  loss_objectness: 0.0153 (0.0372)  loss_rpn_box_reg: 0.0407 (0.0513)  time: 0.8495 (1.5341)  data: 0.0031 (0.6975)  lr: 0.001200  max mem: 24032
:::MLL 1581406773.257 epoch_stop: {"value": null, "metadata": {"epoch_num": 28, "file": "tools/train_mlperf.py", "lineno": 75}}
:::MLL 1581406773.258 block_stop: {"value": null, "metadata": {"first_epoch_num": 28, "file": "tools/train_mlperf.py", "lineno": 76}}
:::MLL 1581406773.258 eval_start: {"value": null, "metadata": {"epoch_num": 28, "file": "tools/train_mlperf.py", "lineno": 77}}
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
2020-02-11 07:39:34,081 maskrcnn_benchmark.data.build WARNING: When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
Done (t=3.88s)
creating index...
Done (t=3.92s)
creating index...
Done (t=3.93s)
creating index...
Done (t=3.89s)
creating index...
Done (t=3.86s)
creating index...
Done (t=3.93s)
creating index...
Done (t=4.19s)
creating index...
index created!
Done (t=3.95s)
creating index...
index created!
index created!
  0%|                                                  | 0/2532 [00:00<?, ?it/s]index created!
  0%|                                                  | 0/2532 [00:00<?, ?it/s]index created!
  0%|                                                  | 0/2532 [00:00<?, ?it/s]index created!
index created!
  0%|                                                  | 0/2532 [00:00<?, ?it/s]index created!
  0%|                                                  | 0/2532 [00:00<?, ?it/s]2020-02-11 07:39:38,446 maskrcnn_benchmark.inference INFO: Start evaluation on coco_2014_val dataset(40504 images).
100%|███████████████████████████████████████| 2532/2532 [03:45<00:00, 11.24it/s]
100%|██████████████████████████████████████▉| 2529/2532 [03:45<00:00, 12.34it/s]
100%|███████████████████████████████████████| 2532/2532 [03:46<00:00, 11.17it/s]
100%|███████████████████████████████████████| 2532/2532 [03:46<00:00, 11.16it/s]
 99%|██████████████████████████████████████▌| 2502/2532 [03:47<00:02, 11.59it/s]
 99%|██████████████████████████████████████▊| 2518/2532 [03:48<00:01, 11.69it/s]
 99%|██████████████████████████████████████▊| 2518/2532 [03:50<00:01, 11.97it/s]
100%|███████████████████████████████████████| 2532/2532 [03:51<00:00, 13.30it/s]
2020-02-11 07:43:31,350 maskrcnn_benchmark.inference INFO: Total inference time: 0:03:52.903491 (0.046001084538851 s / img per device, on 8 devices)
2020-02-11 07:43:32,373 maskrcnn_benchmark.inference INFO: Preparing results for COCO format
2020-02-11 07:43:32,373 maskrcnn_benchmark.inference INFO: Preparing bbox results
2020-02-11 07:43:33,887 maskrcnn_benchmark.inference INFO: Preparing segm results
:::MLL 1581407252.532 block_start: {"value": null, "metadata": {"first_epoch_num": 29, "epoch_count": 1, "file": "tools/train_mlperf.py", "lineno": 134}}
:::MLL 1581407252.536 epoch_start: {"value": null, "metadata": {"epoch_num": 29, "file": "tools/train_mlperf.py", "lineno": 135}}
Evaluating predictions
creating index...
GT annotations already exist!
2020-02-11 07:47:42,935 maskrcnn_benchmark.trainer INFO: eta: 7:46:33  iter: 23980  loss: 0.6046 (0.7505)  loss_classifier: 0.2009 (0.2638)  loss_box_reg: 0.1026 (0.1242)  loss_mask: 0.2440 (0.2740)  loss_objectness: 0.0185 (0.0372)  loss_rpn_box_reg: 0.0439 (0.0513)  time: 0.8460 (1.5535)  data: 0.0030 (0.7169)  lr: 0.001200  max mem: 24032
2020-02-11 07:47:59,885 maskrcnn_benchmark.trainer INFO: eta: 7:45:51  iter: 24000  loss: 0.5720 (0.7504)  loss_classifier: 0.1806 (0.2638)  loss_box_reg: 0.0897 (0.1242)  loss_mask: 0.2362 (0.2740)  loss_objectness: 0.0161 (0.0372)  loss_rpn_box_reg: 0.0336 (0.0513)  time: 0.8431 (1.5529)  data: 0.0029 (0.7163)  lr: 0.001200  max mem: 24032
2020-02-11 07:48:16,771 maskrcnn_benchmark.trainer INFO: eta: 7:45:09  iter: 24020  loss: 0.6113 (0.7503)  loss_classifier: 0.2181 (0.2637)  loss_box_reg: 0.1039 (0.1242)  loss_mask: 0.2539 (0.2740)  loss_objectness: 0.0203 (0.0372)  loss_rpn_box_reg: 0.0416 (0.0513)  time: 0.8422 (1.5523)  data: 0.0028 (0.7157)  lr: 0.001200  max mem: 24032
Loading and preparing results...
resFile is ./inference/coco_2014_val/bbox.json
2020-02-11 07:48:33,660 maskrcnn_benchmark.trainer INFO: eta: 7:44:28  iter: 24040  loss: 0.5974 (0.7502)  loss_classifier: 0.1937 (0.2637)  loss_box_reg: 0.0971 (0.1242)  loss_mask: 0.2447 (0.2739)  loss_objectness: 0.0189 (0.0371)  loss_rpn_box_reg: 0.0389 (0.0513)  time: 0.8437 (1.5517)  data: 0.0029 (0.7151)  lr: 0.001200  max mem: 24032
DONE (t=6.74s)
Running per image evaluation...
Evaluate annotation type *bbox*
2020-02-11 07:48:50,553 maskrcnn_benchmark.trainer INFO: eta: 7:43:46  iter: 24060  loss: 0.6033 (0.7501)  loss_classifier: 0.1980 (0.2636)  loss_box_reg: 0.1005 (0.1241)  loss_mask: 0.2339 (0.2739)  loss_objectness: 0.0182 (0.0371)  loss_rpn_box_reg: 0.0386 (0.0513)  time: 0.8493 (1.5511)  data: 0.0029 (0.7145)  lr: 0.001200  max mem: 24032
DONE (t=24.78s).
Accumulating evaluation results...
DONE (t=0.00s).
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.36187
 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=100 ] = 0.57351
 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=100 ] = 0.39277
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.19035
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.37736
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.46671
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=  1 ] = 0.30347
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets= 10 ] = 0.47344
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.49469
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.29785
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.52061
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.63180
2020-02-11 07:49:07,578 maskrcnn_benchmark.trainer INFO: eta: 7:43:05  iter: 24080  loss: 0.5720 (0.7500)  loss_classifier: 0.2001 (0.2636)  loss_box_reg: 0.1020 (0.1241)  loss_mask: 0.2425 (0.2739)  loss_objectness: 0.0183 (0.0371)  loss_rpn_box_reg: 0.0298 (0.0513)  time: 0.8518 (1.5505)  data: 0.0028 (0.7139)  lr: 0.001200  max mem: 24032
2020-02-11 07:49:24,439 maskrcnn_benchmark.trainer INFO: eta: 7:42:23  iter: 24100  loss: 0.6379 (0.7499)  loss_classifier: 0.2065 (0.2635)  loss_box_reg: 0.1091 (0.1241)  loss_mask: 0.2444 (0.2739)  loss_objectness: 0.0163 (0.0371)  loss_rpn_box_reg: 0.0399 (0.0513)  time: 0.8454 (1.5499)  data: 0.0030 (0.7133)  lr: 0.001200  max mem: 24032
2020-02-11 07:49:41,291 maskrcnn_benchmark.trainer INFO: eta: 7:41:42  iter: 24120  loss: 0.5475 (0.7497)  loss_classifier: 0.1970 (0.2635)  loss_box_reg: 0.0901 (0.1241)  loss_mask: 0.2311 (0.2738)  loss_objectness: 0.0141 (0.0371)  loss_rpn_box_reg: 0.0331 (0.0513)  time: 0.8416 (1.5493)  data: 0.0029 (0.7127)  lr: 0.001200  max mem: 24032
Loading and preparing results...
resFile is ./inference/coco_2014_val/segm.json
2020-02-11 07:49:58,208 maskrcnn_benchmark.trainer INFO: eta: 7:41:00  iter: 24140  loss: 0.5862 (0.7496)  loss_classifier: 0.1974 (0.2634)  loss_box_reg: 0.1047 (0.1241)  loss_mask: 0.2400 (0.2738)  loss_objectness: 0.0147 (0.0371)  loss_rpn_box_reg: 0.0403 (0.0513)  time: 0.8488 (1.5488)  data: 0.0029 (0.7121)  lr: 0.001200  max mem: 24032
DONE (t=14.75s)
Running per image evaluation...
Evaluate annotation type *segm*
2020-02-11 07:50:15,077 maskrcnn_benchmark.trainer INFO: eta: 7:40:19  iter: 24160  loss: 0.5915 (0.7495)  loss_classifier: 0.1996 (0.2633)  loss_box_reg: 0.1029 (0.1240)  loss_mask: 0.2361 (0.2738)  loss_objectness: 0.0154 (0.0370)  loss_rpn_box_reg: 0.0265 (0.0513)  time: 0.8413 (1.5482)  data: 0.0029 (0.7116)  lr: 0.001200  max mem: 24032
2020-02-11 07:50:31,935 maskrcnn_benchmark.trainer INFO: eta: 7:39:38  iter: 24180  loss: 0.6252 (0.7494)  loss_classifier: 0.2023 (0.2633)  loss_box_reg: 0.1082 (0.1240)  loss_mask: 0.2417 (0.2737)  loss_objectness: 0.0229 (0.0370)  loss_rpn_box_reg: 0.0371 (0.0513)  time: 0.8467 (1.5476)  data: 0.0028 (0.7110)  lr: 0.001200  max mem: 24032
DONE (t=31.39s).
Accumulating evaluation results...
DONE (t=0.00s).
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.32764
 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=100 ] = 0.54148
 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=100 ] = 0.34584
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.13573
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.34019
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.48095
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=  1 ] = 0.28531
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets= 10 ] = 0.43365
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.45124
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.25320
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.48019
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.60382
2020-02-11 07:50:39,290 maskrcnn_benchmark.trainer INFO: bbox mAP: 0.3618726434448442, segm mAP: 0.3276422466881162
:::MLL 1581407439.306 eval_accuracy: {"value": {"accuracy": {"BBOX": 0.3618726434448442, "SEGM": 0.3276422466881162}}, "metadata": {"epoch_num": 28, "file": "tools/train_mlperf.py", "lineno": 99}}
:::MLL 1581407439.307 eval_stop: {"value": null, "metadata": {"epoch_num": 28, "file": "tools/train_mlperf.py", "lineno": 100}}
2020-02-11 07:50:51,132 maskrcnn_benchmark.trainer INFO: eta: 7:38:58  iter: 24200  loss: 0.5561 (0.7492)  loss_classifier: 0.1818 (0.2632)  loss_box_reg: 0.0906 (0.1240)  loss_mask: 0.2457 (0.2737)  loss_objectness: 0.0151 (0.0370)  loss_rpn_box_reg: 0.0403 (0.0513)  time: 0.8368 (1.5471)  data: 0.0030 (0.7104)  lr: 0.001200  max mem: 24032
2020-02-11 07:51:08,128 maskrcnn_benchmark.trainer INFO: eta: 7:38:17  iter: 24220  loss: 0.6454 (0.7491)  loss_classifier: 0.2216 (0.2632)  loss_box_reg: 0.1138 (0.1240)  loss_mask: 0.2410 (0.2737)  loss_objectness: 0.0222 (0.0370)  loss_rpn_box_reg: 0.0350 (0.0512)  time: 0.8478 (1.5465)  data: 0.0030 (0.7098)  lr: 0.001200  max mem: 24032
2020-02-11 07:51:25,120 maskrcnn_benchmark.trainer INFO: eta: 7:37:36  iter: 24240  loss: 0.5630 (0.7490)  loss_classifier: 0.1781 (0.2631)  loss_box_reg: 0.0871 (0.1240)  loss_mask: 0.2500 (0.2737)  loss_objectness: 0.0178 (0.0370)  loss_rpn_box_reg: 0.0308 (0.0512)  time: 0.8500 (1.5460)  data: 0.0029 (0.7092)  lr: 0.001200  max mem: 24032
2020-02-11 07:51:41,983 maskrcnn_benchmark.trainer INFO: eta: 7:36:55  iter: 24260  loss: 0.6382 (0.7489)  loss_classifier: 0.2131 (0.2631)  loss_box_reg: 0.1038 (0.1240)  loss_mask: 0.2399 (0.2737)  loss_objectness: 0.0205 (0.0370)  loss_rpn_box_reg: 0.0399 (0.0512)  time: 0.8425 (1.5454)  data: 0.0030 (0.7086)  lr: 0.001200  max mem: 24032
2020-02-11 07:51:58,789 maskrcnn_benchmark.trainer INFO: eta: 7:36:13  iter: 24280  loss: 0.5989 (0.7488)  loss_classifier: 0.1926 (0.2631)  loss_box_reg: 0.1007 (0.1239)  loss_mask: 0.2429 (0.2736)  loss_objectness: 0.0161 (0.0370)  loss_rpn_box_reg: 0.0395 (0.0512)  time: 0.8398 (1.5448)  data: 0.0031 (0.7081)  lr: 0.001200  max mem: 24032
2020-02-11 07:52:15,789 maskrcnn_benchmark.trainer INFO: eta: 7:35:32  iter: 24300  loss: 0.5705 (0.7487)  loss_classifier: 0.1734 (0.2630)  loss_box_reg: 0.0867 (0.1239)  loss_mask: 0.2382 (0.2736)  loss_objectness: 0.0165 (0.0369)  loss_rpn_box_reg: 0.0322 (0.0512)  time: 0.8524 (1.5442)  data: 0.0031 (0.7075)  lr: 0.001200  max mem: 24032
2020-02-11 07:52:32,794 maskrcnn_benchmark.trainer INFO: eta: 7:34:51  iter: 24320  loss: 0.6057 (0.7485)  loss_classifier: 0.1928 (0.2629)  loss_box_reg: 0.0964 (0.1239)  loss_mask: 0.2441 (0.2736)  loss_objectness: 0.0149 (0.0369)  loss_rpn_box_reg: 0.0327 (0.0512)  time: 0.8478 (1.5437)  data: 0.0031 (0.7069)  lr: 0.001200  max mem: 24032
2020-02-11 07:52:49,670 maskrcnn_benchmark.trainer INFO: eta: 7:34:10  iter: 24340  loss: 0.6003 (0.7484)  loss_classifier: 0.2085 (0.2629)  loss_box_reg: 0.0975 (0.1239)  loss_mask: 0.2391 (0.2735)  loss_objectness: 0.0190 (0.0369)  loss_rpn_box_reg: 0.0349 (0.0512)  time: 0.8395 (1.5431)  data: 0.0031 (0.7063)  lr: 0.001200  max mem: 24032
2020-02-11 07:53:06,663 maskrcnn_benchmark.trainer INFO: eta: 7:33:29  iter: 24360  loss: 0.5763 (0.7483)  loss_classifier: 0.1817 (0.2628)  loss_box_reg: 0.1042 (0.1239)  loss_mask: 0.2346 (0.2735)  loss_objectness: 0.0172 (0.0369)  loss_rpn_box_reg: 0.0345 (0.0512)  time: 0.8501 (1.5425)  data: 0.0030 (0.7057)  lr: 0.001200  max mem: 24032
2020-02-11 07:53:23,720 maskrcnn_benchmark.trainer INFO: eta: 7:32:49  iter: 24380  loss: 0.5874 (0.7482)  loss_classifier: 0.2009 (0.2628)  loss_box_reg: 0.0992 (0.1238)  loss_mask: 0.2434 (0.2735)  loss_objectness: 0.0166 (0.0369)  loss_rpn_box_reg: 0.0288 (0.0512)  time: 0.8486 (1.5419)  data: 0.0030 (0.7052)  lr: 0.001200  max mem: 24032
2020-02-11 07:53:40,619 maskrcnn_benchmark.trainer INFO: eta: 7:32:08  iter: 24400  loss: 0.5855 (0.7481)  loss_classifier: 0.1818 (0.2627)  loss_box_reg: 0.1004 (0.1238)  loss_mask: 0.2532 (0.2735)  loss_objectness: 0.0178 (0.0369)  loss_rpn_box_reg: 0.0507 (0.0512)  time: 0.8460 (1.5414)  data: 0.0031 (0.7046)  lr: 0.001200  max mem: 24032
2020-02-11 07:53:57,624 maskrcnn_benchmark.trainer INFO: eta: 7:31:27  iter: 24420  loss: 0.4970 (0.7479)  loss_classifier: 0.1612 (0.2627)  loss_box_reg: 0.0885 (0.1238)  loss_mask: 0.2119 (0.2734)  loss_objectness: 0.0177 (0.0369)  loss_rpn_box_reg: 0.0273 (0.0511)  time: 0.8502 (1.5408)  data: 0.0029 (0.7040)  lr: 0.001200  max mem: 24032
2020-02-11 07:54:14,508 maskrcnn_benchmark.trainer INFO: eta: 7:30:46  iter: 24440  loss: 0.6405 (0.7478)  loss_classifier: 0.2130 (0.2626)  loss_box_reg: 0.1164 (0.1238)  loss_mask: 0.2473 (0.2734)  loss_objectness: 0.0180 (0.0368)  loss_rpn_box_reg: 0.0421 (0.0511)  time: 0.8435 (1.5402)  data: 0.0030 (0.7034)  lr: 0.001200  max mem: 24032
2020-02-11 07:54:31,345 maskrcnn_benchmark.trainer INFO: eta: 7:30:05  iter: 24460  loss: 0.6082 (0.7477)  loss_classifier: 0.2076 (0.2626)  loss_box_reg: 0.1012 (0.1238)  loss_mask: 0.2439 (0.2734)  loss_objectness: 0.0203 (0.0368)  loss_rpn_box_reg: 0.0373 (0.0511)  time: 0.8412 (1.5397)  data: 0.0031 (0.7029)  lr: 0.001200  max mem: 24032
2020-02-11 07:54:48,203 maskrcnn_benchmark.trainer INFO: eta: 7:29:25  iter: 24480  loss: 0.5766 (0.7476)  loss_classifier: 0.1811 (0.2625)  loss_box_reg: 0.0940 (0.1238)  loss_mask: 0.2389 (0.2734)  loss_objectness: 0.0158 (0.0368)  loss_rpn_box_reg: 0.0308 (0.0511)  time: 0.8405 (1.5391)  data: 0.0031 (0.7023)  lr: 0.001200  max mem: 24032
2020-02-11 07:55:05,237 maskrcnn_benchmark.trainer INFO: eta: 7:28:44  iter: 24500  loss: 0.6279 (0.7475)  loss_classifier: 0.2111 (0.2625)  loss_box_reg: 0.1158 (0.1238)  loss_mask: 0.2446 (0.2734)  loss_objectness: 0.0218 (0.0368)  loss_rpn_box_reg: 0.0360 (0.0511)  time: 0.8523 (1.5385)  data: 0.0031 (0.7017)  lr: 0.001200  max mem: 24032
2020-02-11 07:55:22,092 maskrcnn_benchmark.trainer INFO: eta: 7:28:03  iter: 24520  loss: 0.6055 (0.7474)  loss_classifier: 0.1954 (0.2624)  loss_box_reg: 0.1020 (0.1237)  loss_mask: 0.2406 (0.2733)  loss_objectness: 0.0197 (0.0368)  loss_rpn_box_reg: 0.0389 (0.0511)  time: 0.8396 (1.5380)  data: 0.0031 (0.7012)  lr: 0.001200  max mem: 24032
2020-02-11 07:55:38,979 maskrcnn_benchmark.trainer INFO: eta: 7:27:23  iter: 24540  loss: 0.6532 (0.7473)  loss_classifier: 0.2206 (0.2624)  loss_box_reg: 0.1188 (0.1237)  loss_mask: 0.2494 (0.2733)  loss_objectness: 0.0189 (0.0368)  loss_rpn_box_reg: 0.0453 (0.0511)  time: 0.8444 (1.5374)  data: 0.0030 (0.7006)  lr: 0.001200  max mem: 24032
2020-02-11 07:55:55,885 maskrcnn_benchmark.trainer INFO: eta: 7:26:42  iter: 24560  loss: 0.5993 (0.7472)  loss_classifier: 0.1858 (0.2623)  loss_box_reg: 0.1023 (0.1237)  loss_mask: 0.2443 (0.2733)  loss_objectness: 0.0166 (0.0368)  loss_rpn_box_reg: 0.0420 (0.0511)  time: 0.8421 (1.5368)  data: 0.0029 (0.7000)  lr: 0.001200  max mem: 24032
2020-02-11 07:56:12,660 maskrcnn_benchmark.trainer INFO: eta: 7:26:01  iter: 24580  loss: 0.5679 (0.7470)  loss_classifier: 0.1799 (0.2623)  loss_box_reg: 0.0974 (0.1237)  loss_mask: 0.2311 (0.2733)  loss_objectness: 0.0142 (0.0367)  loss_rpn_box_reg: 0.0307 (0.0511)  time: 0.8368 (1.5363)  data: 0.0029 (0.6995)  lr: 0.001200  max mem: 24032
2020-02-11 07:56:29,698 maskrcnn_benchmark.trainer INFO: eta: 7:25:21  iter: 24600  loss: 0.5773 (0.7469)  loss_classifier: 0.1907 (0.2622)  loss_box_reg: 0.0948 (0.1237)  loss_mask: 0.2365 (0.2732)  loss_objectness: 0.0157 (0.0367)  loss_rpn_box_reg: 0.0296 (0.0511)  time: 0.8481 (1.5357)  data: 0.0030 (0.6989)  lr: 0.001200  max mem: 24032
2020-02-11 07:56:46,440 maskrcnn_benchmark.trainer INFO: eta: 7:24:40  iter: 24620  loss: 0.6375 (0.7468)  loss_classifier: 0.1998 (0.2622)  loss_box_reg: 0.1025 (0.1237)  loss_mask: 0.2488 (0.2732)  loss_objectness: 0.0157 (0.0367)  loss_rpn_box_reg: 0.0339 (0.0511)  time: 0.8375 (1.5351)  data: 0.0031 (0.6983)  lr: 0.001200  max mem: 24032
2020-02-11 07:57:03,330 maskrcnn_benchmark.trainer INFO: eta: 7:24:00  iter: 24640  loss: 0.5518 (0.7467)  loss_classifier: 0.1863 (0.2621)  loss_box_reg: 0.0938 (0.1236)  loss_mask: 0.2379 (0.2732)  loss_objectness: 0.0171 (0.0367)  loss_rpn_box_reg: 0.0388 (0.0510)  time: 0.8429 (1.5346)  data: 0.0031 (0.6978)  lr: 0.001200  max mem: 24032
2020-02-11 07:57:20,288 maskrcnn_benchmark.trainer INFO: eta: 7:23:20  iter: 24660  loss: 0.5540 (0.7466)  loss_classifier: 0.1860 (0.2621)  loss_box_reg: 0.0948 (0.1236)  loss_mask: 0.2515 (0.2732)  loss_objectness: 0.0170 (0.0367)  loss_rpn_box_reg: 0.0325 (0.0510)  time: 0.8469 (1.5340)  data: 0.0029 (0.6972)  lr: 0.001200  max mem: 24032
2020-02-11 07:57:37,226 maskrcnn_benchmark.trainer INFO: eta: 7:22:39  iter: 24680  loss: 0.6004 (0.7465)  loss_classifier: 0.1939 (0.2620)  loss_box_reg: 0.1033 (0.1236)  loss_mask: 0.2468 (0.2731)  loss_objectness: 0.0188 (0.0367)  loss_rpn_box_reg: 0.0391 (0.0510)  time: 0.8495 (1.5335)  data: 0.0030 (0.6966)  lr: 0.001200  max mem: 24032
2020-02-11 07:57:54,164 maskrcnn_benchmark.trainer INFO: eta: 7:21:59  iter: 24700  loss: 0.6168 (0.7464)  loss_classifier: 0.2067 (0.2620)  loss_box_reg: 0.1087 (0.1236)  loss_mask: 0.2387 (0.2731)  loss_objectness: 0.0178 (0.0367)  loss_rpn_box_reg: 0.0372 (0.0510)  time: 0.8470 (1.5329)  data: 0.0029 (0.6961)  lr: 0.001200  max mem: 24032
2020-02-11 07:58:11,053 maskrcnn_benchmark.trainer INFO: eta: 7:21:19  iter: 24720  loss: 0.6069 (0.7462)  loss_classifier: 0.1980 (0.2619)  loss_box_reg: 0.0959 (0.1236)  loss_mask: 0.2358 (0.2731)  loss_objectness: 0.0188 (0.0366)  loss_rpn_box_reg: 0.0383 (0.0510)  time: 0.8457 (1.5324)  data: 0.0030 (0.6955)  lr: 0.001200  max mem: 24032
2020-02-11 07:58:27,969 maskrcnn_benchmark.trainer INFO: eta: 7:20:38  iter: 24740  loss: 0.6729 (0.7462)  loss_classifier: 0.2233 (0.2619)  loss_box_reg: 0.1199 (0.1236)  loss_mask: 0.2594 (0.2731)  loss_objectness: 0.0188 (0.0366)  loss_rpn_box_reg: 0.0384 (0.0510)  time: 0.8418 (1.5318)  data: 0.0031 (0.6949)  lr: 0.001200  max mem: 24032
2020-02-11 07:58:44,768 maskrcnn_benchmark.trainer INFO: eta: 7:19:58  iter: 24760  loss: 0.5752 (0.7461)  loss_classifier: 0.1832 (0.2618)  loss_box_reg: 0.0940 (0.1235)  loss_mask: 0.2358 (0.2731)  loss_objectness: 0.0178 (0.0366)  loss_rpn_box_reg: 0.0331 (0.0510)  time: 0.8434 (1.5312)  data: 0.0030 (0.6944)  lr: 0.001200  max mem: 24032
2020-02-11 07:59:01,761 maskrcnn_benchmark.trainer INFO: eta: 7:19:18  iter: 24780  loss: 0.5748 (0.7459)  loss_classifier: 0.1754 (0.2618)  loss_box_reg: 0.0954 (0.1235)  loss_mask: 0.2423 (0.2730)  loss_objectness: 0.0182 (0.0366)  loss_rpn_box_reg: 0.0356 (0.0510)  time: 0.8487 (1.5307)  data: 0.0031 (0.6938)  lr: 0.001200  max mem: 24032
2020-02-11 07:59:18,728 maskrcnn_benchmark.trainer INFO: eta: 7:18:38  iter: 24800  loss: 0.6020 (0.7458)  loss_classifier: 0.1931 (0.2617)  loss_box_reg: 0.1011 (0.1235)  loss_mask: 0.2409 (0.2730)  loss_objectness: 0.0168 (0.0366)  loss_rpn_box_reg: 0.0338 (0.0510)  time: 0.8398 (1.5301)  data: 0.0030 (0.6933)  lr: 0.001200  max mem: 24032
2020-02-11 07:59:35,537 maskrcnn_benchmark.trainer INFO: eta: 7:17:58  iter: 24820  loss: 0.5457 (0.7457)  loss_classifier: 0.1777 (0.2616)  loss_box_reg: 0.0867 (0.1235)  loss_mask: 0.2355 (0.2730)  loss_objectness: 0.0175 (0.0366)  loss_rpn_box_reg: 0.0279 (0.0510)  time: 0.8380 (1.5296)  data: 0.0029 (0.6927)  lr: 0.001200  max mem: 24032
:::MLL 1581407978.562 epoch_stop: {"value": null, "metadata": {"epoch_num": 29, "file": "tools/train_mlperf.py", "lineno": 75}}
:::MLL 1581407978.563 block_stop: {"value": null, "metadata": {"first_epoch_num": 29, "file": "tools/train_mlperf.py", "lineno": 76}}
:::MLL 1581407978.563 eval_start: {"value": null, "metadata": {"epoch_num": 29, "file": "tools/train_mlperf.py", "lineno": 77}}
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
2020-02-11 07:59:39,464 maskrcnn_benchmark.data.build WARNING: When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
Done (t=3.89s)
creating index...
Done (t=3.97s)
creating index...
Done (t=3.92s)
creating index...
Done (t=3.89s)
creating index...
Done (t=3.88s)
creating index...
Done (t=3.94s)
creating index...
Done (t=3.86s)
creating index...
Done (t=3.89s)
creating index...
index created!
  0%|                                                  | 0/2532 [00:00<?, ?it/s]index created!
index created!
index created!
index created!
index created!
index created!
  0%|                                                  | 0/2532 [00:00<?, ?it/s]index created!
  0%|                                                  | 0/2532 [00:00<?, ?it/s]2020-02-11 07:59:43,780 maskrcnn_benchmark.inference INFO: Start evaluation on coco_2014_val dataset(40504 images).
100%|███████████████████████████████████████| 2532/2532 [03:43<00:00, 11.35it/s]
100%|███████████████████████████████████████| 2532/2532 [03:45<00:00, 11.25it/s]
 99%|██████████████████████████████████████▌| 2500/2532 [03:45<00:02, 11.03it/s]
100%|██████████████████████████████████████▉| 2530/2532 [03:45<00:00, 12.09it/s]
 99%|██████████████████████████████████████▋| 2508/2532 [03:46<00:02, 10.90it/s]
 98%|██████████████████████████████████████▎| 2485/2532 [03:47<00:04, 11.24it/s]
 99%|██████████████████████████████████████▋| 2515/2532 [03:49<00:01, 11.81it/s]
100%|███████████████████████████████████████| 2532/2532 [03:52<00:00, 10.90it/s]
2020-02-11 08:03:36,014 maskrcnn_benchmark.inference INFO: Total inference time: 0:03:52.234379 (0.04586892732631164 s / img per device, on 8 devices)
2020-02-11 08:03:37,032 maskrcnn_benchmark.inference INFO: Preparing results for COCO format
2020-02-11 08:03:37,032 maskrcnn_benchmark.inference INFO: Preparing bbox results
2020-02-11 08:03:38,586 maskrcnn_benchmark.inference INFO: Preparing segm results
:::MLL 1581408450.701 block_start: {"value": null, "metadata": {"first_epoch_num": 30, "epoch_count": 1, "file": "tools/train_mlperf.py", "lineno": 134}}
:::MLL 1581408450.704 epoch_start: {"value": null, "metadata": {"epoch_num": 30, "file": "tools/train_mlperf.py", "lineno": 135}}
Evaluating predictions
creating index...
GT annotations already exist!
2020-02-11 08:07:44,331 maskrcnn_benchmark.trainer INFO: eta: 7:22:44  iter: 24840  loss: 0.5938 (0.7456)  loss_classifier: 0.1949 (0.2616)  loss_box_reg: 0.1104 (0.1235)  loss_mask: 0.2466 (0.2730)  loss_objectness: 0.0182 (0.0366)  loss_rpn_box_reg: 0.0339 (0.0510)  time: 0.8468 (1.5480)  data: 0.0032 (0.7112)  lr: 0.001200  max mem: 24032
2020-02-11 08:08:01,222 maskrcnn_benchmark.trainer INFO: eta: 7:22:03  iter: 24860  loss: 0.5861 (0.7454)  loss_classifier: 0.1802 (0.2615)  loss_box_reg: 0.0862 (0.1234)  loss_mask: 0.2397 (0.2729)  loss_objectness: 0.0152 (0.0365)  loss_rpn_box_reg: 0.0332 (0.0510)  time: 0.8449 (1.5475)  data: 0.0029 (0.7106)  lr: 0.001200  max mem: 24032
2020-02-11 08:08:18,145 maskrcnn_benchmark.trainer INFO: eta: 7:21:23  iter: 24880  loss: 0.6352 (0.7453)  loss_classifier: 0.2013 (0.2615)  loss_box_reg: 0.1045 (0.1234)  loss_mask: 0.2473 (0.2729)  loss_objectness: 0.0158 (0.0365)  loss_rpn_box_reg: 0.0370 (0.0509)  time: 0.8454 (1.5469)  data: 0.0029 (0.7100)  lr: 0.001200  max mem: 24032
Loading and preparing results...
resFile is ./inference/coco_2014_val/bbox.json
DONE (t=6.08s)
Running per image evaluation...
Evaluate annotation type *bbox*
2020-02-11 08:08:34,987 maskrcnn_benchmark.trainer INFO: eta: 7:20:42  iter: 24900  loss: 0.5782 (0.7452)  loss_classifier: 0.1918 (0.2615)  loss_box_reg: 0.0927 (0.1234)  loss_mask: 0.2502 (0.2729)  loss_objectness: 0.0197 (0.0365)  loss_rpn_box_reg: 0.0388 (0.0509)  time: 0.8412 (1.5463)  data: 0.0029 (0.7095)  lr: 0.001200  max mem: 24032
2020-02-11 08:08:52,132 maskrcnn_benchmark.trainer INFO: eta: 7:20:02  iter: 24920  loss: 0.6034 (0.7451)  loss_classifier: 0.1954 (0.2614)  loss_box_reg: 0.1024 (0.1234)  loss_mask: 0.2479 (0.2729)  loss_objectness: 0.0167 (0.0365)  loss_rpn_box_reg: 0.0418 (0.0509)  time: 0.8472 (1.5458)  data: 0.0029 (0.7089)  lr: 0.001200  max mem: 24032
DONE (t=24.33s).
Accumulating evaluation results...
DONE (t=0.00s).
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.36160
 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=100 ] = 0.57258
 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=100 ] = 0.39339
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.18980
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.37764
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.46631
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=  1 ] = 0.30298
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets= 10 ] = 0.47198
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.49290
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.29518
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.51886
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.62941
2020-02-11 08:09:09,074 maskrcnn_benchmark.trainer INFO: eta: 7:19:21  iter: 24940  loss: 0.6297 (0.7450)  loss_classifier: 0.2123 (0.2614)  loss_box_reg: 0.1101 (0.1234)  loss_mask: 0.2557 (0.2729)  loss_objectness: 0.0225 (0.0365)  loss_rpn_box_reg: 0.0399 (0.0509)  time: 0.8419 (1.5452)  data: 0.0029 (0.7083)  lr: 0.001200  max mem: 24032
2020-02-11 08:09:25,938 maskrcnn_benchmark.trainer INFO: eta: 7:18:41  iter: 24960  loss: 0.5555 (0.7449)  loss_classifier: 0.1850 (0.2613)  loss_box_reg: 0.0902 (0.1234)  loss_mask: 0.2304 (0.2728)  loss_objectness: 0.0165 (0.0365)  loss_rpn_box_reg: 0.0363 (0.0509)  time: 0.8438 (1.5447)  data: 0.0029 (0.7078)  lr: 0.001200  max mem: 24032
Loading and preparing results...
resFile is ./inference/coco_2014_val/segm.json
2020-02-11 08:09:42,809 maskrcnn_benchmark.trainer INFO: eta: 7:18:00  iter: 24980  loss: 0.6126 (0.7448)  loss_classifier: 0.1874 (0.2613)  loss_box_reg: 0.0980 (0.1234)  loss_mask: 0.2385 (0.2728)  loss_objectness: 0.0179 (0.0365)  loss_rpn_box_reg: 0.0367 (0.0509)  time: 0.8397 (1.5441)  data: 0.0030 (0.7072)  lr: 0.001200  max mem: 24032
DONE (t=14.24s)
Running per image evaluation...
Evaluate annotation type *segm*
2020-02-11 08:09:59,736 maskrcnn_benchmark.trainer INFO: eta: 7:17:20  iter: 25000  loss: 0.5581 (0.7447)  loss_classifier: 0.1901 (0.2612)  loss_box_reg: 0.0889 (0.1233)  loss_mask: 0.2346 (0.2728)  loss_objectness: 0.0202 (0.0365)  loss_rpn_box_reg: 0.0355 (0.0509)  time: 0.8441 (1.5435)  data: 0.0028 (0.7066)  lr: 0.001200  max mem: 24032
2020-02-11 08:10:16,718 maskrcnn_benchmark.trainer INFO: eta: 7:16:39  iter: 25020  loss: 0.5144 (0.7445)  loss_classifier: 0.1742 (0.2611)  loss_box_reg: 0.0855 (0.1233)  loss_mask: 0.2287 (0.2727)  loss_objectness: 0.0197 (0.0364)  loss_rpn_box_reg: 0.0307 (0.0509)  time: 0.8511 (1.5430)  data: 0.0029 (0.7061)  lr: 0.001200  max mem: 24032
DONE (t=31.10s).
Accumulating evaluation results...
DONE (t=0.00s).
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.32739
 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=100 ] = 0.54100
 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=100 ] = 0.34606
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.13527
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.33990
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.48059
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=  1 ] = 0.28472
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets= 10 ] = 0.43242
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.44966
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.25045
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.47845
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.60117
2020-02-11 08:10:30,670 maskrcnn_benchmark.trainer INFO: bbox mAP: 0.36160083041070107, segm mAP: 0.32739380577226573
:::MLL 1581408630.684 eval_accuracy: {"value": {"accuracy": {"BBOX": 0.36160083041070107, "SEGM": 0.32739380577226573}}, "metadata": {"epoch_num": 29, "file": "tools/train_mlperf.py", "lineno": 99}}
:::MLL 1581408630.685 eval_stop: {"value": null, "metadata": {"epoch_num": 29, "file": "tools/train_mlperf.py", "lineno": 100}}
2020-02-11 08:10:35,822 maskrcnn_benchmark.trainer INFO: eta: 7:16:01  iter: 25040  loss: 0.5800 (0.7444)  loss_classifier: 0.2061 (0.2611)  loss_box_reg: 0.0918 (0.1233)  loss_mask: 0.2434 (0.2727)  loss_objectness: 0.0153 (0.0364)  loss_rpn_box_reg: 0.0477 (0.0509)  time: 0.8422 (1.5425)  data: 0.0030 (0.7055)  lr: 0.001200  max mem: 24032
2020-02-11 08:10:52,835 maskrcnn_benchmark.trainer INFO: eta: 7:15:20  iter: 25060  loss: 0.5791 (0.7443)  loss_classifier: 0.1838 (0.2610)  loss_box_reg: 0.0938 (0.1233)  loss_mask: 0.2391 (0.2727)  loss_objectness: 0.0178 (0.0364)  loss_rpn_box_reg: 0.0288 (0.0509)  time: 0.8517 (1.5420)  data: 0.0029 (0.7050)  lr: 0.001200  max mem: 24032
2020-02-11 08:11:09,781 maskrcnn_benchmark.trainer INFO: eta: 7:14:40  iter: 25080  loss: 0.5818 (0.7442)  loss_classifier: 0.1758 (0.2610)  loss_box_reg: 0.0980 (0.1233)  loss_mask: 0.2437 (0.2727)  loss_objectness: 0.0158 (0.0364)  loss_rpn_box_reg: 0.0352 (0.0509)  time: 0.8450 (1.5414)  data: 0.0028 (0.7044)  lr: 0.001200  max mem: 24032
2020-02-11 08:11:26,718 maskrcnn_benchmark.trainer INFO: eta: 7:14:00  iter: 25100  loss: 0.6339 (0.7441)  loss_classifier: 0.2053 (0.2609)  loss_box_reg: 0.1052 (0.1232)  loss_mask: 0.2388 (0.2726)  loss_objectness: 0.0195 (0.0364)  loss_rpn_box_reg: 0.0417 (0.0508)  time: 0.8426 (1.5409)  data: 0.0028 (0.7038)  lr: 0.001200  max mem: 24032
2020-02-11 08:11:43,653 maskrcnn_benchmark.trainer INFO: eta: 7:13:20  iter: 25120  loss: 0.5791 (0.7440)  loss_classifier: 0.1793 (0.2609)  loss_box_reg: 0.0977 (0.1232)  loss_mask: 0.2470 (0.2726)  loss_objectness: 0.0181 (0.0364)  loss_rpn_box_reg: 0.0306 (0.0508)  time: 0.8482 (1.5403)  data: 0.0029 (0.7033)  lr: 0.001200  max mem: 24032
2020-02-11 08:12:00,510 maskrcnn_benchmark.trainer INFO: eta: 7:12:40  iter: 25140  loss: 0.6194 (0.7439)  loss_classifier: 0.1894 (0.2608)  loss_box_reg: 0.1103 (0.1232)  loss_mask: 0.2570 (0.2726)  loss_objectness: 0.0192 (0.0364)  loss_rpn_box_reg: 0.0360 (0.0508)  time: 0.8418 (1.5398)  data: 0.0031 (0.7027)  lr: 0.001200  max mem: 24032
2020-02-11 08:12:17,348 maskrcnn_benchmark.trainer INFO: eta: 7:12:00  iter: 25160  loss: 0.6116 (0.7438)  loss_classifier: 0.1905 (0.2608)  loss_box_reg: 0.1106 (0.1232)  loss_mask: 0.2398 (0.2726)  loss_objectness: 0.0171 (0.0363)  loss_rpn_box_reg: 0.0425 (0.0508)  time: 0.8457 (1.5392)  data: 0.0031 (0.7022)  lr: 0.001200  max mem: 24032
2020-02-11 08:12:34,396 maskrcnn_benchmark.trainer INFO: eta: 7:11:20  iter: 25180  loss: 0.5386 (0.7436)  loss_classifier: 0.1889 (0.2607)  loss_box_reg: 0.0906 (0.1232)  loss_mask: 0.2336 (0.2726)  loss_objectness: 0.0176 (0.0363)  loss_rpn_box_reg: 0.0267 (0.0508)  time: 0.8528 (1.5387)  data: 0.0030 (0.7016)  lr: 0.001200  max mem: 24032
2020-02-11 08:12:51,430 maskrcnn_benchmark.trainer INFO: eta: 7:10:40  iter: 25200  loss: 0.5997 (0.7435)  loss_classifier: 0.1944 (0.2607)  loss_box_reg: 0.1000 (0.1232)  loss_mask: 0.2481 (0.2725)  loss_objectness: 0.0177 (0.0363)  loss_rpn_box_reg: 0.0432 (0.0508)  time: 0.8511 (1.5381)  data: 0.0031 (0.7011)  lr: 0.001200  max mem: 24032
2020-02-11 08:13:08,226 maskrcnn_benchmark.trainer INFO: eta: 7:10:00  iter: 25220  loss: 0.5695 (0.7434)  loss_classifier: 0.2027 (0.2606)  loss_box_reg: 0.0904 (0.1231)  loss_mask: 0.2437 (0.2725)  loss_objectness: 0.0183 (0.0363)  loss_rpn_box_reg: 0.0289 (0.0508)  time: 0.8359 (1.5376)  data: 0.0030 (0.7005)  lr: 0.001200  max mem: 24032
2020-02-11 08:13:25,147 maskrcnn_benchmark.trainer INFO: eta: 7:09:20  iter: 25240  loss: 0.6204 (0.7433)  loss_classifier: 0.2177 (0.2606)  loss_box_reg: 0.1021 (0.1231)  loss_mask: 0.2475 (0.2725)  loss_objectness: 0.0173 (0.0363)  loss_rpn_box_reg: 0.0382 (0.0508)  time: 0.8510 (1.5370)  data: 0.0030 (0.6999)  lr: 0.001200  max mem: 24032
2020-02-11 08:13:42,181 maskrcnn_benchmark.trainer INFO: eta: 7:08:40  iter: 25260  loss: 0.5866 (0.7432)  loss_classifier: 0.1931 (0.2606)  loss_box_reg: 0.1051 (0.1231)  loss_mask: 0.2413 (0.2725)  loss_objectness: 0.0201 (0.0363)  loss_rpn_box_reg: 0.0325 (0.0508)  time: 0.8508 (1.5365)  data: 0.0031 (0.6994)  lr: 0.001200  max mem: 24032
2020-02-11 08:13:59,147 maskrcnn_benchmark.trainer INFO: eta: 7:08:00  iter: 25280  loss: 0.6441 (0.7431)  loss_classifier: 0.2070 (0.2605)  loss_box_reg: 0.1061 (0.1231)  loss_mask: 0.2395 (0.2724)  loss_objectness: 0.0194 (0.0363)  loss_rpn_box_reg: 0.0452 (0.0508)  time: 0.8478 (1.5359)  data: 0.0032 (0.6988)  lr: 0.001200  max mem: 24032
2020-02-11 08:14:16,073 maskrcnn_benchmark.trainer INFO: eta: 7:07:20  iter: 25300  loss: 0.6275 (0.7430)  loss_classifier: 0.2053 (0.2605)  loss_box_reg: 0.0989 (0.1231)  loss_mask: 0.2369 (0.2724)  loss_objectness: 0.0184 (0.0363)  loss_rpn_box_reg: 0.0394 (0.0508)  time: 0.8514 (1.5354)  data: 0.0030 (0.6983)  lr: 0.001200  max mem: 24032
2020-02-11 08:14:33,046 maskrcnn_benchmark.trainer INFO: eta: 7:06:41  iter: 25320  loss: 0.5962 (0.7429)  loss_classifier: 0.1864 (0.2604)  loss_box_reg: 0.0989 (0.1231)  loss_mask: 0.2409 (0.2724)  loss_objectness: 0.0184 (0.0362)  loss_rpn_box_reg: 0.0326 (0.0508)  time: 0.8509 (1.5348)  data: 0.0028 (0.6977)  lr: 0.001200  max mem: 24032
2020-02-11 08:14:49,915 maskrcnn_benchmark.trainer INFO: eta: 7:06:01  iter: 25340  loss: 0.5573 (0.7428)  loss_classifier: 0.1766 (0.2604)  loss_box_reg: 0.0903 (0.1231)  loss_mask: 0.2393 (0.2724)  loss_objectness: 0.0164 (0.0362)  loss_rpn_box_reg: 0.0244 (0.0508)  time: 0.8427 (1.5343)  data: 0.0030 (0.6972)  lr: 0.001200  max mem: 24032
2020-02-11 08:15:06,917 maskrcnn_benchmark.trainer INFO: eta: 7:05:21  iter: 25360  loss: 0.6332 (0.7427)  loss_classifier: 0.1938 (0.2603)  loss_box_reg: 0.1086 (0.1230)  loss_mask: 0.2420 (0.2724)  loss_objectness: 0.0191 (0.0362)  loss_rpn_box_reg: 0.0436 (0.0508)  time: 0.8450 (1.5337)  data: 0.0030 (0.6967)  lr: 0.001200  max mem: 24032
2020-02-11 08:15:23,798 maskrcnn_benchmark.trainer INFO: eta: 7:04:41  iter: 25380  loss: 0.6026 (0.7426)  loss_classifier: 0.2102 (0.2603)  loss_box_reg: 0.1011 (0.1230)  loss_mask: 0.2382 (0.2723)  loss_objectness: 0.0191 (0.0362)  loss_rpn_box_reg: 0.0385 (0.0508)  time: 0.8432 (1.5332)  data: 0.0030 (0.6961)  lr: 0.001200  max mem: 24032
2020-02-11 08:15:40,820 maskrcnn_benchmark.trainer INFO: eta: 7:04:02  iter: 25400  loss: 0.5913 (0.7425)  loss_classifier: 0.1870 (0.2602)  loss_box_reg: 0.1005 (0.1230)  loss_mask: 0.2527 (0.2723)  loss_objectness: 0.0201 (0.0362)  loss_rpn_box_reg: 0.0305 (0.0507)  time: 0.8525 (1.5327)  data: 0.0029 (0.6956)  lr: 0.001200  max mem: 24032
2020-02-11 08:15:57,771 maskrcnn_benchmark.trainer INFO: eta: 7:03:22  iter: 25420  loss: 0.6378 (0.7424)  loss_classifier: 0.2240 (0.2602)  loss_box_reg: 0.1173 (0.1230)  loss_mask: 0.2571 (0.2723)  loss_objectness: 0.0197 (0.0362)  loss_rpn_box_reg: 0.0337 (0.0507)  time: 0.8462 (1.5321)  data: 0.0031 (0.6950)  lr: 0.001200  max mem: 24032
2020-02-11 08:16:14,637 maskrcnn_benchmark.trainer INFO: eta: 7:02:43  iter: 25440  loss: 0.6256 (0.7423)  loss_classifier: 0.2037 (0.2602)  loss_box_reg: 0.1028 (0.1230)  loss_mask: 0.2501 (0.2723)  loss_objectness: 0.0186 (0.0362)  loss_rpn_box_reg: 0.0377 (0.0507)  time: 0.8371 (1.5316)  data: 0.0031 (0.6945)  lr: 0.001200  max mem: 24032
2020-02-11 08:16:31,573 maskrcnn_benchmark.trainer INFO: eta: 7:02:03  iter: 25460  loss: 0.5941 (0.7422)  loss_classifier: 0.1876 (0.2601)  loss_box_reg: 0.1055 (0.1230)  loss_mask: 0.2436 (0.2723)  loss_objectness: 0.0168 (0.0361)  loss_rpn_box_reg: 0.0359 (0.0507)  time: 0.8470 (1.5310)  data: 0.0030 (0.6939)  lr: 0.001200  max mem: 24032
2020-02-11 08:16:48,453 maskrcnn_benchmark.trainer INFO: eta: 7:01:24  iter: 25480  loss: 0.5980 (0.7421)  loss_classifier: 0.1876 (0.2601)  loss_box_reg: 0.0969 (0.1230)  loss_mask: 0.2294 (0.2722)  loss_objectness: 0.0154 (0.0361)  loss_rpn_box_reg: 0.0384 (0.0507)  time: 0.8414 (1.5305)  data: 0.0031 (0.6934)  lr: 0.001200  max mem: 24032
2020-02-11 08:17:05,271 maskrcnn_benchmark.trainer INFO: eta: 7:00:44  iter: 25500  loss: 0.5692 (0.7419)  loss_classifier: 0.1787 (0.2600)  loss_box_reg: 0.0873 (0.1229)  loss_mask: 0.2294 (0.2722)  loss_objectness: 0.0163 (0.0361)  loss_rpn_box_reg: 0.0331 (0.0507)  time: 0.8401 (1.5300)  data: 0.0030 (0.6928)  lr: 0.001200  max mem: 24032
2020-02-11 08:17:22,057 maskrcnn_benchmark.trainer INFO: eta: 7:00:04  iter: 25520  loss: 0.5236 (0.7418)  loss_classifier: 0.1691 (0.2599)  loss_box_reg: 0.0866 (0.1229)  loss_mask: 0.2287 (0.2722)  loss_objectness: 0.0171 (0.0361)  loss_rpn_box_reg: 0.0292 (0.0507)  time: 0.8387 (1.5294)  data: 0.0029 (0.6923)  lr: 0.001200  max mem: 24032
2020-02-11 08:17:39,077 maskrcnn_benchmark.trainer INFO: eta: 6:59:25  iter: 25540  loss: 0.5675 (0.7417)  loss_classifier: 0.1845 (0.2599)  loss_box_reg: 0.0918 (0.1229)  loss_mask: 0.2363 (0.2721)  loss_objectness: 0.0146 (0.0361)  loss_rpn_box_reg: 0.0279 (0.0507)  time: 0.8546 (1.5289)  data: 0.0029 (0.6918)  lr: 0.001200  max mem: 24032
2020-02-11 08:17:55,855 maskrcnn_benchmark.trainer INFO: eta: 6:58:46  iter: 25560  loss: 0.6302 (0.7416)  loss_classifier: 0.2109 (0.2598)  loss_box_reg: 0.1028 (0.1229)  loss_mask: 0.2581 (0.2721)  loss_objectness: 0.0191 (0.0361)  loss_rpn_box_reg: 0.0358 (0.0507)  time: 0.8369 (1.5284)  data: 0.0030 (0.6912)  lr: 0.001200  max mem: 24032
2020-02-11 08:18:12,817 maskrcnn_benchmark.trainer INFO: eta: 6:58:06  iter: 25580  loss: 0.6083 (0.7415)  loss_classifier: 0.1952 (0.2598)  loss_box_reg: 0.1079 (0.1229)  loss_mask: 0.2346 (0.2721)  loss_objectness: 0.0174 (0.0361)  loss_rpn_box_reg: 0.0311 (0.0507)  time: 0.8489 (1.5278)  data: 0.0031 (0.6907)  lr: 0.001200  max mem: 24032
2020-02-11 08:18:29,757 maskrcnn_benchmark.trainer INFO: eta: 6:57:27  iter: 25600  loss: 0.5293 (0.7414)  loss_classifier: 0.1727 (0.2597)  loss_box_reg: 0.0810 (0.1228)  loss_mask: 0.2397 (0.2721)  loss_objectness: 0.0118 (0.0361)  loss_rpn_box_reg: 0.0308 (0.0507)  time: 0.8471 (1.5273)  data: 0.0028 (0.6901)  lr: 0.001200  max mem: 24032
2020-02-11 08:18:46,673 maskrcnn_benchmark.trainer INFO: eta: 6:56:48  iter: 25620  loss: 0.5878 (0.7413)  loss_classifier: 0.1891 (0.2597)  loss_box_reg: 0.1150 (0.1228)  loss_mask: 0.2359 (0.2721)  loss_objectness: 0.0177 (0.0360)  loss_rpn_box_reg: 0.0352 (0.0506)  time: 0.8438 (1.5268)  data: 0.0030 (0.6896)  lr: 0.001200  max mem: 24032
2020-02-11 08:19:03,674 maskrcnn_benchmark.trainer INFO: eta: 6:56:09  iter: 25640  loss: 0.6337 (0.7412)  loss_classifier: 0.2238 (0.2597)  loss_box_reg: 0.1129 (0.1228)  loss_mask: 0.2547 (0.2720)  loss_objectness: 0.0215 (0.0360)  loss_rpn_box_reg: 0.0470 (0.0506)  time: 0.8482 (1.5262)  data: 0.0031 (0.6891)  lr: 0.001200  max mem: 24032
2020-02-11 08:19:20,560 maskrcnn_benchmark.trainer INFO: eta: 6:55:29  iter: 25660  loss: 0.6081 (0.7411)  loss_classifier: 0.1961 (0.2596)  loss_box_reg: 0.1075 (0.1228)  loss_mask: 0.2328 (0.2720)  loss_objectness: 0.0196 (0.0360)  loss_rpn_box_reg: 0.0402 (0.0506)  time: 0.8441 (1.5257)  data: 0.0031 (0.6885)  lr: 0.001200  max mem: 24032
2020-02-11 08:19:36,847 maskrcnn_benchmark.trainer INFO: eta: 6:54:50  iter: 25680  loss: 0.5839 (0.7410)  loss_classifier: 0.1851 (0.2596)  loss_box_reg: 0.0962 (0.1228)  loss_mask: 0.2265 (0.2720)  loss_objectness: 0.0154 (0.0360)  loss_rpn_box_reg: 0.0300 (0.0506)  time: 0.8379 (1.5251)  data: 0.0028 (0.6880)  lr: 0.001200  max mem: 24032
:::MLL 1581409176.848 epoch_stop: {"value": null, "metadata": {"epoch_num": 30, "file": "tools/train_mlperf.py", "lineno": 75}}
:::MLL 1581409176.849 block_stop: {"value": null, "metadata": {"first_epoch_num": 30, "file": "tools/train_mlperf.py", "lineno": 76}}
:::MLL 1581409176.849 eval_start: {"value": null, "metadata": {"epoch_num": 30, "file": "tools/train_mlperf.py", "lineno": 77}}
2020-02-11 08:19:37,409 maskrcnn_benchmark.data.build WARNING: When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
Done (t=3.91s)
creating index...
Done (t=3.88s)
creating index...
Done (t=3.92s)
creating index...
Done (t=4.10s)
creating index...
index created!
Done (t=3.94s)
creating index...
Done (t=3.88s)
creating index...
Done (t=3.98s)
creating index...
index created!
2020-02-11 08:19:41,803 maskrcnn_benchmark.inference INFO: Start evaluation on coco_2014_val dataset(40504 images).
Done (t=4.04s)
creating index...
  0%|                                                  | 0/2532 [00:00<?, ?it/s]index created!
index created!
index created!
index created!
index created!
  0%|                                                  | 0/2532 [00:00<?, ?it/s]index created!
100%|██████████████████████████████████████▊| 2522/2532 [03:44<00:00, 12.23it/s]
100%|███████████████████████████████████████| 2532/2532 [03:45<00:00, 11.23it/s]
100%|███████████████████████████████████████| 2532/2532 [03:46<00:00, 11.18it/s]
 99%|██████████████████████████████████████▌| 2502/2532 [03:46<00:02, 12.08it/s]
 99%|██████████████████████████████████████▊| 2516/2532 [03:47<00:01, 11.97it/s]
100%|██████████████████████████████████████▉| 2531/2532 [03:50<00:00, 12.30it/s]

100%|███████████████████████████████████████| 2532/2532 [03:51<00:00, 10.94it/s]
2020-02-11 08:23:33,235 maskrcnn_benchmark.inference INFO: Total inference time: 0:03:51.431873 (0.04571042323616355 s / img per device, on 8 devices)
2020-02-11 08:23:34,250 maskrcnn_benchmark.inference INFO: Preparing results for COCO format
2020-02-11 08:23:34,251 maskrcnn_benchmark.inference INFO: Preparing bbox results
2020-02-11 08:23:35,761 maskrcnn_benchmark.inference INFO: Preparing segm results
:::MLL 1581409655.003 block_start: {"value": null, "metadata": {"first_epoch_num": 31, "epoch_count": 1, "file": "tools/train_mlperf.py", "lineno": 134}}
:::MLL 1581409655.005 epoch_start: {"value": null, "metadata": {"epoch_num": 31, "file": "tools/train_mlperf.py", "lineno": 135}}
Evaluating predictions
creating index...
GT annotations already exist!
2020-02-11 08:27:51,900 maskrcnn_benchmark.trainer INFO: eta: 6:59:14  iter: 25700  loss: 0.6123 (0.7409)  loss_classifier: 0.1907 (0.2595)  loss_box_reg: 0.1005 (0.1228)  loss_mask: 0.2367 (0.2720)  loss_objectness: 0.0205 (0.0360)  loss_rpn_box_reg: 0.0402 (0.0506)  time: 0.8390 (1.5432)  data: 0.0029 (0.7061)  lr: 0.001200  max mem: 24032
2020-02-11 08:28:08,687 maskrcnn_benchmark.trainer INFO: eta: 6:58:34  iter: 25720  loss: 0.5594 (0.7408)  loss_classifier: 0.1807 (0.2595)  loss_box_reg: 0.0879 (0.1228)  loss_mask: 0.2576 (0.2720)  loss_objectness: 0.0178 (0.0360)  loss_rpn_box_reg: 0.0397 (0.0506)  time: 0.8403 (1.5427)  data: 0.0029 (0.7055)  lr: 0.001200  max mem: 24032
2020-02-11 08:28:25,546 maskrcnn_benchmark.trainer INFO: eta: 6:57:55  iter: 25740  loss: 0.5833 (0.7406)  loss_classifier: 0.1882 (0.2594)  loss_box_reg: 0.0997 (0.1227)  loss_mask: 0.2438 (0.2719)  loss_objectness: 0.0176 (0.0360)  loss_rpn_box_reg: 0.0338 (0.0506)  time: 0.8391 (1.5421)  data: 0.0029 (0.7050)  lr: 0.001200  max mem: 24032
Loading and preparing results...
resFile is ./inference/coco_2014_val/bbox.json
DONE (t=6.35s)
Running per image evaluation...
Evaluate annotation type *bbox*
2020-02-11 08:28:42,441 maskrcnn_benchmark.trainer INFO: eta: 6:57:15  iter: 25760  loss: 0.5679 (0.7405)  loss_classifier: 0.1815 (0.2594)  loss_box_reg: 0.1001 (0.1227)  loss_mask: 0.2336 (0.2719)  loss_objectness: 0.0151 (0.0359)  loss_rpn_box_reg: 0.0349 (0.0506)  time: 0.8470 (1.5416)  data: 0.0030 (0.7044)  lr: 0.001200  max mem: 24032
2020-02-11 08:28:59,535 maskrcnn_benchmark.trainer INFO: eta: 6:56:35  iter: 25780  loss: 0.5592 (0.7404)  loss_classifier: 0.1778 (0.2593)  loss_box_reg: 0.0987 (0.1227)  loss_mask: 0.2286 (0.2719)  loss_objectness: 0.0147 (0.0359)  loss_rpn_box_reg: 0.0321 (0.0506)  time: 0.8540 (1.5411)  data: 0.0029 (0.7039)  lr: 0.001200  max mem: 24032
DONE (t=23.84s).
Accumulating evaluation results...
DONE (t=0.00s).
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.36181
 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=100 ] = 0.57313
 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=100 ] = 0.39316
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.19048
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.37806
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.46596
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=  1 ] = 0.30364
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets= 10 ] = 0.47342
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.49460
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.29672
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.52127
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.63116
2020-02-11 08:29:16,405 maskrcnn_benchmark.trainer INFO: eta: 6:55:56  iter: 25800  loss: 0.6248 (0.7403)  loss_classifier: 0.1987 (0.2593)  loss_box_reg: 0.0999 (0.1227)  loss_mask: 0.2462 (0.2719)  loss_objectness: 0.0165 (0.0359)  loss_rpn_box_reg: 0.0366 (0.0506)  time: 0.8415 (1.5405)  data: 0.0030 (0.7034)  lr: 0.001200  max mem: 24032
2020-02-11 08:29:33,319 maskrcnn_benchmark.trainer INFO: eta: 6:55:16  iter: 25820  loss: 0.5959 (0.7402)  loss_classifier: 0.1817 (0.2592)  loss_box_reg: 0.0927 (0.1227)  loss_mask: 0.2326 (0.2718)  loss_objectness: 0.0187 (0.0359)  loss_rpn_box_reg: 0.0278 (0.0506)  time: 0.8408 (1.5400)  data: 0.0029 (0.7028)  lr: 0.001200  max mem: 24032
Loading and preparing results...
resFile is ./inference/coco_2014_val/segm.json
2020-02-11 08:29:50,273 maskrcnn_benchmark.trainer INFO: eta: 6:54:37  iter: 25840  loss: 0.5922 (0.7401)  loss_classifier: 0.1952 (0.2592)  loss_box_reg: 0.1002 (0.1227)  loss_mask: 0.2343 (0.2718)  loss_objectness: 0.0135 (0.0359)  loss_rpn_box_reg: 0.0379 (0.0506)  time: 0.8469 (1.5394)  data: 0.0028 (0.7023)  lr: 0.001200  max mem: 24032
DONE (t=14.62s)
Running per image evaluation...
Evaluate annotation type *segm*
2020-02-11 08:30:07,088 maskrcnn_benchmark.trainer INFO: eta: 6:53:57  iter: 25860  loss: 0.5590 (0.7400)  loss_classifier: 0.1812 (0.2591)  loss_box_reg: 0.0947 (0.1226)  loss_mask: 0.2580 (0.2718)  loss_objectness: 0.0170 (0.0359)  loss_rpn_box_reg: 0.0328 (0.0505)  time: 0.8359 (1.5389)  data: 0.0028 (0.7017)  lr: 0.001200  max mem: 24032
2020-02-11 08:30:24,068 maskrcnn_benchmark.trainer INFO: eta: 6:53:18  iter: 25880  loss: 0.6357 (0.7399)  loss_classifier: 0.2128 (0.2591)  loss_box_reg: 0.1089 (0.1226)  loss_mask: 0.2379 (0.2718)  loss_objectness: 0.0198 (0.0359)  loss_rpn_box_reg: 0.0416 (0.0505)  time: 0.8488 (1.5384)  data: 0.0030 (0.7012)  lr: 0.001200  max mem: 24032
DONE (t=31.43s).
Accumulating evaluation results...
DONE (t=0.00s).
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.32734
 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=100 ] = 0.54113
 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=100 ] = 0.34585
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.13587
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.34038
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.48074
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=  1 ] = 0.28507
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets= 10 ] = 0.43324
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.45071
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.25220
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.48039
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.60298
2020-02-11 08:30:40,104 maskrcnn_benchmark.trainer INFO: bbox mAP: 0.36181263968258265, segm mAP: 0.32734272418155314
:::MLL 1581409840.118 eval_accuracy: {"value": {"accuracy": {"BBOX": 0.36181263968258265, "SEGM": 0.32734272418155314}}, "metadata": {"epoch_num": 30, "file": "tools/train_mlperf.py", "lineno": 99}}
:::MLL 1581409840.118 eval_stop: {"value": null, "metadata": {"epoch_num": 30, "file": "tools/train_mlperf.py", "lineno": 100}}
2020-02-11 08:30:43,485 maskrcnn_benchmark.trainer INFO: eta: 6:52:40  iter: 25900  loss: 0.5618 (0.7398)  loss_classifier: 0.1838 (0.2590)  loss_box_reg: 0.0894 (0.1226)  loss_mask: 0.2285 (0.2717)  loss_objectness: 0.0153 (0.0359)  loss_rpn_box_reg: 0.0263 (0.0505)  time: 0.8443 (1.5379)  data: 0.0028 (0.7007)  lr: 0.001200  max mem: 24032
2020-02-11 08:31:00,329 maskrcnn_benchmark.trainer INFO: eta: 6:52:01  iter: 25920  loss: 0.5571 (0.7396)  loss_classifier: 0.1912 (0.2590)  loss_box_reg: 0.0928 (0.1226)  loss_mask: 0.2307 (0.2717)  loss_objectness: 0.0161 (0.0358)  loss_rpn_box_reg: 0.0315 (0.0505)  time: 0.8392 (1.5374)  data: 0.0029 (0.7001)  lr: 0.001200  max mem: 24032
2020-02-11 08:31:17,214 maskrcnn_benchmark.trainer INFO: eta: 6:51:21  iter: 25940  loss: 0.6423 (0.7396)  loss_classifier: 0.2109 (0.2589)  loss_box_reg: 0.1004 (0.1226)  loss_mask: 0.2513 (0.2717)  loss_objectness: 0.0181 (0.0358)  loss_rpn_box_reg: 0.0367 (0.0505)  time: 0.8408 (1.5369)  data: 0.0029 (0.6996)  lr: 0.001200  max mem: 24032
2020-02-11 08:31:34,125 maskrcnn_benchmark.trainer INFO: eta: 6:50:42  iter: 25960  loss: 0.5852 (0.7394)  loss_classifier: 0.1873 (0.2589)  loss_box_reg: 0.0950 (0.1226)  loss_mask: 0.2360 (0.2717)  loss_objectness: 0.0154 (0.0358)  loss_rpn_box_reg: 0.0310 (0.0505)  time: 0.8418 (1.5363)  data: 0.0029 (0.6990)  lr: 0.001200  max mem: 24032
2020-02-11 08:31:50,988 maskrcnn_benchmark.trainer INFO: eta: 6:50:03  iter: 25980  loss: 0.5359 (0.7393)  loss_classifier: 0.1677 (0.2588)  loss_box_reg: 0.0820 (0.1225)  loss_mask: 0.2351 (0.2716)  loss_objectness: 0.0145 (0.0358)  loss_rpn_box_reg: 0.0239 (0.0505)  time: 0.8454 (1.5358)  data: 0.0029 (0.6985)  lr: 0.001200  max mem: 24032
2020-02-11 08:32:07,893 maskrcnn_benchmark.trainer INFO: eta: 6:49:24  iter: 26000  loss: 0.5797 (0.7392)  loss_classifier: 0.1595 (0.2588)  loss_box_reg: 0.0878 (0.1225)  loss_mask: 0.2404 (0.2716)  loss_objectness: 0.0157 (0.0358)  loss_rpn_box_reg: 0.0362 (0.0505)  time: 0.8436 (1.5353)  data: 0.0029 (0.6980)  lr: 0.001200  max mem: 24032
2020-02-11 08:32:24,658 maskrcnn_benchmark.trainer INFO: eta: 6:48:44  iter: 26020  loss: 0.5819 (0.7391)  loss_classifier: 0.1798 (0.2587)  loss_box_reg: 0.0953 (0.1225)  loss_mask: 0.2392 (0.2716)  loss_objectness: 0.0156 (0.0358)  loss_rpn_box_reg: 0.0447 (0.0505)  time: 0.8374 (1.5347)  data: 0.0030 (0.6974)  lr: 0.001200  max mem: 24032
2020-02-11 08:32:41,552 maskrcnn_benchmark.trainer INFO: eta: 6:48:05  iter: 26040  loss: 0.5267 (0.7389)  loss_classifier: 0.1705 (0.2587)  loss_box_reg: 0.0893 (0.1225)  loss_mask: 0.2275 (0.2716)  loss_objectness: 0.0145 (0.0358)  loss_rpn_box_reg: 0.0318 (0.0505)  time: 0.8427 (1.5342)  data: 0.0029 (0.6969)  lr: 0.001200  max mem: 24032
2020-02-11 08:32:58,319 maskrcnn_benchmark.trainer INFO: eta: 6:47:26  iter: 26060  loss: 0.6633 (0.7389)  loss_classifier: 0.2173 (0.2586)  loss_box_reg: 0.1125 (0.1225)  loss_mask: 0.2613 (0.2716)  loss_objectness: 0.0174 (0.0357)  loss_rpn_box_reg: 0.0396 (0.0505)  time: 0.8415 (1.5337)  data: 0.0031 (0.6964)  lr: 0.001200  max mem: 24032
2020-02-11 08:33:15,201 maskrcnn_benchmark.trainer INFO: eta: 6:46:47  iter: 26080  loss: 0.5680 (0.7388)  loss_classifier: 0.1739 (0.2586)  loss_box_reg: 0.0959 (0.1224)  loss_mask: 0.2337 (0.2715)  loss_objectness: 0.0134 (0.0357)  loss_rpn_box_reg: 0.0285 (0.0505)  time: 0.8418 (1.5331)  data: 0.0030 (0.6958)  lr: 0.001200  max mem: 24032
2020-02-11 08:33:32,179 maskrcnn_benchmark.trainer INFO: eta: 6:46:08  iter: 26100  loss: 0.6016 (0.7386)  loss_classifier: 0.2010 (0.2585)  loss_box_reg: 0.1001 (0.1224)  loss_mask: 0.2381 (0.2715)  loss_objectness: 0.0168 (0.0357)  loss_rpn_box_reg: 0.0418 (0.0505)  time: 0.8537 (1.5326)  data: 0.0029 (0.6953)  lr: 0.001200  max mem: 24032
2020-02-11 08:33:49,126 maskrcnn_benchmark.trainer INFO: eta: 6:45:29  iter: 26120  loss: 0.6210 (0.7385)  loss_classifier: 0.1956 (0.2585)  loss_box_reg: 0.1075 (0.1224)  loss_mask: 0.2468 (0.2715)  loss_objectness: 0.0187 (0.0357)  loss_rpn_box_reg: 0.0301 (0.0504)  time: 0.8431 (1.5321)  data: 0.0031 (0.6948)  lr: 0.001200  max mem: 24032
2020-02-11 08:34:05,897 maskrcnn_benchmark.trainer INFO: eta: 6:44:50  iter: 26140  loss: 0.6452 (0.7384)  loss_classifier: 0.2079 (0.2584)  loss_box_reg: 0.0968 (0.1224)  loss_mask: 0.2406 (0.2715)  loss_objectness: 0.0181 (0.0357)  loss_rpn_box_reg: 0.0327 (0.0504)  time: 0.8411 (1.5316)  data: 0.0029 (0.6942)  lr: 0.001200  max mem: 24032
2020-02-11 08:34:22,883 maskrcnn_benchmark.trainer INFO: eta: 6:44:11  iter: 26160  loss: 0.6125 (0.7383)  loss_classifier: 0.1975 (0.2584)  loss_box_reg: 0.1057 (0.1224)  loss_mask: 0.2390 (0.2714)  loss_objectness: 0.0158 (0.0357)  loss_rpn_box_reg: 0.0368 (0.0504)  time: 0.8469 (1.5310)  data: 0.0030 (0.6937)  lr: 0.001200  max mem: 24032
2020-02-11 08:34:39,827 maskrcnn_benchmark.trainer INFO: eta: 6:43:32  iter: 26180  loss: 0.5633 (0.7382)  loss_classifier: 0.1726 (0.2583)  loss_box_reg: 0.0851 (0.1224)  loss_mask: 0.2292 (0.2714)  loss_objectness: 0.0191 (0.0357)  loss_rpn_box_reg: 0.0359 (0.0504)  time: 0.8466 (1.5305)  data: 0.0029 (0.6932)  lr: 0.001200  max mem: 24032
2020-02-11 08:34:56,722 maskrcnn_benchmark.trainer INFO: eta: 6:42:53  iter: 26200  loss: 0.5533 (0.7380)  loss_classifier: 0.1735 (0.2583)  loss_box_reg: 0.0862 (0.1223)  loss_mask: 0.2387 (0.2714)  loss_objectness: 0.0160 (0.0356)  loss_rpn_box_reg: 0.0333 (0.0504)  time: 0.8459 (1.5300)  data: 0.0028 (0.6927)  lr: 0.001200  max mem: 24032
2020-02-11 08:35:13,658 maskrcnn_benchmark.trainer INFO: eta: 6:42:14  iter: 26220  loss: 0.5892 (0.7379)  loss_classifier: 0.2034 (0.2582)  loss_box_reg: 0.0946 (0.1223)  loss_mask: 0.2347 (0.2714)  loss_objectness: 0.0181 (0.0356)  loss_rpn_box_reg: 0.0335 (0.0504)  time: 0.8441 (1.5295)  data: 0.0030 (0.6921)  lr: 0.001200  max mem: 24032
2020-02-11 08:35:30,638 maskrcnn_benchmark.trainer INFO: eta: 6:41:36  iter: 26240  loss: 0.6135 (0.7379)  loss_classifier: 0.1974 (0.2582)  loss_box_reg: 0.1084 (0.1223)  loss_mask: 0.2536 (0.2713)  loss_objectness: 0.0192 (0.0356)  loss_rpn_box_reg: 0.0352 (0.0504)  time: 0.8495 (1.5289)  data: 0.0030 (0.6916)  lr: 0.001200  max mem: 24032
2020-02-11 08:35:47,611 maskrcnn_benchmark.trainer INFO: eta: 6:40:57  iter: 26260  loss: 0.5660 (0.7377)  loss_classifier: 0.1810 (0.2581)  loss_box_reg: 0.0918 (0.1223)  loss_mask: 0.2501 (0.2713)  loss_objectness: 0.0182 (0.0356)  loss_rpn_box_reg: 0.0295 (0.0504)  time: 0.8501 (1.5284)  data: 0.0030 (0.6911)  lr: 0.001200  max mem: 24032
2020-02-11 08:36:04,555 maskrcnn_benchmark.trainer INFO: eta: 6:40:18  iter: 26280  loss: 0.6278 (0.7376)  loss_classifier: 0.1946 (0.2581)  loss_box_reg: 0.1080 (0.1223)  loss_mask: 0.2485 (0.2713)  loss_objectness: 0.0180 (0.0356)  loss_rpn_box_reg: 0.0393 (0.0504)  time: 0.8467 (1.5279)  data: 0.0030 (0.6906)  lr: 0.001200  max mem: 24032
2020-02-11 08:36:21,476 maskrcnn_benchmark.trainer INFO: eta: 6:39:40  iter: 26300  loss: 0.5910 (0.7375)  loss_classifier: 0.2088 (0.2580)  loss_box_reg: 0.1004 (0.1223)  loss_mask: 0.2393 (0.2713)  loss_objectness: 0.0202 (0.0356)  loss_rpn_box_reg: 0.0408 (0.0504)  time: 0.8437 (1.5274)  data: 0.0030 (0.6900)  lr: 0.001200  max mem: 24032
2020-02-11 08:36:38,387 maskrcnn_benchmark.trainer INFO: eta: 6:39:01  iter: 26320  loss: 0.6150 (0.7374)  loss_classifier: 0.2020 (0.2580)  loss_box_reg: 0.0984 (0.1222)  loss_mask: 0.2362 (0.2713)  loss_objectness: 0.0180 (0.0356)  loss_rpn_box_reg: 0.0366 (0.0504)  time: 0.8395 (1.5269)  data: 0.0031 (0.6895)  lr: 0.001200  max mem: 24032
2020-02-11 08:36:55,362 maskrcnn_benchmark.trainer INFO: eta: 6:38:22  iter: 26340  loss: 0.6216 (0.7374)  loss_classifier: 0.2103 (0.2580)  loss_box_reg: 0.1049 (0.1222)  loss_mask: 0.2535 (0.2712)  loss_objectness: 0.0205 (0.0356)  loss_rpn_box_reg: 0.0433 (0.0504)  time: 0.8501 (1.5264)  data: 0.0030 (0.6890)  lr: 0.001200  max mem: 24032
2020-02-11 08:37:12,270 maskrcnn_benchmark.trainer INFO: eta: 6:37:44  iter: 26360  loss: 0.6036 (0.7373)  loss_classifier: 0.1974 (0.2579)  loss_box_reg: 0.1064 (0.1222)  loss_mask: 0.2502 (0.2712)  loss_objectness: 0.0181 (0.0356)  loss_rpn_box_reg: 0.0315 (0.0504)  time: 0.8458 (1.5258)  data: 0.0031 (0.6885)  lr: 0.001200  max mem: 24032
2020-02-11 08:37:29,200 maskrcnn_benchmark.trainer INFO: eta: 6:37:05  iter: 26380  loss: 0.5898 (0.7372)  loss_classifier: 0.1860 (0.2579)  loss_box_reg: 0.0933 (0.1222)  loss_mask: 0.2387 (0.2712)  loss_objectness: 0.0184 (0.0355)  loss_rpn_box_reg: 0.0357 (0.0503)  time: 0.8444 (1.5253)  data: 0.0030 (0.6880)  lr: 0.001200  max mem: 24032
2020-02-11 08:37:46,020 maskrcnn_benchmark.trainer INFO: eta: 6:36:27  iter: 26400  loss: 0.5073 (0.7370)  loss_classifier: 0.1695 (0.2578)  loss_box_reg: 0.0777 (0.1222)  loss_mask: 0.2294 (0.2712)  loss_objectness: 0.0136 (0.0355)  loss_rpn_box_reg: 0.0287 (0.0503)  time: 0.8395 (1.5248)  data: 0.0030 (0.6874)  lr: 0.001200  max mem: 24032
2020-02-11 08:38:02,894 maskrcnn_benchmark.trainer INFO: eta: 6:35:48  iter: 26420  loss: 0.6078 (0.7369)  loss_classifier: 0.2094 (0.2578)  loss_box_reg: 0.0941 (0.1222)  loss_mask: 0.2514 (0.2712)  loss_objectness: 0.0180 (0.0355)  loss_rpn_box_reg: 0.0352 (0.0503)  time: 0.8402 (1.5243)  data: 0.0030 (0.6869)  lr: 0.001200  max mem: 24032
2020-02-11 08:38:19,968 maskrcnn_benchmark.trainer INFO: eta: 6:35:10  iter: 26440  loss: 0.6195 (0.7369)  loss_classifier: 0.2097 (0.2577)  loss_box_reg: 0.0961 (0.1222)  loss_mask: 0.2472 (0.2711)  loss_objectness: 0.0198 (0.0355)  loss_rpn_box_reg: 0.0405 (0.0503)  time: 0.8485 (1.5238)  data: 0.0030 (0.6864)  lr: 0.001200  max mem: 24032
2020-02-11 08:38:36,965 maskrcnn_benchmark.trainer INFO: eta: 6:34:31  iter: 26460  loss: 0.6367 (0.7367)  loss_classifier: 0.2063 (0.2577)  loss_box_reg: 0.1014 (0.1221)  loss_mask: 0.2481 (0.2711)  loss_objectness: 0.0151 (0.0355)  loss_rpn_box_reg: 0.0294 (0.0503)  time: 0.8422 (1.5233)  data: 0.0029 (0.6859)  lr: 0.001200  max mem: 24032
2020-02-11 08:38:53,985 maskrcnn_benchmark.trainer INFO: eta: 6:33:53  iter: 26480  loss: 0.5985 (0.7367)  loss_classifier: 0.1920 (0.2577)  loss_box_reg: 0.1072 (0.1221)  loss_mask: 0.2478 (0.2711)  loss_objectness: 0.0230 (0.0355)  loss_rpn_box_reg: 0.0321 (0.0503)  time: 0.8480 (1.5228)  data: 0.0030 (0.6854)  lr: 0.001200  max mem: 24032
2020-02-11 08:39:10,869 maskrcnn_benchmark.trainer INFO: eta: 6:33:14  iter: 26500  loss: 0.4854 (0.7365)  loss_classifier: 0.1573 (0.2576)  loss_box_reg: 0.0687 (0.1221)  loss_mask: 0.2267 (0.2711)  loss_objectness: 0.0130 (0.0355)  loss_rpn_box_reg: 0.0315 (0.0503)  time: 0.8436 (1.5223)  data: 0.0030 (0.6849)  lr: 0.001200  max mem: 24032
2020-02-11 08:39:27,868 maskrcnn_benchmark.trainer INFO: eta: 6:32:36  iter: 26520  loss: 0.6064 (0.7364)  loss_classifier: 0.2006 (0.2576)  loss_box_reg: 0.1144 (0.1221)  loss_mask: 0.2478 (0.2711)  loss_objectness: 0.0179 (0.0355)  loss_rpn_box_reg: 0.0409 (0.0503)  time: 0.8550 (1.5217)  data: 0.0030 (0.6843)  lr: 0.001200  max mem: 24032
Gradient overflow.  Skipping step, loss scaler 0 reducing loss scale to 131072.0
Gradient overflow.  Skipping step, loss scaler 0 reducing loss scale to 131072.0
Gradient overflow.  Skipping step, loss scaler 0 reducing loss scale to 131072.0
Gradient overflow.  Skipping step, loss scaler 0 reducing loss scale to 131072.0
Gradient overflow.  Skipping step, loss scaler 0 reducing loss scale to 131072.0
Gradient overflow.  Skipping step, loss scaler 0 reducing loss scale to 131072.0
Gradient overflow.  Skipping step, loss scaler 0 reducing loss scale to 131072.0
Gradient overflow.  Skipping step, loss scaler 0 reducing loss scale to 131072.0
:::MLL 1581410380.793 epoch_stop: {"value": null, "metadata": {"epoch_num": 31, "file": "tools/train_mlperf.py", "lineno": 75}}
:::MLL 1581410380.793 block_stop: {"value": null, "metadata": {"first_epoch_num": 31, "file": "tools/train_mlperf.py", "lineno": 76}}
:::MLL 1581410380.794 eval_start: {"value": null, "metadata": {"epoch_num": 31, "file": "tools/train_mlperf.py", "lineno": 77}}
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
2020-02-11 08:39:41,725 maskrcnn_benchmark.data.build WARNING: When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
Done (t=3.84s)
creating index...
Done (t=3.90s)
creating index...
Done (t=3.87s)
creating index...
Done (t=3.93s)
creating index...
Done (t=3.91s)
creating index...
Done (t=3.93s)
creating index...
Done (t=3.92s)
creating index...
Done (t=3.94s)
creating index...
index created!
index created!
index created!
  0%|                                                  | 0/2532 [00:00<?, ?it/s]index created!
index created!
index created!
  0%|                                                  | 0/2532 [00:00<?, ?it/s]index created!
2020-02-11 08:39:46,057 maskrcnn_benchmark.inference INFO: Start evaluation on coco_2014_val dataset(40504 images).
index created!
 99%|██████████████████████████████████████▋| 2514/2532 [03:44<00:01, 11.65it/s]
100%|██████████████████████████████████████▊| 2522/2532 [03:45<00:00, 11.56it/s]
100%|███████████████████████████████████████| 2532/2532 [03:45<00:00, 11.21it/s]
100%|██████████████████████████████████████▊| 2523/2532 [03:46<00:00, 11.69it/s]
 99%|██████████████████████████████████████▋| 2515/2532 [03:47<00:01, 12.05it/s]
100%|███████████████████████████████████████| 2532/2532 [03:48<00:00, 11.07it/s]
100%|██████████████████████████████████████▉| 2531/2532 [03:48<00:00, 12.11it/s]
100%|███████████████████████████████████████| 2532/2532 [03:50<00:00, 11.00it/s]
2020-02-11 08:43:36,340 maskrcnn_benchmark.inference INFO: Total inference time: 0:03:50.282310 (0.04548337152064047 s / img per device, on 8 devices)
2020-02-11 08:43:37,355 maskrcnn_benchmark.inference INFO: Preparing results for COCO format
2020-02-11 08:43:37,355 maskrcnn_benchmark.inference INFO: Preparing bbox results
2020-02-11 08:43:38,858 maskrcnn_benchmark.inference INFO: Preparing segm results
:::MLL 1581410853.867 block_start: {"value": null, "metadata": {"first_epoch_num": 32, "epoch_count": 1, "file": "tools/train_mlperf.py", "lineno": 134}}
:::MLL 1581410853.871 epoch_start: {"value": null, "metadata": {"epoch_num": 32, "file": "tools/train_mlperf.py", "lineno": 135}}
2020-02-11 08:47:37,323 maskrcnn_benchmark.trainer INFO: eta: 6:36:33  iter: 26540  loss: 0.6393 (0.7364)  loss_classifier: 0.2149 (0.2575)  loss_box_reg: 0.1065 (0.1221)  loss_mask: 0.2463 (0.2710)  loss_objectness: 0.0186 (0.0354)  loss_rpn_box_reg: 0.0437 (0.0503)  time: 0.8449 (1.5390)  data: 0.0031 (0.7017)  lr: 0.001200  max mem: 24032
Evaluating predictions
creating index...
GT annotations already exist!
2020-02-11 08:47:54,175 maskrcnn_benchmark.trainer INFO: eta: 6:35:54  iter: 26560  loss: 0.5626 (0.7363)  loss_classifier: 0.1774 (0.2575)  loss_box_reg: 0.0888 (0.1221)  loss_mask: 0.2402 (0.2710)  loss_objectness: 0.0164 (0.0354)  loss_rpn_box_reg: 0.0327 (0.0503)  time: 0.8435 (1.5385)  data: 0.0030 (0.7011)  lr: 0.001200  max mem: 24032
2020-02-11 08:48:11,124 maskrcnn_benchmark.trainer INFO: eta: 6:35:15  iter: 26580  loss: 0.5832 (0.7361)  loss_classifier: 0.1997 (0.2574)  loss_box_reg: 0.1023 (0.1220)  loss_mask: 0.2474 (0.2710)  loss_objectness: 0.0174 (0.0354)  loss_rpn_box_reg: 0.0290 (0.0503)  time: 0.8470 (1.5380)  data: 0.0029 (0.7006)  lr: 0.001200  max mem: 24032
Loading and preparing results...
resFile is ./inference/coco_2014_val/bbox.json
2020-02-11 08:48:28,025 maskrcnn_benchmark.trainer INFO: eta: 6:34:37  iter: 26600  loss: 0.5780 (0.7360)  loss_classifier: 0.1902 (0.2574)  loss_box_reg: 0.0981 (0.1220)  loss_mask: 0.2432 (0.2710)  loss_objectness: 0.0177 (0.0354)  loss_rpn_box_reg: 0.0411 (0.0503)  time: 0.8432 (1.5375)  data: 0.0027 (0.7001)  lr: 0.001200  max mem: 24032
DONE (t=6.26s)
Running per image evaluation...
Evaluate annotation type *bbox*
2020-02-11 08:48:45,072 maskrcnn_benchmark.trainer INFO: eta: 6:33:58  iter: 26620  loss: 0.6479 (0.7360)  loss_classifier: 0.2052 (0.2573)  loss_box_reg: 0.1139 (0.1220)  loss_mask: 0.2448 (0.2710)  loss_objectness: 0.0163 (0.0354)  loss_rpn_box_reg: 0.0432 (0.0502)  time: 0.8423 (1.5370)  data: 0.0028 (0.6996)  lr: 0.001200  max mem: 24032
DONE (t=24.37s).
Accumulating evaluation results...
DONE (t=0.00s).
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.36096
 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=100 ] = 0.57215
 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=100 ] = 0.39235
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.18979
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.37633
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.46468
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=  1 ] = 0.30309
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets= 10 ] = 0.47190
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.49280
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.29634
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.51886
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.62785
2020-02-11 08:49:01,925 maskrcnn_benchmark.trainer INFO: eta: 6:33:19  iter: 26640  loss: 0.5961 (0.7359)  loss_classifier: 0.1834 (0.2573)  loss_box_reg: 0.0974 (0.1220)  loss_mask: 0.2452 (0.2709)  loss_objectness: 0.0186 (0.0354)  loss_rpn_box_reg: 0.0380 (0.0502)  time: 0.8437 (1.5364)  data: 0.0030 (0.6990)  lr: 0.001200  max mem: 24032
2020-02-11 08:49:18,681 maskrcnn_benchmark.trainer INFO: eta: 6:32:40  iter: 26660  loss: 0.6073 (0.7358)  loss_classifier: 0.1978 (0.2573)  loss_box_reg: 0.1004 (0.1220)  loss_mask: 0.2356 (0.2709)  loss_objectness: 0.0180 (0.0354)  loss_rpn_box_reg: 0.0338 (0.0502)  time: 0.8389 (1.5359)  data: 0.0030 (0.6985)  lr: 0.001200  max mem: 24032
2020-02-11 08:49:35,775 maskrcnn_benchmark.trainer INFO: eta: 6:32:02  iter: 26680  loss: 0.5640 (0.7357)  loss_classifier: 0.1732 (0.2572)  loss_box_reg: 0.0922 (0.1220)  loss_mask: 0.2339 (0.2709)  loss_objectness: 0.0183 (0.0354)  loss_rpn_box_reg: 0.0401 (0.0502)  time: 0.8558 (1.5354)  data: 0.0028 (0.6980)  lr: 0.001200  max mem: 24032
Loading and preparing results...
resFile is ./inference/coco_2014_val/segm.json
2020-02-11 08:49:52,815 maskrcnn_benchmark.trainer INFO: eta: 6:31:23  iter: 26700  loss: 0.5078 (0.7355)  loss_classifier: 0.1527 (0.2571)  loss_box_reg: 0.0814 (0.1220)  loss_mask: 0.2307 (0.2709)  loss_objectness: 0.0145 (0.0353)  loss_rpn_box_reg: 0.0248 (0.0502)  time: 0.8515 (1.5349)  data: 0.0027 (0.6975)  lr: 0.001200  max mem: 24032
DONE (t=14.48s)
Running per image evaluation...
Evaluate annotation type *segm*
2020-02-11 08:50:09,736 maskrcnn_benchmark.trainer INFO: eta: 6:30:45  iter: 26720  loss: 0.6244 (0.7354)  loss_classifier: 0.2032 (0.2571)  loss_box_reg: 0.1060 (0.1219)  loss_mask: 0.2496 (0.2709)  loss_objectness: 0.0191 (0.0353)  loss_rpn_box_reg: 0.0319 (0.0502)  time: 0.8397 (1.5344)  data: 0.0030 (0.6969)  lr: 0.001200  max mem: 24032
2020-02-11 08:50:26,651 maskrcnn_benchmark.trainer INFO: eta: 6:30:06  iter: 26740  loss: 0.6600 (0.7353)  loss_classifier: 0.2227 (0.2571)  loss_box_reg: 0.1069 (0.1219)  loss_mask: 0.2508 (0.2708)  loss_objectness: 0.0161 (0.0353)  loss_rpn_box_reg: 0.0343 (0.0502)  time: 0.8464 (1.5339)  data: 0.0031 (0.6964)  lr: 0.001200  max mem: 24032
DONE (t=31.33s).
Accumulating evaluation results...
DONE (t=0.00s).
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.32631
 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=100 ] = 0.53990
 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=100 ] = 0.34479
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.13519
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.33913
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.47887
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=  1 ] = 0.28437
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets= 10 ] = 0.43171
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.44897
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.25129
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.47789
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.59970
2020-02-11 08:50:36,276 maskrcnn_benchmark.trainer INFO: bbox mAP: 0.36095885983883563, segm mAP: 0.3263123901866161
:::MLL 1581411036.291 eval_accuracy: {"value": {"accuracy": {"BBOX": 0.36095885983883563, "SEGM": 0.3263123901866161}}, "metadata": {"epoch_num": 31, "file": "tools/train_mlperf.py", "lineno": 99}}
:::MLL 1581411036.292 eval_stop: {"value": null, "metadata": {"epoch_num": 31, "file": "tools/train_mlperf.py", "lineno": 100}}
2020-02-11 08:50:45,515 maskrcnn_benchmark.trainer INFO: eta: 6:29:29  iter: 26760  loss: 0.5563 (0.7352)  loss_classifier: 0.1800 (0.2570)  loss_box_reg: 0.0948 (0.1219)  loss_mask: 0.2449 (0.2708)  loss_objectness: 0.0141 (0.0353)  loss_rpn_box_reg: 0.0330 (0.0502)  time: 0.8384 (1.5334)  data: 0.0029 (0.6959)  lr: 0.001200  max mem: 24032
2020-02-11 08:51:02,392 maskrcnn_benchmark.trainer INFO: eta: 6:28:50  iter: 26780  loss: 0.5665 (0.7351)  loss_classifier: 0.1772 (0.2570)  loss_box_reg: 0.0886 (0.1219)  loss_mask: 0.2322 (0.2708)  loss_objectness: 0.0130 (0.0353)  loss_rpn_box_reg: 0.0309 (0.0502)  time: 0.8425 (1.5329)  data: 0.0029 (0.6954)  lr: 0.001200  max mem: 24032
2020-02-11 08:51:19,404 maskrcnn_benchmark.trainer INFO: eta: 6:28:12  iter: 26800  loss: 0.6018 (0.7350)  loss_classifier: 0.2159 (0.2569)  loss_box_reg: 0.0941 (0.1219)  loss_mask: 0.2382 (0.2708)  loss_objectness: 0.0172 (0.0353)  loss_rpn_box_reg: 0.0470 (0.0502)  time: 0.8497 (1.5324)  data: 0.0029 (0.6949)  lr: 0.001200  max mem: 24032
2020-02-11 08:51:36,348 maskrcnn_benchmark.trainer INFO: eta: 6:27:34  iter: 26820  loss: 0.5394 (0.7349)  loss_classifier: 0.1856 (0.2569)  loss_box_reg: 0.1003 (0.1219)  loss_mask: 0.2377 (0.2707)  loss_objectness: 0.0162 (0.0353)  loss_rpn_box_reg: 0.0319 (0.0502)  time: 0.8468 (1.5319)  data: 0.0030 (0.6944)  lr: 0.001200  max mem: 24032
2020-02-11 08:51:53,208 maskrcnn_benchmark.trainer INFO: eta: 6:26:55  iter: 26840  loss: 0.6241 (0.7348)  loss_classifier: 0.2036 (0.2568)  loss_box_reg: 0.1139 (0.1219)  loss_mask: 0.2467 (0.2707)  loss_objectness: 0.0199 (0.0353)  loss_rpn_box_reg: 0.0381 (0.0501)  time: 0.8430 (1.5314)  data: 0.0031 (0.6938)  lr: 0.001200  max mem: 24032
2020-02-11 08:52:10,095 maskrcnn_benchmark.trainer INFO: eta: 6:26:17  iter: 26860  loss: 0.5777 (0.7347)  loss_classifier: 0.1971 (0.2568)  loss_box_reg: 0.0955 (0.1218)  loss_mask: 0.2355 (0.2707)  loss_objectness: 0.0177 (0.0352)  loss_rpn_box_reg: 0.0306 (0.0501)  time: 0.8449 (1.5309)  data: 0.0028 (0.6933)  lr: 0.001200  max mem: 24032
2020-02-11 08:52:27,129 maskrcnn_benchmark.trainer INFO: eta: 6:25:39  iter: 26880  loss: 0.5694 (0.7346)  loss_classifier: 0.1858 (0.2567)  loss_box_reg: 0.0936 (0.1218)  loss_mask: 0.2411 (0.2707)  loss_objectness: 0.0182 (0.0352)  loss_rpn_box_reg: 0.0406 (0.0501)  time: 0.8448 (1.5304)  data: 0.0030 (0.6928)  lr: 0.001200  max mem: 24032
2020-02-11 08:52:44,066 maskrcnn_benchmark.trainer INFO: eta: 6:25:00  iter: 26900  loss: 0.5827 (0.7345)  loss_classifier: 0.2023 (0.2567)  loss_box_reg: 0.1059 (0.1218)  loss_mask: 0.2413 (0.2707)  loss_objectness: 0.0176 (0.0352)  loss_rpn_box_reg: 0.0312 (0.0501)  time: 0.8499 (1.5299)  data: 0.0030 (0.6923)  lr: 0.001200  max mem: 24032
2020-02-11 08:53:01,030 maskrcnn_benchmark.trainer INFO: eta: 6:24:22  iter: 26920  loss: 0.5843 (0.7344)  loss_classifier: 0.1834 (0.2566)  loss_box_reg: 0.1023 (0.1218)  loss_mask: 0.2608 (0.2706)  loss_objectness: 0.0175 (0.0352)  loss_rpn_box_reg: 0.0468 (0.0501)  time: 0.8443 (1.5293)  data: 0.0030 (0.6918)  lr: 0.001200  max mem: 24032
2020-02-11 08:53:17,981 maskrcnn_benchmark.trainer INFO: eta: 6:23:44  iter: 26940  loss: 0.5795 (0.7343)  loss_classifier: 0.1883 (0.2566)  loss_box_reg: 0.0925 (0.1218)  loss_mask: 0.2394 (0.2706)  loss_objectness: 0.0200 (0.0352)  loss_rpn_box_reg: 0.0405 (0.0501)  time: 0.8499 (1.5288)  data: 0.0030 (0.6913)  lr: 0.001200  max mem: 24032
2020-02-11 08:53:34,825 maskrcnn_benchmark.trainer INFO: eta: 6:23:06  iter: 26960  loss: 0.5764 (0.7342)  loss_classifier: 0.1932 (0.2566)  loss_box_reg: 0.1026 (0.1218)  loss_mask: 0.2389 (0.2706)  loss_objectness: 0.0165 (0.0352)  loss_rpn_box_reg: 0.0371 (0.0501)  time: 0.8431 (1.5283)  data: 0.0030 (0.6908)  lr: 0.001200  max mem: 24032
2020-02-11 08:53:51,621 maskrcnn_benchmark.trainer INFO: eta: 6:22:27  iter: 26980  loss: 0.5853 (0.7341)  loss_classifier: 0.1800 (0.2565)  loss_box_reg: 0.0910 (0.1217)  loss_mask: 0.2419 (0.2706)  loss_objectness: 0.0201 (0.0352)  loss_rpn_box_reg: 0.0324 (0.0501)  time: 0.8364 (1.5278)  data: 0.0029 (0.6903)  lr: 0.001200  max mem: 24032
2020-02-11 08:54:08,590 maskrcnn_benchmark.trainer INFO: eta: 6:21:49  iter: 27000  loss: 0.5767 (0.7340)  loss_classifier: 0.1874 (0.2565)  loss_box_reg: 0.0983 (0.1217)  loss_mask: 0.2518 (0.2706)  loss_objectness: 0.0147 (0.0352)  loss_rpn_box_reg: 0.0345 (0.0501)  time: 0.8472 (1.5273)  data: 0.0030 (0.6897)  lr: 0.001200  max mem: 24032
2020-02-11 08:54:25,433 maskrcnn_benchmark.trainer INFO: eta: 6:21:11  iter: 27020  loss: 0.5661 (0.7339)  loss_classifier: 0.1730 (0.2564)  loss_box_reg: 0.0955 (0.1217)  loss_mask: 0.2394 (0.2705)  loss_objectness: 0.0206 (0.0351)  loss_rpn_box_reg: 0.0351 (0.0501)  time: 0.8393 (1.5268)  data: 0.0031 (0.6892)  lr: 0.001200  max mem: 24032
2020-02-11 08:54:42,447 maskrcnn_benchmark.trainer INFO: eta: 6:20:33  iter: 27040  loss: 0.5575 (0.7338)  loss_classifier: 0.1889 (0.2564)  loss_box_reg: 0.0940 (0.1217)  loss_mask: 0.2345 (0.2705)  loss_objectness: 0.0184 (0.0351)  loss_rpn_box_reg: 0.0327 (0.0501)  time: 0.8519 (1.5263)  data: 0.0030 (0.6887)  lr: 0.001200  max mem: 24032
2020-02-11 08:54:59,333 maskrcnn_benchmark.trainer INFO: eta: 6:19:55  iter: 27060  loss: 0.5181 (0.7337)  loss_classifier: 0.1654 (0.2563)  loss_box_reg: 0.0827 (0.1217)  loss_mask: 0.2278 (0.2705)  loss_objectness: 0.0127 (0.0351)  loss_rpn_box_reg: 0.0259 (0.0501)  time: 0.8391 (1.5258)  data: 0.0029 (0.6882)  lr: 0.001200  max mem: 24032
2020-02-11 08:55:16,346 maskrcnn_benchmark.trainer INFO: eta: 6:19:17  iter: 27080  loss: 0.6185 (0.7336)  loss_classifier: 0.2126 (0.2563)  loss_box_reg: 0.1061 (0.1217)  loss_mask: 0.2510 (0.2705)  loss_objectness: 0.0174 (0.0351)  loss_rpn_box_reg: 0.0325 (0.0501)  time: 0.8466 (1.5253)  data: 0.0030 (0.6877)  lr: 0.001200  max mem: 24032
2020-02-11 08:55:33,372 maskrcnn_benchmark.trainer INFO: eta: 6:18:39  iter: 27100  loss: 0.5992 (0.7335)  loss_classifier: 0.1963 (0.2562)  loss_box_reg: 0.0975 (0.1216)  loss_mask: 0.2430 (0.2704)  loss_objectness: 0.0180 (0.0351)  loss_rpn_box_reg: 0.0376 (0.0500)  time: 0.8452 (1.5248)  data: 0.0030 (0.6872)  lr: 0.001200  max mem: 24032
2020-02-11 08:55:50,382 maskrcnn_benchmark.trainer INFO: eta: 6:18:01  iter: 27120  loss: 0.5871 (0.7334)  loss_classifier: 0.1868 (0.2562)  loss_box_reg: 0.0967 (0.1216)  loss_mask: 0.2462 (0.2704)  loss_objectness: 0.0171 (0.0351)  loss_rpn_box_reg: 0.0356 (0.0500)  time: 0.8503 (1.5243)  data: 0.0030 (0.6867)  lr: 0.001200  max mem: 24032
2020-02-11 08:56:07,193 maskrcnn_benchmark.trainer INFO: eta: 6:17:23  iter: 27140  loss: 0.6032 (0.7333)  loss_classifier: 0.1881 (0.2561)  loss_box_reg: 0.0986 (0.1216)  loss_mask: 0.2478 (0.2704)  loss_objectness: 0.0176 (0.0351)  loss_rpn_box_reg: 0.0351 (0.0500)  time: 0.8407 (1.5238)  data: 0.0029 (0.6862)  lr: 0.001200  max mem: 24032
2020-02-11 08:56:23,994 maskrcnn_benchmark.trainer INFO: eta: 6:16:45  iter: 27160  loss: 0.5797 (0.7332)  loss_classifier: 0.1871 (0.2561)  loss_box_reg: 0.0901 (0.1216)  loss_mask: 0.2493 (0.2704)  loss_objectness: 0.0188 (0.0351)  loss_rpn_box_reg: 0.0387 (0.0500)  time: 0.8392 (1.5233)  data: 0.0029 (0.6857)  lr: 0.001200  max mem: 24032
2020-02-11 08:56:40,909 maskrcnn_benchmark.trainer INFO: eta: 6:16:07  iter: 27180  loss: 0.5322 (0.7331)  loss_classifier: 0.1706 (0.2561)  loss_box_reg: 0.0816 (0.1216)  loss_mask: 0.2426 (0.2704)  loss_objectness: 0.0159 (0.0351)  loss_rpn_box_reg: 0.0259 (0.0500)  time: 0.8439 (1.5228)  data: 0.0029 (0.6852)  lr: 0.001200  max mem: 24032
2020-02-11 08:56:57,850 maskrcnn_benchmark.trainer INFO: eta: 6:15:30  iter: 27200  loss: 0.5701 (0.7330)  loss_classifier: 0.1897 (0.2560)  loss_box_reg: 0.0981 (0.1216)  loss_mask: 0.2329 (0.2703)  loss_objectness: 0.0164 (0.0350)  loss_rpn_box_reg: 0.0292 (0.0500)  time: 0.8497 (1.5223)  data: 0.0028 (0.6847)  lr: 0.001200  max mem: 24032
2020-02-11 08:57:14,799 maskrcnn_benchmark.trainer INFO: eta: 6:14:52  iter: 27220  loss: 0.6781 (0.7329)  loss_classifier: 0.2109 (0.2560)  loss_box_reg: 0.1096 (0.1216)  loss_mask: 0.2562 (0.2703)  loss_objectness: 0.0184 (0.0350)  loss_rpn_box_reg: 0.0523 (0.0500)  time: 0.8422 (1.5218)  data: 0.0030 (0.6842)  lr: 0.001200  max mem: 24032
2020-02-11 08:57:31,681 maskrcnn_benchmark.trainer INFO: eta: 6:14:14  iter: 27240  loss: 0.5684 (0.7328)  loss_classifier: 0.1901 (0.2559)  loss_box_reg: 0.0875 (0.1215)  loss_mask: 0.2438 (0.2703)  loss_objectness: 0.0154 (0.0350)  loss_rpn_box_reg: 0.0411 (0.0500)  time: 0.8421 (1.5213)  data: 0.0029 (0.6837)  lr: 0.001200  max mem: 24032
2020-02-11 08:57:48,472 maskrcnn_benchmark.trainer INFO: eta: 6:13:36  iter: 27260  loss: 0.5741 (0.7327)  loss_classifier: 0.1833 (0.2559)  loss_box_reg: 0.0980 (0.1215)  loss_mask: 0.2496 (0.2703)  loss_objectness: 0.0189 (0.0350)  loss_rpn_box_reg: 0.0311 (0.0500)  time: 0.8384 (1.5208)  data: 0.0029 (0.6832)  lr: 0.001200  max mem: 24032
2020-02-11 08:58:05,446 maskrcnn_benchmark.trainer INFO: eta: 6:12:59  iter: 27280  loss: 0.6013 (0.7326)  loss_classifier: 0.1995 (0.2559)  loss_box_reg: 0.1060 (0.1215)  loss_mask: 0.2376 (0.2703)  loss_objectness: 0.0194 (0.0350)  loss_rpn_box_reg: 0.0380 (0.0500)  time: 0.8458 (1.5203)  data: 0.0029 (0.6827)  lr: 0.001200  max mem: 24032
2020-02-11 08:58:22,401 maskrcnn_benchmark.trainer INFO: eta: 6:12:21  iter: 27300  loss: 0.6179 (0.7325)  loss_classifier: 0.2064 (0.2558)  loss_box_reg: 0.1061 (0.1215)  loss_mask: 0.2301 (0.2702)  loss_objectness: 0.0215 (0.0350)  loss_rpn_box_reg: 0.0311 (0.0500)  time: 0.8476 (1.5198)  data: 0.0031 (0.6822)  lr: 0.001200  max mem: 24032
2020-02-11 08:58:39,381 maskrcnn_benchmark.trainer INFO: eta: 6:11:43  iter: 27320  loss: 0.6274 (0.7325)  loss_classifier: 0.2109 (0.2558)  loss_box_reg: 0.1124 (0.1215)  loss_mask: 0.2385 (0.2702)  loss_objectness: 0.0201 (0.0350)  loss_rpn_box_reg: 0.0409 (0.0500)  time: 0.8471 (1.5193)  data: 0.0032 (0.6817)  lr: 0.001200  max mem: 24032
2020-02-11 08:58:56,276 maskrcnn_benchmark.trainer INFO: eta: 6:11:06  iter: 27340  loss: 0.5888 (0.7324)  loss_classifier: 0.1992 (0.2557)  loss_box_reg: 0.1015 (0.1215)  loss_mask: 0.2433 (0.2702)  loss_objectness: 0.0178 (0.0350)  loss_rpn_box_reg: 0.0343 (0.0500)  time: 0.8429 (1.5188)  data: 0.0031 (0.6812)  lr: 0.001200  max mem: 24032
2020-02-11 08:59:13,225 maskrcnn_benchmark.trainer INFO: eta: 6:10:28  iter: 27360  loss: 0.6102 (0.7323)  loss_classifier: 0.1957 (0.2557)  loss_box_reg: 0.0970 (0.1215)  loss_mask: 0.2360 (0.2702)  loss_objectness: 0.0175 (0.0350)  loss_rpn_box_reg: 0.0348 (0.0500)  time: 0.8513 (1.5184)  data: 0.0029 (0.6807)  lr: 0.001200  max mem: 24032
2020-02-11 08:59:30,065 maskrcnn_benchmark.trainer INFO: eta: 6:09:51  iter: 27380  loss: 0.5961 (0.7322)  loss_classifier: 0.1915 (0.2557)  loss_box_reg: 0.1030 (0.1215)  loss_mask: 0.2367 (0.2702)  loss_objectness: 0.0168 (0.0349)  loss_rpn_box_reg: 0.0319 (0.0500)  time: 0.8407 (1.5179)  data: 0.0029 (0.6802)  lr: 0.001200  max mem: 24032
:::MLL 1581411579.879 epoch_stop: {"value": null, "metadata": {"epoch_num": 32, "file": "tools/train_mlperf.py", "lineno": 75}}
:::MLL 1581411579.879 block_stop: {"value": null, "metadata": {"first_epoch_num": 32, "file": "tools/train_mlperf.py", "lineno": 76}}
:::MLL 1581411579.880 eval_start: {"value": null, "metadata": {"epoch_num": 32, "file": "tools/train_mlperf.py", "lineno": 77}}
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
2020-02-11 08:59:40,460 maskrcnn_benchmark.data.build WARNING: When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
Done (t=3.86s)
creating index...
Done (t=4.07s)
creating index...
Done (t=4.02s)
creating index...
Done (t=3.89s)
creating index...
Done (t=3.98s)
creating index...
index created!
Done (t=4.00s)
creating index...
Done (t=3.94s)
creating index...
Done (t=3.98s)
creating index...
  0%|                                                  | 0/2532 [00:00<?, ?it/s]index created!
index created!
index created!
index created!
index created!
2020-02-11 08:59:44,904 maskrcnn_benchmark.inference INFO: Start evaluation on coco_2014_val dataset(40504 images).
index created!
index created!
100%|███████████████████████████████████████| 2532/2532 [03:44<00:00, 11.28it/s]
 99%|██████████████████████████████████████▍| 2498/2532 [03:46<00:03, 11.08it/s]
100%|███████████████████████████████████████| 2532/2532 [03:46<00:00, 11.17it/s]
 99%|██████████████████████████████████████▋| 2508/2532 [03:47<00:02, 11.16it/s]

 99%|██████████████████████████████████████▋| 2512/2532 [03:47<00:01, 11.52it/s]
100%|███████████████████████████████████████| 2532/2532 [03:49<00:00, 11.02it/s]

2020-02-11 09:03:35,649 maskrcnn_benchmark.inference INFO: Total inference time: 0:03:50.744315 (0.04557462282951185 s / img per device, on 8 devices)
2020-02-11 09:03:36,669 maskrcnn_benchmark.inference INFO: Preparing results for COCO format
2020-02-11 09:03:36,670 maskrcnn_benchmark.inference INFO: Preparing bbox results
2020-02-11 09:03:38,177 maskrcnn_benchmark.inference INFO: Preparing segm results
:::MLL 1581412055.793 block_start: {"value": null, "metadata": {"first_epoch_num": 33, "epoch_count": 1, "file": "tools/train_mlperf.py", "lineno": 134}}
:::MLL 1581412055.795 epoch_start: {"value": null, "metadata": {"epoch_num": 33, "file": "tools/train_mlperf.py", "lineno": 135}}
2020-02-11 09:07:42,303 maskrcnn_benchmark.trainer INFO: eta: 6:13:26  iter: 27400  loss: 0.5716 (0.7320)  loss_classifier: 0.1804 (0.2556)  loss_box_reg: 0.0901 (0.1214)  loss_mask: 0.2325 (0.2701)  loss_objectness: 0.0175 (0.0349)  loss_rpn_box_reg: 0.0388 (0.0499)  time: 0.8441 (1.5347)  data: 0.0030 (0.6971)  lr: 0.001200  max mem: 24032
Evaluating predictions
creating index...
GT annotations already exist!
2020-02-11 09:07:59,180 maskrcnn_benchmark.trainer INFO: eta: 6:12:48  iter: 27420  loss: 0.5821 (0.7319)  loss_classifier: 0.1849 (0.2555)  loss_box_reg: 0.0977 (0.1214)  loss_mask: 0.2364 (0.2701)  loss_objectness: 0.0161 (0.0349)  loss_rpn_box_reg: 0.0287 (0.0499)  time: 0.8441 (1.5342)  data: 0.0028 (0.6966)  lr: 0.001200  max mem: 24032
2020-02-11 09:08:15,977 maskrcnn_benchmark.trainer INFO: eta: 6:12:10  iter: 27440  loss: 0.5509 (0.7318)  loss_classifier: 0.1784 (0.2555)  loss_box_reg: 0.0903 (0.1214)  loss_mask: 0.2353 (0.2701)  loss_objectness: 0.0146 (0.0349)  loss_rpn_box_reg: 0.0267 (0.0499)  time: 0.8350 (1.5337)  data: 0.0028 (0.6961)  lr: 0.001200  max mem: 24032
Loading and preparing results...
resFile is ./inference/coco_2014_val/bbox.json
2020-02-11 09:08:32,797 maskrcnn_benchmark.trainer INFO: eta: 6:11:32  iter: 27460  loss: 0.5834 (0.7317)  loss_classifier: 0.1870 (0.2555)  loss_box_reg: 0.0978 (0.1214)  loss_mask: 0.2366 (0.2701)  loss_objectness: 0.0174 (0.0349)  loss_rpn_box_reg: 0.0351 (0.0499)  time: 0.8408 (1.5332)  data: 0.0028 (0.6956)  lr: 0.001200  max mem: 24032
DONE (t=6.26s)
Running per image evaluation...
Evaluate annotation type *bbox*
2020-02-11 09:08:49,794 maskrcnn_benchmark.trainer INFO: eta: 6:10:54  iter: 27480  loss: 0.5839 (0.7316)  loss_classifier: 0.1909 (0.2554)  loss_box_reg: 0.0994 (0.1214)  loss_mask: 0.2440 (0.2700)  loss_objectness: 0.0140 (0.0349)  loss_rpn_box_reg: 0.0376 (0.0499)  time: 0.8448 (1.5327)  data: 0.0029 (0.6951)  lr: 0.001200  max mem: 24032
DONE (t=24.17s).
Accumulating evaluation results...
DONE (t=0.00s).
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.36076
 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=100 ] = 0.57207
 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=100 ] = 0.39195
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.18862
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.37615
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.46558
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=  1 ] = 0.30300
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets= 10 ] = 0.47186
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.49304
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.29430
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.51881
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.63098
2020-02-11 09:09:06,728 maskrcnn_benchmark.trainer INFO: eta: 6:10:16  iter: 27500  loss: 0.5610 (0.7315)  loss_classifier: 0.1805 (0.2554)  loss_box_reg: 0.0959 (0.1214)  loss_mask: 0.2348 (0.2700)  loss_objectness: 0.0143 (0.0349)  loss_rpn_box_reg: 0.0327 (0.0499)  time: 0.8459 (1.5322)  data: 0.0029 (0.6946)  lr: 0.001200  max mem: 24032
2020-02-11 09:09:23,590 maskrcnn_benchmark.trainer INFO: eta: 6:09:39  iter: 27520  loss: 0.5649 (0.7314)  loss_classifier: 0.1799 (0.2553)  loss_box_reg: 0.1004 (0.1213)  loss_mask: 0.2350 (0.2700)  loss_objectness: 0.0189 (0.0349)  loss_rpn_box_reg: 0.0378 (0.0499)  time: 0.8393 (1.5317)  data: 0.0028 (0.6941)  lr: 0.001200  max mem: 24032
2020-02-11 09:09:40,462 maskrcnn_benchmark.trainer INFO: eta: 6:09:01  iter: 27540  loss: 0.5394 (0.7313)  loss_classifier: 0.1646 (0.2553)  loss_box_reg: 0.0953 (0.1213)  loss_mask: 0.2326 (0.2700)  loss_objectness: 0.0135 (0.0348)  loss_rpn_box_reg: 0.0327 (0.0499)  time: 0.8444 (1.5312)  data: 0.0029 (0.6936)  lr: 0.001200  max mem: 24032
Loading and preparing results...
resFile is ./inference/coco_2014_val/segm.json
2020-02-11 09:09:57,340 maskrcnn_benchmark.trainer INFO: eta: 6:08:23  iter: 27560  loss: 0.5722 (0.7312)  loss_classifier: 0.1868 (0.2552)  loss_box_reg: 0.0891 (0.1213)  loss_mask: 0.2344 (0.2700)  loss_objectness: 0.0168 (0.0348)  loss_rpn_box_reg: 0.0280 (0.0499)  time: 0.8445 (1.5307)  data: 0.0029 (0.6931)  lr: 0.001200  max mem: 24032
DONE (t=14.68s)
Running per image evaluation...
Evaluate annotation type *segm*
2020-02-11 09:10:14,058 maskrcnn_benchmark.trainer INFO: eta: 6:07:45  iter: 27580  loss: 0.5425 (0.7310)  loss_classifier: 0.1750 (0.2552)  loss_box_reg: 0.0861 (0.1213)  loss_mask: 0.2370 (0.2699)  loss_objectness: 0.0159 (0.0348)  loss_rpn_box_reg: 0.0281 (0.0499)  time: 0.8335 (1.5302)  data: 0.0029 (0.6926)  lr: 0.001200  max mem: 24032
2020-02-11 09:10:30,939 maskrcnn_benchmark.trainer INFO: eta: 6:07:07  iter: 27600  loss: 0.6716 (0.7310)  loss_classifier: 0.2244 (0.2551)  loss_box_reg: 0.1168 (0.1213)  loss_mask: 0.2472 (0.2699)  loss_objectness: 0.0197 (0.0348)  loss_rpn_box_reg: 0.0453 (0.0499)  time: 0.8459 (1.5297)  data: 0.0029 (0.6921)  lr: 0.001200  max mem: 24032
DONE (t=32.18s).
Accumulating evaluation results...
DONE (t=0.00s).
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.32655
 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=100 ] = 0.54065
 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=100 ] = 0.34467
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.13494
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.33910
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.47970
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=  1 ] = 0.28443
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets= 10 ] = 0.43211
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.44966
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.25042
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.47883
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.60273
2020-02-11 09:10:41,799 maskrcnn_benchmark.trainer INFO: bbox mAP: 0.36076235534245626, segm mAP: 0.326552946484023
:::MLL 1581412241.801 eval_accuracy: {"value": {"accuracy": {"BBOX": 0.36076235534245626, "SEGM": 0.326552946484023}}, "metadata": {"epoch_num": 32, "file": "tools/train_mlperf.py", "lineno": 99}}
:::MLL 1581412241.801 eval_stop: {"value": null, "metadata": {"epoch_num": 32, "file": "tools/train_mlperf.py", "lineno": 100}}
2020-02-11 09:10:50,192 maskrcnn_benchmark.trainer INFO: eta: 6:06:31  iter: 27620  loss: 0.5858 (0.7309)  loss_classifier: 0.1727 (0.2551)  loss_box_reg: 0.0946 (0.1212)  loss_mask: 0.2426 (0.2699)  loss_objectness: 0.0186 (0.0348)  loss_rpn_box_reg: 0.0319 (0.0499)  time: 0.8424 (1.5293)  data: 0.0029 (0.6916)  lr: 0.001200  max mem: 24032
2020-02-11 09:11:07,102 maskrcnn_benchmark.trainer INFO: eta: 6:05:53  iter: 27640  loss: 0.5878 (0.7308)  loss_classifier: 0.1859 (0.2550)  loss_box_reg: 0.1029 (0.1212)  loss_mask: 0.2374 (0.2699)  loss_objectness: 0.0191 (0.0348)  loss_rpn_box_reg: 0.0288 (0.0499)  time: 0.8449 (1.5288)  data: 0.0029 (0.6911)  lr: 0.001200  max mem: 24032
2020-02-11 09:11:23,978 maskrcnn_benchmark.trainer INFO: eta: 6:05:15  iter: 27660  loss: 0.5822 (0.7307)  loss_classifier: 0.1799 (0.2550)  loss_box_reg: 0.0956 (0.1212)  loss_mask: 0.2394 (0.2698)  loss_objectness: 0.0192 (0.0348)  loss_rpn_box_reg: 0.0365 (0.0498)  time: 0.8426 (1.5283)  data: 0.0030 (0.6906)  lr: 0.001200  max mem: 24032
2020-02-11 09:11:40,839 maskrcnn_benchmark.trainer INFO: eta: 6:04:38  iter: 27680  loss: 0.6443 (0.7306)  loss_classifier: 0.2108 (0.2550)  loss_box_reg: 0.1162 (0.1212)  loss_mask: 0.2463 (0.2698)  loss_objectness: 0.0190 (0.0348)  loss_rpn_box_reg: 0.0395 (0.0498)  time: 0.8435 (1.5278)  data: 0.0030 (0.6901)  lr: 0.001200  max mem: 24032
2020-02-11 09:11:57,715 maskrcnn_benchmark.trainer INFO: eta: 6:04:00  iter: 27700  loss: 0.5546 (0.7305)  loss_classifier: 0.1800 (0.2549)  loss_box_reg: 0.0952 (0.1212)  loss_mask: 0.2366 (0.2698)  loss_objectness: 0.0134 (0.0347)  loss_rpn_box_reg: 0.0260 (0.0498)  time: 0.8447 (1.5273)  data: 0.0029 (0.6896)  lr: 0.001200  max mem: 24032
2020-02-11 09:12:14,656 maskrcnn_benchmark.trainer INFO: eta: 6:03:23  iter: 27720  loss: 0.5674 (0.7304)  loss_classifier: 0.1869 (0.2549)  loss_box_reg: 0.0914 (0.1212)  loss_mask: 0.2402 (0.2698)  loss_objectness: 0.0172 (0.0347)  loss_rpn_box_reg: 0.0327 (0.0498)  time: 0.8479 (1.5268)  data: 0.0031 (0.6891)  lr: 0.001200  max mem: 24032
2020-02-11 09:12:31,578 maskrcnn_benchmark.trainer INFO: eta: 6:02:45  iter: 27740  loss: 0.5767 (0.7303)  loss_classifier: 0.1721 (0.2548)  loss_box_reg: 0.0957 (0.1212)  loss_mask: 0.2400 (0.2698)  loss_objectness: 0.0165 (0.0347)  loss_rpn_box_reg: 0.0326 (0.0498)  time: 0.8474 (1.5263)  data: 0.0029 (0.6886)  lr: 0.001200  max mem: 24032
2020-02-11 09:12:48,387 maskrcnn_benchmark.trainer INFO: eta: 6:02:07  iter: 27760  loss: 0.6033 (0.7302)  loss_classifier: 0.1877 (0.2548)  loss_box_reg: 0.1058 (0.1212)  loss_mask: 0.2391 (0.2698)  loss_objectness: 0.0191 (0.0347)  loss_rpn_box_reg: 0.0368 (0.0498)  time: 0.8427 (1.5258)  data: 0.0030 (0.6881)  lr: 0.001200  max mem: 24032
2020-02-11 09:13:05,343 maskrcnn_benchmark.trainer INFO: eta: 6:01:30  iter: 27780  loss: 0.5882 (0.7301)  loss_classifier: 0.1817 (0.2547)  loss_box_reg: 0.0961 (0.1211)  loss_mask: 0.2376 (0.2697)  loss_objectness: 0.0169 (0.0347)  loss_rpn_box_reg: 0.0351 (0.0498)  time: 0.8512 (1.5254)  data: 0.0030 (0.6876)  lr: 0.001200  max mem: 24032
2020-02-11 09:13:22,229 maskrcnn_benchmark.trainer INFO: eta: 6:00:53  iter: 27800  loss: 0.6114 (0.7300)  loss_classifier: 0.2010 (0.2547)  loss_box_reg: 0.0999 (0.1211)  loss_mask: 0.2456 (0.2697)  loss_objectness: 0.0180 (0.0347)  loss_rpn_box_reg: 0.0341 (0.0498)  time: 0.8469 (1.5249)  data: 0.0030 (0.6871)  lr: 0.001200  max mem: 24032
2020-02-11 09:13:39,177 maskrcnn_benchmark.trainer INFO: eta: 6:00:15  iter: 27820  loss: 0.6012 (0.7299)  loss_classifier: 0.1973 (0.2547)  loss_box_reg: 0.1015 (0.1211)  loss_mask: 0.2417 (0.2697)  loss_objectness: 0.0156 (0.0347)  loss_rpn_box_reg: 0.0358 (0.0498)  time: 0.8515 (1.5244)  data: 0.0030 (0.6866)  lr: 0.001200  max mem: 24032
2020-02-11 09:13:56,096 maskrcnn_benchmark.trainer INFO: eta: 5:59:38  iter: 27840  loss: 0.6033 (0.7298)  loss_classifier: 0.2003 (0.2546)  loss_box_reg: 0.1018 (0.1211)  loss_mask: 0.2370 (0.2697)  loss_objectness: 0.0172 (0.0347)  loss_rpn_box_reg: 0.0322 (0.0498)  time: 0.8417 (1.5239)  data: 0.0031 (0.6861)  lr: 0.001200  max mem: 24032
2020-02-11 09:14:13,121 maskrcnn_benchmark.trainer INFO: eta: 5:59:00  iter: 27860  loss: 0.5812 (0.7297)  loss_classifier: 0.1893 (0.2546)  loss_box_reg: 0.0979 (0.1211)  loss_mask: 0.2466 (0.2697)  loss_objectness: 0.0170 (0.0347)  loss_rpn_box_reg: 0.0387 (0.0498)  time: 0.8486 (1.5234)  data: 0.0031 (0.6856)  lr: 0.001200  max mem: 24032
2020-02-11 09:14:30,082 maskrcnn_benchmark.trainer INFO: eta: 5:58:23  iter: 27880  loss: 0.5740 (0.7297)  loss_classifier: 0.1864 (0.2546)  loss_box_reg: 0.0968 (0.1211)  loss_mask: 0.2419 (0.2696)  loss_objectness: 0.0174 (0.0346)  loss_rpn_box_reg: 0.0328 (0.0498)  time: 0.8481 (1.5229)  data: 0.0030 (0.6851)  lr: 0.001200  max mem: 24032
2020-02-11 09:14:46,966 maskrcnn_benchmark.trainer INFO: eta: 5:57:46  iter: 27900  loss: 0.5692 (0.7296)  loss_classifier: 0.1847 (0.2545)  loss_box_reg: 0.0974 (0.1211)  loss_mask: 0.2314 (0.2696)  loss_objectness: 0.0183 (0.0346)  loss_rpn_box_reg: 0.0338 (0.0498)  time: 0.8395 (1.5224)  data: 0.0028 (0.6847)  lr: 0.001200  max mem: 24032
2020-02-11 09:15:03,834 maskrcnn_benchmark.trainer INFO: eta: 5:57:09  iter: 27920  loss: 0.6030 (0.7295)  loss_classifier: 0.2003 (0.2545)  loss_box_reg: 0.1031 (0.1210)  loss_mask: 0.2517 (0.2696)  loss_objectness: 0.0179 (0.0346)  loss_rpn_box_reg: 0.0404 (0.0498)  time: 0.8406 (1.5219)  data: 0.0031 (0.6842)  lr: 0.001200  max mem: 24032
2020-02-11 09:15:20,773 maskrcnn_benchmark.trainer INFO: eta: 5:56:31  iter: 27940  loss: 0.5680 (0.7294)  loss_classifier: 0.1726 (0.2544)  loss_box_reg: 0.0857 (0.1210)  loss_mask: 0.2267 (0.2696)  loss_objectness: 0.0162 (0.0346)  loss_rpn_box_reg: 0.0331 (0.0497)  time: 0.8464 (1.5215)  data: 0.0029 (0.6837)  lr: 0.001200  max mem: 24032
2020-02-11 09:15:37,575 maskrcnn_benchmark.trainer INFO: eta: 5:55:54  iter: 27960  loss: 0.5950 (0.7293)  loss_classifier: 0.1920 (0.2544)  loss_box_reg: 0.0947 (0.1210)  loss_mask: 0.2461 (0.2696)  loss_objectness: 0.0204 (0.0346)  loss_rpn_box_reg: 0.0310 (0.0497)  time: 0.8393 (1.5210)  data: 0.0029 (0.6832)  lr: 0.001200  max mem: 24032
2020-02-11 09:15:54,421 maskrcnn_benchmark.trainer INFO: eta: 5:55:17  iter: 27980  loss: 0.5871 (0.7292)  loss_classifier: 0.1739 (0.2543)  loss_box_reg: 0.0982 (0.1210)  loss_mask: 0.2470 (0.2695)  loss_objectness: 0.0150 (0.0346)  loss_rpn_box_reg: 0.0341 (0.0497)  time: 0.8396 (1.5205)  data: 0.0029 (0.6827)  lr: 0.001200  max mem: 24032
2020-02-11 09:16:11,231 maskrcnn_benchmark.trainer INFO: eta: 5:54:40  iter: 28000  loss: 0.5955 (0.7291)  loss_classifier: 0.2135 (0.2543)  loss_box_reg: 0.1037 (0.1210)  loss_mask: 0.2436 (0.2695)  loss_objectness: 0.0144 (0.0346)  loss_rpn_box_reg: 0.0325 (0.0497)  time: 0.8393 (1.5200)  data: 0.0030 (0.6822)  lr: 0.001200  max mem: 24032
2020-02-11 09:16:28,197 maskrcnn_benchmark.trainer INFO: eta: 5:54:02  iter: 28020  loss: 0.5607 (0.7290)  loss_classifier: 0.1871 (0.2542)  loss_box_reg: 0.0917 (0.1210)  loss_mask: 0.2262 (0.2695)  loss_objectness: 0.0156 (0.0346)  loss_rpn_box_reg: 0.0296 (0.0497)  time: 0.8495 (1.5195)  data: 0.0029 (0.6817)  lr: 0.001200  max mem: 24032
2020-02-11 09:16:45,075 maskrcnn_benchmark.trainer INFO: eta: 5:53:25  iter: 28040  loss: 0.6307 (0.7289)  loss_classifier: 0.1997 (0.2542)  loss_box_reg: 0.1089 (0.1210)  loss_mask: 0.2371 (0.2695)  loss_objectness: 0.0188 (0.0346)  loss_rpn_box_reg: 0.0380 (0.0497)  time: 0.8408 (1.5190)  data: 0.0031 (0.6813)  lr: 0.001200  max mem: 24032
2020-02-11 09:17:02,047 maskrcnn_benchmark.trainer INFO: eta: 5:52:48  iter: 28060  loss: 0.6539 (0.7288)  loss_classifier: 0.2237 (0.2542)  loss_box_reg: 0.1166 (0.1209)  loss_mask: 0.2380 (0.2695)  loss_objectness: 0.0198 (0.0345)  loss_rpn_box_reg: 0.0417 (0.0497)  time: 0.8441 (1.5186)  data: 0.0032 (0.6808)  lr: 0.001200  max mem: 24032
2020-02-11 09:17:19,058 maskrcnn_benchmark.trainer INFO: eta: 5:52:11  iter: 28080  loss: 0.6227 (0.7288)  loss_classifier: 0.2046 (0.2542)  loss_box_reg: 0.1000 (0.1209)  loss_mask: 0.2411 (0.2694)  loss_objectness: 0.0178 (0.0345)  loss_rpn_box_reg: 0.0381 (0.0497)  time: 0.8491 (1.5181)  data: 0.0030 (0.6803)  lr: 0.001200  max mem: 24032
2020-02-11 09:17:35,960 maskrcnn_benchmark.trainer INFO: eta: 5:51:34  iter: 28100  loss: 0.5084 (0.7286)  loss_classifier: 0.1614 (0.2541)  loss_box_reg: 0.0887 (0.1209)  loss_mask: 0.2305 (0.2694)  loss_objectness: 0.0164 (0.0345)  loss_rpn_box_reg: 0.0345 (0.0497)  time: 0.8447 (1.5176)  data: 0.0029 (0.6798)  lr: 0.001200  max mem: 24032
2020-02-11 09:17:52,825 maskrcnn_benchmark.trainer INFO: eta: 5:50:57  iter: 28120  loss: 0.5836 (0.7285)  loss_classifier: 0.1961 (0.2541)  loss_box_reg: 0.0995 (0.1209)  loss_mask: 0.2317 (0.2694)  loss_objectness: 0.0171 (0.0345)  loss_rpn_box_reg: 0.0311 (0.0497)  time: 0.8406 (1.5171)  data: 0.0030 (0.6793)  lr: 0.001200  max mem: 24032
2020-02-11 09:18:09,786 maskrcnn_benchmark.trainer INFO: eta: 5:50:20  iter: 28140  loss: 0.6070 (0.7284)  loss_classifier: 0.2038 (0.2540)  loss_box_reg: 0.0972 (0.1209)  loss_mask: 0.2341 (0.2694)  loss_objectness: 0.0176 (0.0345)  loss_rpn_box_reg: 0.0404 (0.0497)  time: 0.8481 (1.5167)  data: 0.0030 (0.6788)  lr: 0.001200  max mem: 24032
2020-02-11 09:18:26,742 maskrcnn_benchmark.trainer INFO: eta: 5:49:43  iter: 28160  loss: 0.6034 (0.7284)  loss_classifier: 0.1953 (0.2540)  loss_box_reg: 0.0981 (0.1209)  loss_mask: 0.2353 (0.2693)  loss_objectness: 0.0191 (0.0345)  loss_rpn_box_reg: 0.0400 (0.0497)  time: 0.8443 (1.5162)  data: 0.0031 (0.6784)  lr: 0.001200  max mem: 24032
2020-02-11 09:18:43,415 maskrcnn_benchmark.trainer INFO: eta: 5:49:06  iter: 28180  loss: 0.5860 (0.7282)  loss_classifier: 0.1693 (0.2539)  loss_box_reg: 0.0929 (0.1209)  loss_mask: 0.2407 (0.2693)  loss_objectness: 0.0152 (0.0345)  loss_rpn_box_reg: 0.0301 (0.0497)  time: 0.8351 (1.5157)  data: 0.0030 (0.6779)  lr: 0.001200  max mem: 24032
2020-02-11 09:19:00,358 maskrcnn_benchmark.trainer INFO: eta: 5:48:30  iter: 28200  loss: 0.5892 (0.7282)  loss_classifier: 0.1825 (0.2539)  loss_box_reg: 0.1077 (0.1208)  loss_mask: 0.2433 (0.2693)  loss_objectness: 0.0190 (0.0345)  loss_rpn_box_reg: 0.0399 (0.0496)  time: 0.8470 (1.5152)  data: 0.0030 (0.6774)  lr: 0.001200  max mem: 24032
2020-02-11 09:19:17,280 maskrcnn_benchmark.trainer INFO: eta: 5:47:53  iter: 28220  loss: 0.6305 (0.7281)  loss_classifier: 0.2099 (0.2539)  loss_box_reg: 0.1071 (0.1208)  loss_mask: 0.2271 (0.2693)  loss_objectness: 0.0173 (0.0345)  loss_rpn_box_reg: 0.0377 (0.0496)  time: 0.8457 (1.5147)  data: 0.0031 (0.6769)  lr: 0.001200  max mem: 24032
2020-02-11 09:19:34,317 maskrcnn_benchmark.trainer INFO: eta: 5:47:16  iter: 28240  loss: 0.5508 (0.7280)  loss_classifier: 0.1776 (0.2538)  loss_box_reg: 0.0922 (0.1208)  loss_mask: 0.2454 (0.2693)  loss_objectness: 0.0181 (0.0344)  loss_rpn_box_reg: 0.0355 (0.0496)  time: 0.8519 (1.5143)  data: 0.0030 (0.6764)  lr: 0.001200  max mem: 24032
:::MLL 1581412780.640 epoch_stop: {"value": null, "metadata": {"epoch_num": 33, "file": "tools/train_mlperf.py", "lineno": 75}}
:::MLL 1581412780.641 block_stop: {"value": null, "metadata": {"first_epoch_num": 33, "file": "tools/train_mlperf.py", "lineno": 76}}
:::MLL 1581412780.641 eval_start: {"value": null, "metadata": {"epoch_num": 33, "file": "tools/train_mlperf.py", "lineno": 77}}
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
2020-02-11 09:19:41,512 maskrcnn_benchmark.data.build WARNING: When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
Done (t=3.89s)
creating index...
Done (t=3.97s)
creating index...
Done (t=3.94s)
creating index...
Done (t=3.97s)
creating index...
Done (t=3.87s)
creating index...
Done (t=3.87s)
creating index...
Done (t=3.93s)
creating index...
Done (t=3.91s)
creating index...
index created!
index created!
index created!
index created!
index created!
  0%|                                                  | 0/2532 [00:00<?, ?it/s]index created!
index created!
  0%|                                                  | 0/2532 [00:00<?, ?it/s]index created!
  0%|                                                  | 0/2532 [00:00<?, ?it/s]2020-02-11 09:19:45,838 maskrcnn_benchmark.inference INFO: Start evaluation on coco_2014_val dataset(40504 images).
100%|███████████████████████████████████████| 2532/2532 [03:45<00:00, 11.24it/s]
100%|██████████████████████████████████████▊| 2520/2532 [03:45<00:01, 11.07it/s]
 98%|██████████████████████████████████████▍| 2492/2532 [03:46<00:03, 11.81it/s]
100%|███████████████████████████████████████| 2532/2532 [03:47<00:00, 11.14it/s]
100%|██████████████████████████████████████▊| 2521/2532 [03:47<00:00, 11.86it/s]
100%|██████████████████████████████████████▉| 2529/2532 [03:47<00:00, 12.06it/s]
100%|███████████████████████████████████████| 2532/2532 [03:49<00:00, 11.03it/s]

2020-02-11 09:23:36,737 maskrcnn_benchmark.inference INFO: Total inference time: 0:03:50.898734 (0.0456051222307513 s / img per device, on 8 devices)
2020-02-11 09:23:37,760 maskrcnn_benchmark.inference INFO: Preparing results for COCO format
2020-02-11 09:23:37,760 maskrcnn_benchmark.inference INFO: Preparing bbox results
2020-02-11 09:23:39,273 maskrcnn_benchmark.inference INFO: Preparing segm results
:::MLL 1581413248.967 block_start: {"value": null, "metadata": {"first_epoch_num": 34, "epoch_count": 1, "file": "tools/train_mlperf.py", "lineno": 134}}
:::MLL 1581413248.970 epoch_start: {"value": null, "metadata": {"epoch_num": 34, "file": "tools/train_mlperf.py", "lineno": 135}}
Evaluating predictions
creating index...
GT annotations already exist!
2020-02-11 09:27:39,196 maskrcnn_benchmark.trainer INFO: eta: 5:50:27  iter: 28260  loss: 0.5939 (0.7279)  loss_classifier: 0.1919 (0.2538)  loss_box_reg: 0.0828 (0.1208)  loss_mask: 0.2375 (0.2692)  loss_objectness: 0.0159 (0.0344)  loss_rpn_box_reg: 0.0308 (0.0496)  time: 0.8491 (1.5304)  data: 0.0029 (0.6925)  lr: 0.001200  max mem: 24032
2020-02-11 09:27:56,161 maskrcnn_benchmark.trainer INFO: eta: 5:49:49  iter: 28280  loss: 0.6777 (0.7278)  loss_classifier: 0.2284 (0.2538)  loss_box_reg: 0.1141 (0.1208)  loss_mask: 0.2439 (0.2692)  loss_objectness: 0.0191 (0.0344)  loss_rpn_box_reg: 0.0416 (0.0496)  time: 0.8516 (1.5299)  data: 0.0032 (0.6921)  lr: 0.001200  max mem: 24032
2020-02-11 09:28:13,066 maskrcnn_benchmark.trainer INFO: eta: 5:49:12  iter: 28300  loss: 0.5898 (0.7277)  loss_classifier: 0.1884 (0.2537)  loss_box_reg: 0.1018 (0.1208)  loss_mask: 0.2389 (0.2692)  loss_objectness: 0.0182 (0.0344)  loss_rpn_box_reg: 0.0331 (0.0496)  time: 0.8441 (1.5294)  data: 0.0029 (0.6916)  lr: 0.001200  max mem: 24032
Loading and preparing results...
resFile is ./inference/coco_2014_val/bbox.json
DONE (t=6.35s)
Running per image evaluation...
Evaluate annotation type *bbox*
2020-02-11 09:28:30,063 maskrcnn_benchmark.trainer INFO: eta: 5:48:35  iter: 28320  loss: 0.5479 (0.7276)  loss_classifier: 0.1756 (0.2537)  loss_box_reg: 0.0871 (0.1208)  loss_mask: 0.2327 (0.2692)  loss_objectness: 0.0178 (0.0344)  loss_rpn_box_reg: 0.0311 (0.0496)  time: 0.8485 (1.5289)  data: 0.0028 (0.6911)  lr: 0.001200  max mem: 24032
2020-02-11 09:28:46,954 maskrcnn_benchmark.trainer INFO: eta: 5:47:58  iter: 28340  loss: 0.6476 (0.7275)  loss_classifier: 0.2209 (0.2536)  loss_box_reg: 0.1141 (0.1208)  loss_mask: 0.2537 (0.2692)  loss_objectness: 0.0189 (0.0344)  loss_rpn_box_reg: 0.0320 (0.0496)  time: 0.8429 (1.5284)  data: 0.0029 (0.6906)  lr: 0.001200  max mem: 24032
DONE (t=24.21s).
Accumulating evaluation results...
DONE (t=0.00s).
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.36074
 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=100 ] = 0.57156
 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=100 ] = 0.39211
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.18820
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.37613
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.46602
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=  1 ] = 0.30274
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets= 10 ] = 0.47031
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.49119
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.29208
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.51641
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.62999
2020-02-11 09:29:03,990 maskrcnn_benchmark.trainer INFO: eta: 5:47:21  iter: 28360  loss: 0.5766 (0.7275)  loss_classifier: 0.1944 (0.2536)  loss_box_reg: 0.1026 (0.1207)  loss_mask: 0.2439 (0.2692)  loss_objectness: 0.0168 (0.0344)  loss_rpn_box_reg: 0.0369 (0.0496)  time: 0.8516 (1.5280)  data: 0.0029 (0.6901)  lr: 0.001200  max mem: 24032
2020-02-11 09:29:21,172 maskrcnn_benchmark.trainer INFO: eta: 5:46:44  iter: 28380  loss: 0.5936 (0.7274)  loss_classifier: 0.2024 (0.2536)  loss_box_reg: 0.1066 (0.1207)  loss_mask: 0.2338 (0.2691)  loss_objectness: 0.0149 (0.0344)  loss_rpn_box_reg: 0.0315 (0.0496)  time: 0.8447 (1.5275)  data: 0.0029 (0.6896)  lr: 0.001200  max mem: 24032
2020-02-11 09:29:38,088 maskrcnn_benchmark.trainer INFO: eta: 5:46:07  iter: 28400  loss: 0.6104 (0.7273)  loss_classifier: 0.2085 (0.2535)  loss_box_reg: 0.1064 (0.1207)  loss_mask: 0.2362 (0.2691)  loss_objectness: 0.0190 (0.0344)  loss_rpn_box_reg: 0.0312 (0.0496)  time: 0.8398 (1.5270)  data: 0.0029 (0.6891)  lr: 0.001200  max mem: 24032
Loading and preparing results...
resFile is ./inference/coco_2014_val/segm.json
DONE (t=14.07s)
Running per image evaluation...
Evaluate annotation type *segm*
2020-02-11 09:29:54,904 maskrcnn_benchmark.trainer INFO: eta: 5:45:30  iter: 28420  loss: 0.6261 (0.7272)  loss_classifier: 0.2050 (0.2535)  loss_box_reg: 0.0939 (0.1207)  loss_mask: 0.2388 (0.2691)  loss_objectness: 0.0163 (0.0343)  loss_rpn_box_reg: 0.0357 (0.0496)  time: 0.8396 (1.5265)  data: 0.0030 (0.6887)  lr: 0.001200  max mem: 24032
2020-02-11 09:30:11,825 maskrcnn_benchmark.trainer INFO: eta: 5:44:53  iter: 28440  loss: 0.6079 (0.7271)  loss_classifier: 0.1777 (0.2534)  loss_box_reg: 0.1026 (0.1207)  loss_mask: 0.2523 (0.2691)  loss_objectness: 0.0155 (0.0343)  loss_rpn_box_reg: 0.0324 (0.0496)  time: 0.8429 (1.5260)  data: 0.0029 (0.6882)  lr: 0.001200  max mem: 24032
DONE (t=31.02s).
Accumulating evaluation results...
DONE (t=0.00s).
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.32654
 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=100 ] = 0.53958
 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=100 ] = 0.34495
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.13476
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.33896
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.47986
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=  1 ] = 0.28436
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets= 10 ] = 0.43087
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.44809
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.24869
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.47663
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.60191
2020-02-11 09:30:29,367 maskrcnn_benchmark.trainer INFO: bbox mAP: 0.36074029079037856, segm mAP: 0.326543310477552
:::MLL 1581413429.368 eval_accuracy: {"value": {"accuracy": {"BBOX": 0.36074029079037856, "SEGM": 0.326543310477552}}, "metadata": {"epoch_num": 33, "file": "tools/train_mlperf.py", "lineno": 99}}
:::MLL 1581413429.369 eval_stop: {"value": null, "metadata": {"epoch_num": 33, "file": "tools/train_mlperf.py", "lineno": 100}}
2020-02-11 09:30:31,055 maskrcnn_benchmark.trainer INFO: eta: 5:44:17  iter: 28460  loss: 0.5478 (0.7270)  loss_classifier: 0.1711 (0.2534)  loss_box_reg: 0.0890 (0.1207)  loss_mask: 0.2338 (0.2691)  loss_objectness: 0.0159 (0.0343)  loss_rpn_box_reg: 0.0307 (0.0495)  time: 0.8451 (1.5256)  data: 0.0029 (0.6877)  lr: 0.001200  max mem: 24032
2020-02-11 09:30:47,956 maskrcnn_benchmark.trainer INFO: eta: 5:43:40  iter: 28480  loss: 0.5979 (0.7269)  loss_classifier: 0.1976 (0.2534)  loss_box_reg: 0.1049 (0.1207)  loss_mask: 0.2372 (0.2690)  loss_objectness: 0.0164 (0.0343)  loss_rpn_box_reg: 0.0350 (0.0495)  time: 0.8431 (1.5252)  data: 0.0029 (0.6872)  lr: 0.001200  max mem: 24032
2020-02-11 09:31:04,754 maskrcnn_benchmark.trainer INFO: eta: 5:43:03  iter: 28500  loss: 0.6066 (0.7268)  loss_classifier: 0.1654 (0.2533)  loss_box_reg: 0.0934 (0.1206)  loss_mask: 0.2427 (0.2690)  loss_objectness: 0.0164 (0.0343)  loss_rpn_box_reg: 0.0347 (0.0495)  time: 0.8381 (1.5247)  data: 0.0028 (0.6867)  lr: 0.001200  max mem: 24032
2020-02-11 09:31:21,757 maskrcnn_benchmark.trainer INFO: eta: 5:42:26  iter: 28520  loss: 0.5931 (0.7267)  loss_classifier: 0.1925 (0.2533)  loss_box_reg: 0.0985 (0.1206)  loss_mask: 0.2341 (0.2690)  loss_objectness: 0.0199 (0.0343)  loss_rpn_box_reg: 0.0356 (0.0495)  time: 0.8512 (1.5242)  data: 0.0029 (0.6863)  lr: 0.001200  max mem: 24032
2020-02-11 09:31:38,560 maskrcnn_benchmark.trainer INFO: eta: 5:41:49  iter: 28540  loss: 0.5684 (0.7266)  loss_classifier: 0.1764 (0.2532)  loss_box_reg: 0.0870 (0.1206)  loss_mask: 0.2423 (0.2690)  loss_objectness: 0.0159 (0.0343)  loss_rpn_box_reg: 0.0308 (0.0495)  time: 0.8351 (1.5237)  data: 0.0029 (0.6858)  lr: 0.001200  max mem: 24032
2020-02-11 09:31:55,533 maskrcnn_benchmark.trainer INFO: eta: 5:41:12  iter: 28560  loss: 0.5704 (0.7265)  loss_classifier: 0.1979 (0.2532)  loss_box_reg: 0.0958 (0.1206)  loss_mask: 0.2322 (0.2690)  loss_objectness: 0.0180 (0.0343)  loss_rpn_box_reg: 0.0292 (0.0495)  time: 0.8499 (1.5233)  data: 0.0029 (0.6853)  lr: 0.001200  max mem: 24032
2020-02-11 09:32:12,549 maskrcnn_benchmark.trainer INFO: eta: 5:40:35  iter: 28580  loss: 0.6833 (0.7265)  loss_classifier: 0.2405 (0.2532)  loss_box_reg: 0.1126 (0.1206)  loss_mask: 0.2527 (0.2689)  loss_objectness: 0.0217 (0.0343)  loss_rpn_box_reg: 0.0394 (0.0495)  time: 0.8443 (1.5228)  data: 0.0031 (0.6848)  lr: 0.001200  max mem: 24032
2020-02-11 09:32:29,485 maskrcnn_benchmark.trainer INFO: eta: 5:39:59  iter: 28600  loss: 0.5960 (0.7264)  loss_classifier: 0.2150 (0.2531)  loss_box_reg: 0.1071 (0.1206)  loss_mask: 0.2423 (0.2689)  loss_objectness: 0.0148 (0.0342)  loss_rpn_box_reg: 0.0402 (0.0495)  time: 0.8443 (1.5223)  data: 0.0029 (0.6843)  lr: 0.001200  max mem: 24032
2020-02-11 09:32:46,440 maskrcnn_benchmark.trainer INFO: eta: 5:39:22  iter: 28620  loss: 0.5579 (0.7263)  loss_classifier: 0.1721 (0.2531)  loss_box_reg: 0.0930 (0.1206)  loss_mask: 0.2399 (0.2689)  loss_objectness: 0.0161 (0.0342)  loss_rpn_box_reg: 0.0284 (0.0495)  time: 0.8488 (1.5219)  data: 0.0029 (0.6839)  lr: 0.001200  max mem: 24032
2020-02-11 09:33:03,399 maskrcnn_benchmark.trainer INFO: eta: 5:38:45  iter: 28640  loss: 0.6201 (0.7262)  loss_classifier: 0.1952 (0.2530)  loss_box_reg: 0.1017 (0.1206)  loss_mask: 0.2568 (0.2689)  loss_objectness: 0.0172 (0.0342)  loss_rpn_box_reg: 0.0391 (0.0495)  time: 0.8497 (1.5214)  data: 0.0030 (0.6834)  lr: 0.001200  max mem: 24032
2020-02-11 09:33:20,082 maskrcnn_benchmark.trainer INFO: eta: 5:38:08  iter: 28660  loss: 0.6031 (0.7261)  loss_classifier: 0.2002 (0.2530)  loss_box_reg: 0.1046 (0.1206)  loss_mask: 0.2408 (0.2689)  loss_objectness: 0.0166 (0.0342)  loss_rpn_box_reg: 0.0352 (0.0495)  time: 0.8351 (1.5209)  data: 0.0031 (0.6829)  lr: 0.001200  max mem: 24032
2020-02-11 09:33:37,043 maskrcnn_benchmark.trainer INFO: eta: 5:37:32  iter: 28680  loss: 0.5981 (0.7260)  loss_classifier: 0.1865 (0.2530)  loss_box_reg: 0.0998 (0.1205)  loss_mask: 0.2471 (0.2689)  loss_objectness: 0.0148 (0.0342)  loss_rpn_box_reg: 0.0390 (0.0495)  time: 0.8410 (1.5204)  data: 0.0029 (0.6824)  lr: 0.001200  max mem: 24032
2020-02-11 09:33:53,864 maskrcnn_benchmark.trainer INFO: eta: 5:36:55  iter: 28700  loss: 0.5334 (0.7259)  loss_classifier: 0.1687 (0.2529)  loss_box_reg: 0.0805 (0.1205)  loss_mask: 0.2374 (0.2688)  loss_objectness: 0.0132 (0.0342)  loss_rpn_box_reg: 0.0280 (0.0494)  time: 0.8403 (1.5200)  data: 0.0028 (0.6820)  lr: 0.001200  max mem: 24032
2020-02-11 09:34:10,569 maskrcnn_benchmark.trainer INFO: eta: 5:36:18  iter: 28720  loss: 0.6317 (0.7258)  loss_classifier: 0.1928 (0.2529)  loss_box_reg: 0.1065 (0.1205)  loss_mask: 0.2531 (0.2688)  loss_objectness: 0.0162 (0.0342)  loss_rpn_box_reg: 0.0326 (0.0494)  time: 0.8334 (1.5195)  data: 0.0030 (0.6815)  lr: 0.001200  max mem: 24032
2020-02-11 09:34:27,362 maskrcnn_benchmark.trainer INFO: eta: 5:35:42  iter: 28740  loss: 0.5771 (0.7258)  loss_classifier: 0.1919 (0.2528)  loss_box_reg: 0.0954 (0.1205)  loss_mask: 0.2442 (0.2688)  loss_objectness: 0.0180 (0.0342)  loss_rpn_box_reg: 0.0359 (0.0494)  time: 0.8402 (1.5190)  data: 0.0030 (0.6810)  lr: 0.001200  max mem: 24032
2020-02-11 09:34:44,350 maskrcnn_benchmark.trainer INFO: eta: 5:35:05  iter: 28760  loss: 0.6067 (0.7257)  loss_classifier: 0.1913 (0.2528)  loss_box_reg: 0.0944 (0.1205)  loss_mask: 0.2411 (0.2688)  loss_objectness: 0.0151 (0.0342)  loss_rpn_box_reg: 0.0337 (0.0494)  time: 0.8474 (1.5185)  data: 0.0032 (0.6806)  lr: 0.001200  max mem: 24032
2020-02-11 09:35:01,342 maskrcnn_benchmark.trainer INFO: eta: 5:34:28  iter: 28780  loss: 0.5522 (0.7256)  loss_classifier: 0.1786 (0.2528)  loss_box_reg: 0.0882 (0.1205)  loss_mask: 0.2352 (0.2688)  loss_objectness: 0.0143 (0.0341)  loss_rpn_box_reg: 0.0272 (0.0494)  time: 0.8486 (1.5181)  data: 0.0028 (0.6801)  lr: 0.001200  max mem: 24032
2020-02-11 09:35:18,264 maskrcnn_benchmark.trainer INFO: eta: 5:33:52  iter: 28800  loss: 0.5468 (0.7255)  loss_classifier: 0.1780 (0.2527)  loss_box_reg: 0.0884 (0.1205)  loss_mask: 0.2283 (0.2687)  loss_objectness: 0.0141 (0.0341)  loss_rpn_box_reg: 0.0272 (0.0494)  time: 0.8447 (1.5176)  data: 0.0030 (0.6796)  lr: 0.001200  max mem: 24032
2020-02-11 09:35:35,173 maskrcnn_benchmark.trainer INFO: eta: 5:33:15  iter: 28820  loss: 0.6224 (0.7254)  loss_classifier: 0.2109 (0.2527)  loss_box_reg: 0.1056 (0.1204)  loss_mask: 0.2446 (0.2687)  loss_objectness: 0.0203 (0.0341)  loss_rpn_box_reg: 0.0347 (0.0494)  time: 0.8458 (1.5171)  data: 0.0030 (0.6791)  lr: 0.001200  max mem: 24032
2020-02-11 09:35:52,025 maskrcnn_benchmark.trainer INFO: eta: 5:32:39  iter: 28840  loss: 0.5624 (0.7253)  loss_classifier: 0.1721 (0.2526)  loss_box_reg: 0.0900 (0.1204)  loss_mask: 0.2398 (0.2687)  loss_objectness: 0.0140 (0.0341)  loss_rpn_box_reg: 0.0327 (0.0494)  time: 0.8422 (1.5167)  data: 0.0029 (0.6787)  lr: 0.001200  max mem: 24032
2020-02-11 09:36:08,872 maskrcnn_benchmark.trainer INFO: eta: 5:32:02  iter: 28860  loss: 0.6138 (0.7252)  loss_classifier: 0.1968 (0.2526)  loss_box_reg: 0.1055 (0.1204)  loss_mask: 0.2387 (0.2687)  loss_objectness: 0.0220 (0.0341)  loss_rpn_box_reg: 0.0426 (0.0494)  time: 0.8428 (1.5162)  data: 0.0031 (0.6782)  lr: 0.001200  max mem: 24032
2020-02-11 09:36:25,814 maskrcnn_benchmark.trainer INFO: eta: 5:31:26  iter: 28880  loss: 0.5940 (0.7251)  loss_classifier: 0.1986 (0.2526)  loss_box_reg: 0.0996 (0.1204)  loss_mask: 0.2427 (0.2687)  loss_objectness: 0.0185 (0.0341)  loss_rpn_box_reg: 0.0299 (0.0494)  time: 0.8470 (1.5157)  data: 0.0029 (0.6777)  lr: 0.001200  max mem: 24032
2020-02-11 09:36:42,687 maskrcnn_benchmark.trainer INFO: eta: 5:30:50  iter: 28900  loss: 0.6281 (0.7250)  loss_classifier: 0.1860 (0.2525)  loss_box_reg: 0.1065 (0.1204)  loss_mask: 0.2360 (0.2686)  loss_objectness: 0.0202 (0.0341)  loss_rpn_box_reg: 0.0287 (0.0494)  time: 0.8425 (1.5153)  data: 0.0030 (0.6773)  lr: 0.001200  max mem: 24032
2020-02-11 09:36:59,507 maskrcnn_benchmark.trainer INFO: eta: 5:30:13  iter: 28920  loss: 0.5570 (0.7249)  loss_classifier: 0.1743 (0.2525)  loss_box_reg: 0.0805 (0.1204)  loss_mask: 0.2498 (0.2686)  loss_objectness: 0.0151 (0.0341)  loss_rpn_box_reg: 0.0302 (0.0494)  time: 0.8410 (1.5148)  data: 0.0030 (0.6768)  lr: 0.001200  max mem: 24032
2020-02-11 09:37:16,413 maskrcnn_benchmark.trainer INFO: eta: 5:29:37  iter: 28940  loss: 0.5659 (0.7248)  loss_classifier: 0.1762 (0.2524)  loss_box_reg: 0.0984 (0.1204)  loss_mask: 0.2308 (0.2686)  loss_objectness: 0.0180 (0.0341)  loss_rpn_box_reg: 0.0361 (0.0494)  time: 0.8458 (1.5144)  data: 0.0030 (0.6763)  lr: 0.001200  max mem: 24032
2020-02-11 09:37:33,272 maskrcnn_benchmark.trainer INFO: eta: 5:29:01  iter: 28960  loss: 0.5574 (0.7247)  loss_classifier: 0.1720 (0.2524)  loss_box_reg: 0.0932 (0.1203)  loss_mask: 0.2270 (0.2686)  loss_objectness: 0.0184 (0.0341)  loss_rpn_box_reg: 0.0289 (0.0493)  time: 0.8447 (1.5139)  data: 0.0031 (0.6759)  lr: 0.001200  max mem: 24032
2020-02-11 09:37:50,198 maskrcnn_benchmark.trainer INFO: eta: 5:28:24  iter: 28980  loss: 0.6536 (0.7247)  loss_classifier: 0.2077 (0.2524)  loss_box_reg: 0.1052 (0.1203)  loss_mask: 0.2485 (0.2686)  loss_objectness: 0.0180 (0.0340)  loss_rpn_box_reg: 0.0367 (0.0493)  time: 0.8487 (1.5134)  data: 0.0031 (0.6754)  lr: 0.001200  max mem: 24032
2020-02-11 09:38:07,164 maskrcnn_benchmark.trainer INFO: eta: 5:27:48  iter: 29000  loss: 0.5388 (0.7246)  loss_classifier: 0.1867 (0.2523)  loss_box_reg: 0.0888 (0.1203)  loss_mask: 0.2454 (0.2686)  loss_objectness: 0.0169 (0.0340)  loss_rpn_box_reg: 0.0330 (0.0493)  time: 0.8514 (1.5130)  data: 0.0029 (0.6749)  lr: 0.001200  max mem: 24032
2020-02-11 09:38:23,987 maskrcnn_benchmark.trainer INFO: eta: 5:27:12  iter: 29020  loss: 0.5303 (0.7245)  loss_classifier: 0.1821 (0.2523)  loss_box_reg: 0.0903 (0.1203)  loss_mask: 0.2341 (0.2685)  loss_objectness: 0.0141 (0.0340)  loss_rpn_box_reg: 0.0315 (0.0493)  time: 0.8469 (1.5125)  data: 0.0031 (0.6745)  lr: 0.001200  max mem: 24032
2020-02-11 09:38:40,927 maskrcnn_benchmark.trainer INFO: eta: 5:26:36  iter: 29040  loss: 0.6015 (0.7244)  loss_classifier: 0.1923 (0.2523)  loss_box_reg: 0.0985 (0.1203)  loss_mask: 0.2481 (0.2685)  loss_objectness: 0.0189 (0.0340)  loss_rpn_box_reg: 0.0374 (0.0493)  time: 0.8484 (1.5120)  data: 0.0030 (0.6740)  lr: 0.001200  max mem: 24032
2020-02-11 09:38:57,879 maskrcnn_benchmark.trainer INFO: eta: 5:25:59  iter: 29060  loss: 0.5981 (0.7243)  loss_classifier: 0.1986 (0.2522)  loss_box_reg: 0.0997 (0.1203)  loss_mask: 0.2365 (0.2685)  loss_objectness: 0.0189 (0.0340)  loss_rpn_box_reg: 0.0363 (0.0493)  time: 0.8421 (1.5116)  data: 0.0031 (0.6736)  lr: 0.001200  max mem: 24032
2020-02-11 09:39:14,713 maskrcnn_benchmark.trainer INFO: eta: 5:25:23  iter: 29080  loss: 0.6352 (0.7243)  loss_classifier: 0.2206 (0.2522)  loss_box_reg: 0.1143 (0.1203)  loss_mask: 0.2479 (0.2685)  loss_objectness: 0.0160 (0.0340)  loss_rpn_box_reg: 0.0363 (0.0493)  time: 0.8428 (1.5111)  data: 0.0031 (0.6731)  lr: 0.001200  max mem: 24032
2020-02-11 09:39:31,733 maskrcnn_benchmark.trainer INFO: eta: 5:24:47  iter: 29100  loss: 0.6212 (0.7242)  loss_classifier: 0.1984 (0.2522)  loss_box_reg: 0.0931 (0.1203)  loss_mask: 0.2438 (0.2685)  loss_objectness: 0.0186 (0.0340)  loss_rpn_box_reg: 0.0360 (0.0493)  time: 0.8452 (1.5107)  data: 0.0031 (0.6726)  lr: 0.001200  max mem: 24032
Gradient overflow.  Skipping step, loss scaler 0 reducing loss scale to 131072.0
Gradient overflow.  Skipping step, loss scaler 0 reducing loss scale to 131072.0
Gradient overflow.  Skipping step, loss scaler 0 reducing loss scale to 131072.0
Gradient overflow.  Skipping step, loss scaler 0 reducing loss scale to 131072.0
Gradient overflow.  Skipping step, loss scaler 0 reducing loss scale to 131072.0
Gradient overflow.  Skipping step, loss scaler 0 reducing loss scale to 131072.0
Gradient overflow.  Skipping step, loss scaler 0 reducing loss scale to 131072.0
Gradient overflow.  Skipping step, loss scaler 0 reducing loss scale to 131072.0
:::MLL 1581413974.810 epoch_stop: {"value": null, "metadata": {"epoch_num": 34, "file": "tools/train_mlperf.py", "lineno": 75}}
:::MLL 1581413974.810 block_stop: {"value": null, "metadata": {"first_epoch_num": 34, "file": "tools/train_mlperf.py", "lineno": 76}}
:::MLL 1581413974.811 eval_start: {"value": null, "metadata": {"epoch_num": 34, "file": "tools/train_mlperf.py", "lineno": 77}}
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
2020-02-11 09:39:35,601 maskrcnn_benchmark.data.build WARNING: When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
Done (t=3.86s)
creating index...
Done (t=3.93s)
creating index...
Done (t=3.90s)
creating index...
Done (t=3.90s)
creating index...
Done (t=3.87s)
creating index...
Done (t=3.93s)
creating index...
Done (t=3.92s)
creating index...
Done (t=3.94s)
creating index...
index created!
index created!
index created!
index created!
  0%|                                                  | 0/2532 [00:00<?, ?it/s]index created!
index created!
  0%|                                                  | 0/2532 [00:00<?, ?it/s]index created!
  0%|                                                  | 0/2532 [00:00<?, ?it/s]index created!
  0%|                                                  | 0/2532 [00:00<?, ?it/s]2020-02-11 09:39:39,961 maskrcnn_benchmark.inference INFO: Start evaluation on coco_2014_val dataset(40504 images).
 99%|██████████████████████████████████████▋| 2514/2532 [03:46<00:01, 11.70it/s]
100%|███████████████████████████████████████| 2532/2532 [03:47<00:00, 11.15it/s]
 99%|██████████████████████████████████████▌| 2506/2532 [03:47<00:02, 12.03it/s]
100%|███████████████████████████████████████| 2532/2532 [03:48<00:00, 11.09it/s]
100%|██████████████████████████████████████▊| 2522/2532 [03:49<00:00, 12.00it/s]
100%|███████████████████████████████████████| 2532/2532 [03:49<00:00, 12.94it/s]
100%|███████████████████████████████████████| 2532/2532 [03:50<00:00, 10.97it/s]

2020-02-11 09:43:31,239 maskrcnn_benchmark.inference INFO: Total inference time: 0:03:51.278088 (0.045680048906965594 s / img per device, on 8 devices)
2020-02-11 09:43:32,259 maskrcnn_benchmark.inference INFO: Preparing results for COCO format
2020-02-11 09:43:32,259 maskrcnn_benchmark.inference INFO: Preparing bbox results
2020-02-11 09:43:33,829 maskrcnn_benchmark.inference INFO: Preparing segm results
:::MLL 1581414451.454 block_start: {"value": null, "metadata": {"first_epoch_num": 35, "epoch_count": 1, "file": "tools/train_mlperf.py", "lineno": 134}}
:::MLL 1581414451.457 epoch_start: {"value": null, "metadata": {"epoch_num": 35, "file": "tools/train_mlperf.py", "lineno": 135}}
Evaluating predictions
creating index...
GT annotations already exist!
2020-02-11 09:47:45,043 maskrcnn_benchmark.trainer INFO: eta: 5:27:42  iter: 29120  loss: 0.5582 (0.7241)  loss_classifier: 0.1835 (0.2521)  loss_box_reg: 0.0924 (0.1202)  loss_mask: 0.2270 (0.2684)  loss_objectness: 0.0180 (0.0340)  loss_rpn_box_reg: 0.0347 (0.0493)  time: 0.8422 (1.5266)  data: 0.0031 (0.6885)  lr: 0.001200  max mem: 24032
2020-02-11 09:48:01,896 maskrcnn_benchmark.trainer INFO: eta: 5:27:05  iter: 29140  loss: 0.6391 (0.7240)  loss_classifier: 0.2162 (0.2521)  loss_box_reg: 0.1100 (0.1202)  loss_mask: 0.2596 (0.2684)  loss_objectness: 0.0181 (0.0340)  loss_rpn_box_reg: 0.0375 (0.0493)  time: 0.8394 (1.5261)  data: 0.0029 (0.6881)  lr: 0.001200  max mem: 24032
2020-02-11 09:48:18,890 maskrcnn_benchmark.trainer INFO: eta: 5:26:29  iter: 29160  loss: 0.5744 (0.7239)  loss_classifier: 0.1800 (0.2520)  loss_box_reg: 0.0907 (0.1202)  loss_mask: 0.2318 (0.2684)  loss_objectness: 0.0172 (0.0339)  loss_rpn_box_reg: 0.0293 (0.0493)  time: 0.8490 (1.5256)  data: 0.0029 (0.6876)  lr: 0.001200  max mem: 24032
Loading and preparing results...
resFile is ./inference/coco_2014_val/bbox.json
DONE (t=6.28s)
Running per image evaluation...
Evaluate annotation type *bbox*
2020-02-11 09:48:35,907 maskrcnn_benchmark.trainer INFO: eta: 5:25:52  iter: 29180  loss: 0.5184 (0.7238)  loss_classifier: 0.1525 (0.2520)  loss_box_reg: 0.0851 (0.1202)  loss_mask: 0.2431 (0.2684)  loss_objectness: 0.0157 (0.0339)  loss_rpn_box_reg: 0.0335 (0.0493)  time: 0.8492 (1.5252)  data: 0.0029 (0.6871)  lr: 0.001200  max mem: 24032
2020-02-11 09:48:52,787 maskrcnn_benchmark.trainer INFO: eta: 5:25:16  iter: 29200  loss: 0.5892 (0.7237)  loss_classifier: 0.1806 (0.2519)  loss_box_reg: 0.1057 (0.1202)  loss_mask: 0.2500 (0.2684)  loss_objectness: 0.0168 (0.0339)  loss_rpn_box_reg: 0.0359 (0.0493)  time: 0.8398 (1.5247)  data: 0.0028 (0.6867)  lr: 0.001200  max mem: 24032
DONE (t=23.95s).
Accumulating evaluation results...
DONE (t=0.00s).
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.36029
 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=100 ] = 0.57147
 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=100 ] = 0.39114
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.18846
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.37561
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.46566
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=  1 ] = 0.30295
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets= 10 ] = 0.47144
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.49242
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.29447
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.51792
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.62895
2020-02-11 09:49:09,720 maskrcnn_benchmark.trainer INFO: eta: 5:24:39  iter: 29220  loss: 0.5430 (0.7236)  loss_classifier: 0.1703 (0.2519)  loss_box_reg: 0.0889 (0.1202)  loss_mask: 0.2385 (0.2684)  loss_objectness: 0.0162 (0.0339)  loss_rpn_box_reg: 0.0300 (0.0493)  time: 0.8479 (1.5243)  data: 0.0029 (0.6862)  lr: 0.001200  max mem: 24032
2020-02-11 09:49:26,655 maskrcnn_benchmark.trainer INFO: eta: 5:24:03  iter: 29240  loss: 0.6090 (0.7235)  loss_classifier: 0.1997 (0.2519)  loss_box_reg: 0.1060 (0.1202)  loss_mask: 0.2490 (0.2683)  loss_objectness: 0.0187 (0.0339)  loss_rpn_box_reg: 0.0371 (0.0493)  time: 0.8420 (1.5238)  data: 0.0028 (0.6857)  lr: 0.001200  max mem: 24032
2020-02-11 09:49:43,642 maskrcnn_benchmark.trainer INFO: eta: 5:23:27  iter: 29260  loss: 0.6084 (0.7234)  loss_classifier: 0.1821 (0.2518)  loss_box_reg: 0.0997 (0.1201)  loss_mask: 0.2379 (0.2683)  loss_objectness: 0.0159 (0.0339)  loss_rpn_box_reg: 0.0370 (0.0493)  time: 0.8495 (1.5233)  data: 0.0029 (0.6853)  lr: 0.001200  max mem: 24032
Loading and preparing results...
resFile is ./inference/coco_2014_val/segm.json
DONE (t=14.71s)
Running per image evaluation...
Evaluate annotation type *segm*
2020-02-11 09:50:00,561 maskrcnn_benchmark.trainer INFO: eta: 5:22:50  iter: 29280  loss: 0.6058 (0.7234)  loss_classifier: 0.1896 (0.2518)  loss_box_reg: 0.1088 (0.1201)  loss_mask: 0.2532 (0.2683)  loss_objectness: 0.0207 (0.0339)  loss_rpn_box_reg: 0.0303 (0.0492)  time: 0.8489 (1.5229)  data: 0.0029 (0.6848)  lr: 0.001200  max mem: 24032
2020-02-11 09:50:17,331 maskrcnn_benchmark.trainer INFO: eta: 5:22:14  iter: 29300  loss: 0.5468 (0.7233)  loss_classifier: 0.1859 (0.2517)  loss_box_reg: 0.0827 (0.1201)  loss_mask: 0.2376 (0.2683)  loss_objectness: 0.0155 (0.0339)  loss_rpn_box_reg: 0.0297 (0.0492)  time: 0.8353 (1.5224)  data: 0.0028 (0.6843)  lr: 0.001200  max mem: 24032
DONE (t=31.42s).
Accumulating evaluation results...
DONE (t=0.00s).
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.32620
 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=100 ] = 0.53940
 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=100 ] = 0.34388
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.13408
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.33860
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.48043
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=  1 ] = 0.28459
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets= 10 ] = 0.43161
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.44890
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.25006
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.47739
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.60088
2020-02-11 09:50:36,054 maskrcnn_benchmark.trainer INFO: bbox mAP: 0.3602929817581125, segm mAP: 0.3262029491185138
:::MLL 1581414636.068 eval_accuracy: {"value": {"accuracy": {"BBOX": 0.3602929817581125, "SEGM": 0.3262029491185138}}, "metadata": {"epoch_num": 34, "file": "tools/train_mlperf.py", "lineno": 99}}
:::MLL 1581414636.068 eval_stop: {"value": null, "metadata": {"epoch_num": 34, "file": "tools/train_mlperf.py", "lineno": 100}}
2020-02-11 09:50:36,882 maskrcnn_benchmark.trainer INFO: eta: 5:21:39  iter: 29320  loss: 0.5579 (0.7232)  loss_classifier: 0.1697 (0.2517)  loss_box_reg: 0.0920 (0.1201)  loss_mask: 0.2381 (0.2683)  loss_objectness: 0.0181 (0.0339)  loss_rpn_box_reg: 0.0297 (0.0492)  time: 0.8372 (1.5220)  data: 0.0028 (0.6839)  lr: 0.001200  max mem: 24032
2020-02-11 09:50:53,858 maskrcnn_benchmark.trainer INFO: eta: 5:21:03  iter: 29340  loss: 0.5902 (0.7231)  loss_classifier: 0.1930 (0.2517)  loss_box_reg: 0.0920 (0.1201)  loss_mask: 0.2385 (0.2682)  loss_objectness: 0.0177 (0.0339)  loss_rpn_box_reg: 0.0333 (0.0492)  time: 0.8459 (1.5216)  data: 0.0030 (0.6834)  lr: 0.001200  max mem: 24032
2020-02-11 09:51:10,762 maskrcnn_benchmark.trainer INFO: eta: 5:20:26  iter: 29360  loss: 0.6014 (0.7230)  loss_classifier: 0.1990 (0.2516)  loss_box_reg: 0.1068 (0.1201)  loss_mask: 0.2467 (0.2682)  loss_objectness: 0.0148 (0.0338)  loss_rpn_box_reg: 0.0393 (0.0492)  time: 0.8401 (1.5211)  data: 0.0028 (0.6829)  lr: 0.001200  max mem: 24032
2020-02-11 09:51:27,622 maskrcnn_benchmark.trainer INFO: eta: 5:19:50  iter: 29380  loss: 0.5741 (0.7229)  loss_classifier: 0.1894 (0.2516)  loss_box_reg: 0.0890 (0.1201)  loss_mask: 0.2459 (0.2682)  loss_objectness: 0.0161 (0.0338)  loss_rpn_box_reg: 0.0343 (0.0492)  time: 0.8435 (1.5206)  data: 0.0029 (0.6825)  lr: 0.001200  max mem: 24032
2020-02-11 09:51:44,432 maskrcnn_benchmark.trainer INFO: eta: 5:19:14  iter: 29400  loss: 0.5756 (0.7228)  loss_classifier: 0.1873 (0.2515)  loss_box_reg: 0.0991 (0.1200)  loss_mask: 0.2390 (0.2682)  loss_objectness: 0.0151 (0.0338)  loss_rpn_box_reg: 0.0246 (0.0492)  time: 0.8382 (1.5202)  data: 0.0029 (0.6820)  lr: 0.001200  max mem: 24032
2020-02-11 09:52:01,293 maskrcnn_benchmark.trainer INFO: eta: 5:18:38  iter: 29420  loss: 0.6391 (0.7228)  loss_classifier: 0.2308 (0.2515)  loss_box_reg: 0.1117 (0.1200)  loss_mask: 0.2466 (0.2682)  loss_objectness: 0.0206 (0.0338)  loss_rpn_box_reg: 0.0378 (0.0492)  time: 0.8400 (1.5197)  data: 0.0032 (0.6816)  lr: 0.001200  max mem: 24032
2020-02-11 09:52:18,195 maskrcnn_benchmark.trainer INFO: eta: 5:18:01  iter: 29440  loss: 0.5685 (0.7227)  loss_classifier: 0.1807 (0.2515)  loss_box_reg: 0.1011 (0.1200)  loss_mask: 0.2427 (0.2682)  loss_objectness: 0.0190 (0.0338)  loss_rpn_box_reg: 0.0295 (0.0492)  time: 0.8454 (1.5193)  data: 0.0030 (0.6811)  lr: 0.001200  max mem: 24032
2020-02-11 09:52:35,128 maskrcnn_benchmark.trainer INFO: eta: 5:17:25  iter: 29460  loss: 0.5721 (0.7226)  loss_classifier: 0.1888 (0.2514)  loss_box_reg: 0.0970 (0.1200)  loss_mask: 0.2282 (0.2681)  loss_objectness: 0.0174 (0.0338)  loss_rpn_box_reg: 0.0386 (0.0492)  time: 0.8469 (1.5188)  data: 0.0030 (0.6806)  lr: 0.001200  max mem: 24032
2020-02-11 09:52:52,032 maskrcnn_benchmark.trainer INFO: eta: 5:16:49  iter: 29480  loss: 0.6085 (0.7225)  loss_classifier: 0.2053 (0.2514)  loss_box_reg: 0.1064 (0.1200)  loss_mask: 0.2499 (0.2681)  loss_objectness: 0.0182 (0.0338)  loss_rpn_box_reg: 0.0375 (0.0492)  time: 0.8406 (1.5183)  data: 0.0030 (0.6802)  lr: 0.001200  max mem: 24032
2020-02-11 09:53:08,893 maskrcnn_benchmark.trainer INFO: eta: 5:16:13  iter: 29500  loss: 0.6091 (0.7225)  loss_classifier: 0.2024 (0.2514)  loss_box_reg: 0.1033 (0.1200)  loss_mask: 0.2438 (0.2681)  loss_objectness: 0.0157 (0.0338)  loss_rpn_box_reg: 0.0338 (0.0492)  time: 0.8426 (1.5179)  data: 0.0031 (0.6797)  lr: 0.001200  max mem: 24032
2020-02-11 09:53:25,733 maskrcnn_benchmark.trainer INFO: eta: 5:15:37  iter: 29520  loss: 0.5509 (0.7224)  loss_classifier: 0.1784 (0.2514)  loss_box_reg: 0.0957 (0.1200)  loss_mask: 0.2324 (0.2681)  loss_objectness: 0.0168 (0.0338)  loss_rpn_box_reg: 0.0294 (0.0492)  time: 0.8443 (1.5174)  data: 0.0030 (0.6793)  lr: 0.001200  max mem: 24032
2020-02-11 09:53:42,786 maskrcnn_benchmark.trainer INFO: eta: 5:15:01  iter: 29540  loss: 0.6104 (0.7223)  loss_classifier: 0.2030 (0.2513)  loss_box_reg: 0.1056 (0.1200)  loss_mask: 0.2430 (0.2681)  loss_objectness: 0.0171 (0.0338)  loss_rpn_box_reg: 0.0358 (0.0492)  time: 0.8540 (1.5170)  data: 0.0031 (0.6788)  lr: 0.001200  max mem: 24032
2020-02-11 09:53:59,743 maskrcnn_benchmark.trainer INFO: eta: 5:14:25  iter: 29560  loss: 0.6055 (0.7222)  loss_classifier: 0.1889 (0.2513)  loss_box_reg: 0.1041 (0.1200)  loss_mask: 0.2510 (0.2681)  loss_objectness: 0.0200 (0.0337)  loss_rpn_box_reg: 0.0433 (0.0492)  time: 0.8407 (1.5165)  data: 0.0030 (0.6783)  lr: 0.001200  max mem: 24032
2020-02-11 09:54:16,526 maskrcnn_benchmark.trainer INFO: eta: 5:13:49  iter: 29580  loss: 0.6262 (0.7222)  loss_classifier: 0.2123 (0.2513)  loss_box_reg: 0.1042 (0.1200)  loss_mask: 0.2498 (0.2681)  loss_objectness: 0.0197 (0.0337)  loss_rpn_box_reg: 0.0391 (0.0491)  time: 0.8379 (1.5161)  data: 0.0031 (0.6779)  lr: 0.001200  max mem: 24032
2020-02-11 09:54:33,211 maskrcnn_benchmark.trainer INFO: eta: 5:13:13  iter: 29600  loss: 0.5690 (0.7221)  loss_classifier: 0.1857 (0.2512)  loss_box_reg: 0.0883 (0.1200)  loss_mask: 0.2410 (0.2680)  loss_objectness: 0.0176 (0.0337)  loss_rpn_box_reg: 0.0319 (0.0491)  time: 0.8341 (1.5156)  data: 0.0030 (0.6774)  lr: 0.001200  max mem: 24032
2020-02-11 09:54:50,020 maskrcnn_benchmark.trainer INFO: eta: 5:12:37  iter: 29620  loss: 0.5755 (0.7220)  loss_classifier: 0.1832 (0.2512)  loss_box_reg: 0.0906 (0.1199)  loss_mask: 0.2362 (0.2680)  loss_objectness: 0.0178 (0.0337)  loss_rpn_box_reg: 0.0457 (0.0491)  time: 0.8447 (1.5152)  data: 0.0031 (0.6770)  lr: 0.001200  max mem: 24032
2020-02-11 09:55:06,937 maskrcnn_benchmark.trainer INFO: eta: 5:12:01  iter: 29640  loss: 0.5504 (0.7219)  loss_classifier: 0.1846 (0.2512)  loss_box_reg: 0.0921 (0.1199)  loss_mask: 0.2431 (0.2680)  loss_objectness: 0.0148 (0.0337)  loss_rpn_box_reg: 0.0400 (0.0491)  time: 0.8418 (1.5147)  data: 0.0030 (0.6765)  lr: 0.001200  max mem: 24032
2020-02-11 09:55:23,814 maskrcnn_benchmark.trainer INFO: eta: 5:11:25  iter: 29660  loss: 0.5020 (0.7218)  loss_classifier: 0.1583 (0.2511)  loss_box_reg: 0.0784 (0.1199)  loss_mask: 0.2294 (0.2680)  loss_objectness: 0.0169 (0.0337)  loss_rpn_box_reg: 0.0264 (0.0491)  time: 0.8386 (1.5143)  data: 0.0029 (0.6761)  lr: 0.001200  max mem: 24032
2020-02-11 09:55:40,748 maskrcnn_benchmark.trainer INFO: eta: 5:10:50  iter: 29680  loss: 0.5959 (0.7217)  loss_classifier: 0.1915 (0.2511)  loss_box_reg: 0.0968 (0.1199)  loss_mask: 0.2446 (0.2680)  loss_objectness: 0.0170 (0.0337)  loss_rpn_box_reg: 0.0396 (0.0491)  time: 0.8421 (1.5138)  data: 0.0029 (0.6756)  lr: 0.001200  max mem: 24032
2020-02-11 09:55:57,654 maskrcnn_benchmark.trainer INFO: eta: 5:10:14  iter: 29700  loss: 0.6193 (0.7217)  loss_classifier: 0.2057 (0.2510)  loss_box_reg: 0.1126 (0.1199)  loss_mask: 0.2453 (0.2680)  loss_objectness: 0.0194 (0.0337)  loss_rpn_box_reg: 0.0360 (0.0491)  time: 0.8447 (1.5134)  data: 0.0030 (0.6752)  lr: 0.001200  max mem: 24032
2020-02-11 09:56:14,724 maskrcnn_benchmark.trainer INFO: eta: 5:09:38  iter: 29720  loss: 0.5751 (0.7216)  loss_classifier: 0.1829 (0.2510)  loss_box_reg: 0.1021 (0.1199)  loss_mask: 0.2408 (0.2679)  loss_objectness: 0.0167 (0.0337)  loss_rpn_box_reg: 0.0362 (0.0491)  time: 0.8562 (1.5129)  data: 0.0030 (0.6747)  lr: 0.001200  max mem: 24032
2020-02-11 09:56:31,583 maskrcnn_benchmark.trainer INFO: eta: 5:09:02  iter: 29740  loss: 0.5374 (0.7215)  loss_classifier: 0.1736 (0.2510)  loss_box_reg: 0.0838 (0.1199)  loss_mask: 0.2406 (0.2679)  loss_objectness: 0.0150 (0.0337)  loss_rpn_box_reg: 0.0289 (0.0491)  time: 0.8433 (1.5125)  data: 0.0029 (0.6743)  lr: 0.001200  max mem: 24032
2020-02-11 09:56:48,297 maskrcnn_benchmark.trainer INFO: eta: 5:08:26  iter: 29760  loss: 0.5647 (0.7214)  loss_classifier: 0.1824 (0.2509)  loss_box_reg: 0.0919 (0.1198)  loss_mask: 0.2249 (0.2679)  loss_objectness: 0.0159 (0.0336)  loss_rpn_box_reg: 0.0325 (0.0491)  time: 0.8365 (1.5120)  data: 0.0030 (0.6738)  lr: 0.001200  max mem: 24032
2020-02-11 09:57:05,255 maskrcnn_benchmark.trainer INFO: eta: 5:07:51  iter: 29780  loss: 0.6183 (0.7213)  loss_classifier: 0.2113 (0.2509)  loss_box_reg: 0.1087 (0.1198)  loss_mask: 0.2364 (0.2679)  loss_objectness: 0.0161 (0.0336)  loss_rpn_box_reg: 0.0321 (0.0491)  time: 0.8492 (1.5116)  data: 0.0031 (0.6734)  lr: 0.001200  max mem: 24032
2020-02-11 09:57:22,233 maskrcnn_benchmark.trainer INFO: eta: 5:07:15  iter: 29800  loss: 0.5117 (0.7212)  loss_classifier: 0.1674 (0.2509)  loss_box_reg: 0.0890 (0.1198)  loss_mask: 0.2172 (0.2679)  loss_objectness: 0.0157 (0.0336)  loss_rpn_box_reg: 0.0293 (0.0491)  time: 0.8505 (1.5111)  data: 0.0029 (0.6729)  lr: 0.001200  max mem: 24032
2020-02-11 09:57:39,229 maskrcnn_benchmark.trainer INFO: eta: 5:06:39  iter: 29820  loss: 0.5829 (0.7211)  loss_classifier: 0.1918 (0.2508)  loss_box_reg: 0.0884 (0.1198)  loss_mask: 0.2408 (0.2678)  loss_objectness: 0.0144 (0.0336)  loss_rpn_box_reg: 0.0322 (0.0491)  time: 0.8535 (1.5107)  data: 0.0029 (0.6725)  lr: 0.001200  max mem: 24032
2020-02-11 09:57:56,110 maskrcnn_benchmark.trainer INFO: eta: 5:06:04  iter: 29840  loss: 0.6437 (0.7211)  loss_classifier: 0.1934 (0.2508)  loss_box_reg: 0.1058 (0.1198)  loss_mask: 0.2467 (0.2678)  loss_objectness: 0.0179 (0.0336)  loss_rpn_box_reg: 0.0436 (0.0491)  time: 0.8426 (1.5102)  data: 0.0030 (0.6720)  lr: 0.001200  max mem: 24032
2020-02-11 09:58:13,073 maskrcnn_benchmark.trainer INFO: eta: 5:05:28  iter: 29860  loss: 0.6108 (0.7210)  loss_classifier: 0.2043 (0.2507)  loss_box_reg: 0.1112 (0.1198)  loss_mask: 0.2437 (0.2678)  loss_objectness: 0.0180 (0.0336)  loss_rpn_box_reg: 0.0356 (0.0490)  time: 0.8434 (1.5098)  data: 0.0031 (0.6716)  lr: 0.001200  max mem: 24032
2020-02-11 09:58:30,068 maskrcnn_benchmark.trainer INFO: eta: 5:04:53  iter: 29880  loss: 0.6105 (0.7209)  loss_classifier: 0.2167 (0.2507)  loss_box_reg: 0.1091 (0.1198)  loss_mask: 0.2418 (0.2678)  loss_objectness: 0.0179 (0.0336)  loss_rpn_box_reg: 0.0453 (0.0490)  time: 0.8472 (1.5093)  data: 0.0029 (0.6711)  lr: 0.001200  max mem: 24032
2020-02-11 09:58:46,978 maskrcnn_benchmark.trainer INFO: eta: 5:04:17  iter: 29900  loss: 0.5896 (0.7208)  loss_classifier: 0.2013 (0.2507)  loss_box_reg: 0.1034 (0.1198)  loss_mask: 0.2255 (0.2678)  loss_objectness: 0.0158 (0.0336)  loss_rpn_box_reg: 0.0268 (0.0490)  time: 0.8461 (1.5089)  data: 0.0030 (0.6707)  lr: 0.001200  max mem: 24032
2020-02-11 09:59:03,941 maskrcnn_benchmark.trainer INFO: eta: 5:03:42  iter: 29920  loss: 0.6080 (0.7208)  loss_classifier: 0.2120 (0.2507)  loss_box_reg: 0.1039 (0.1198)  loss_mask: 0.2433 (0.2678)  loss_objectness: 0.0190 (0.0336)  loss_rpn_box_reg: 0.0398 (0.0490)  time: 0.8485 (1.5085)  data: 0.0030 (0.6702)  lr: 0.001200  max mem: 24032
2020-02-11 09:59:20,863 maskrcnn_benchmark.trainer INFO: eta: 5:03:06  iter: 29940  loss: 0.6300 (0.7207)  loss_classifier: 0.2052 (0.2506)  loss_box_reg: 0.0995 (0.1198)  loss_mask: 0.2477 (0.2677)  loss_objectness: 0.0199 (0.0336)  loss_rpn_box_reg: 0.0381 (0.0490)  time: 0.8432 (1.5080)  data: 0.0030 (0.6698)  lr: 0.001200  max mem: 24032
2020-02-11 09:59:37,442 maskrcnn_benchmark.trainer INFO: eta: 5:02:30  iter: 29960  loss: 0.5907 (0.7206)  loss_classifier: 0.1970 (0.2506)  loss_box_reg: 0.1091 (0.1197)  loss_mask: 0.2393 (0.2677)  loss_objectness: 0.0157 (0.0335)  loss_rpn_box_reg: 0.0308 (0.0490)  time: 0.8390 (1.5076)  data: 0.0031 (0.6693)  lr: 0.001200  max mem: 24032
:::MLL 1581415177.443 epoch_stop: {"value": null, "metadata": {"epoch_num": 35, "file": "tools/train_mlperf.py", "lineno": 75}}
:::MLL 1581415177.444 block_stop: {"value": null, "metadata": {"first_epoch_num": 35, "file": "tools/train_mlperf.py", "lineno": 76}}
:::MLL 1581415177.444 eval_start: {"value": null, "metadata": {"epoch_num": 35, "file": "tools/train_mlperf.py", "lineno": 77}}
2020-02-11 09:59:37,867 maskrcnn_benchmark.data.build WARNING: When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
Done (t=3.96s)
creating index...
Done (t=3.93s)
creating index...
Done (t=3.94s)
creating index...
Done (t=3.82s)
creating index...
Done (t=3.97s)
creating index...
Done (t=3.91s)
creating index...
Done (t=3.96s)
creating index...
index created!
Done (t=3.98s)
creating index...
index created!
index created!
2020-02-11 09:59:42,256 maskrcnn_benchmark.inference INFO: Start evaluation on coco_2014_val dataset(40504 images).
  0%|                                                  | 0/2532 [00:00<?, ?it/s]index created!
index created!
index created!
index created!
index created!
100%|███████████████████████████████████████| 2532/2532 [03:44<00:00, 11.28it/s]
100%|██████████████████████████████████████▊| 2521/2532 [03:44<00:00, 11.94it/s]
100%|███████████████████████████████████████| 2532/2532 [03:46<00:00, 11.16it/s]
 98%|██████████████████████████████████████▏| 2481/2532 [03:47<00:04, 11.74it/s]
 98%|██████████████████████████████████████▍| 2493/2532 [03:48<00:03, 10.91it/s]
 99%|██████████████████████████████████████▋| 2511/2532 [03:49<00:01, 11.10it/s]
100%|███████████████████████████████████████| 2532/2532 [03:52<00:00, 10.87it/s]
100%|███████████████████████████████████████| 2532/2532 [03:53<00:00, 10.84it/s]
2020-02-11 10:03:35,842 maskrcnn_benchmark.inference INFO: Total inference time: 0:03:53.585673 (0.04613582315168055 s / img per device, on 8 devices)
2020-02-11 10:03:36,855 maskrcnn_benchmark.inference INFO: Preparing results for COCO format
2020-02-11 10:03:36,856 maskrcnn_benchmark.inference INFO: Preparing bbox results
2020-02-11 10:03:38,366 maskrcnn_benchmark.inference INFO: Preparing segm results
:::MLL 1581415667.565 block_start: {"value": null, "metadata": {"first_epoch_num": 36, "epoch_count": 1, "file": "tools/train_mlperf.py", "lineno": 134}}
:::MLL 1581415667.567 epoch_start: {"value": null, "metadata": {"epoch_num": 36, "file": "tools/train_mlperf.py", "lineno": 135}}
Evaluating predictions
creating index...
GT annotations already exist!
2020-02-11 10:08:04,483 maskrcnn_benchmark.trainer INFO: eta: 5:05:12  iter: 29980  loss: 0.6048 (0.7206)  loss_classifier: 0.2080 (0.2506)  loss_box_reg: 0.1079 (0.1197)  loss_mask: 0.2446 (0.2677)  loss_objectness: 0.0209 (0.0335)  loss_rpn_box_reg: 0.0357 (0.0490)  time: 0.8570 (1.5235)  data: 0.0029 (0.6852)  lr: 0.001200  max mem: 24032
2020-02-11 10:08:21,276 maskrcnn_benchmark.trainer INFO: eta: 5:04:36  iter: 30000  loss: 0.5269 (0.7205)  loss_classifier: 0.1737 (0.2505)  loss_box_reg: 0.0873 (0.1197)  loss_mask: 0.2271 (0.2677)  loss_objectness: 0.0147 (0.0335)  loss_rpn_box_reg: 0.0300 (0.0490)  time: 0.8409 (1.5230)  data: 0.0029 (0.6848)  lr: 0.001200  max mem: 24032
2020-02-11 10:08:38,223 maskrcnn_benchmark.trainer INFO: eta: 5:04:00  iter: 30020  loss: 0.5995 (0.7204)  loss_classifier: 0.2015 (0.2505)  loss_box_reg: 0.0947 (0.1197)  loss_mask: 0.2438 (0.2677)  loss_objectness: 0.0198 (0.0335)  loss_rpn_box_reg: 0.0348 (0.0490)  time: 0.8498 (1.5226)  data: 0.0030 (0.6843)  lr: 0.001200  max mem: 24032
Loading and preparing results...
resFile is ./inference/coco_2014_val/bbox.json
DONE (t=6.13s)
Running per image evaluation...
Evaluate annotation type *bbox*
2020-02-11 10:08:55,124 maskrcnn_benchmark.trainer INFO: eta: 5:03:24  iter: 30040  loss: 0.5790 (0.7203)  loss_classifier: 0.1800 (0.2504)  loss_box_reg: 0.0853 (0.1197)  loss_mask: 0.2423 (0.2677)  loss_objectness: 0.0167 (0.0335)  loss_rpn_box_reg: 0.0303 (0.0490)  time: 0.8463 (1.5221)  data: 0.0028 (0.6839)  lr: 0.001200  max mem: 24032
DONE (t=24.34s).
Accumulating evaluation results...
DONE (t=0.00s).
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.36041
 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=100 ] = 0.57099
 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=100 ] = 0.39185
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.18818
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.37699
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.46499
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=  1 ] = 0.30331
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets= 10 ] = 0.47175
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.49245
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.29293
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.51891
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.63099
2020-02-11 10:09:12,086 maskrcnn_benchmark.trainer INFO: eta: 5:02:48  iter: 30060  loss: 0.5565 (0.7202)  loss_classifier: 0.1507 (0.2504)  loss_box_reg: 0.0921 (0.1197)  loss_mask: 0.2293 (0.2676)  loss_objectness: 0.0146 (0.0335)  loss_rpn_box_reg: 0.0332 (0.0490)  time: 0.8451 (1.5217)  data: 0.0029 (0.6834)  lr: 0.001200  max mem: 24032
2020-02-11 10:09:29,099 maskrcnn_benchmark.trainer INFO: eta: 5:02:12  iter: 30080  loss: 0.6084 (0.7201)  loss_classifier: 0.2018 (0.2504)  loss_box_reg: 0.1048 (0.1197)  loss_mask: 0.2432 (0.2676)  loss_objectness: 0.0194 (0.0335)  loss_rpn_box_reg: 0.0279 (0.0490)  time: 0.8496 (1.5212)  data: 0.0029 (0.6830)  lr: 0.001200  max mem: 24032
2020-02-11 10:09:46,102 maskrcnn_benchmark.trainer INFO: eta: 5:01:37  iter: 30100  loss: 0.5642 (0.7200)  loss_classifier: 0.1825 (0.2503)  loss_box_reg: 0.0903 (0.1196)  loss_mask: 0.2344 (0.2676)  loss_objectness: 0.0148 (0.0335)  loss_rpn_box_reg: 0.0348 (0.0490)  time: 0.8530 (1.5208)  data: 0.0029 (0.6825)  lr: 0.001200  max mem: 24032
Loading and preparing results...
resFile is ./inference/coco_2014_val/segm.json
2020-02-11 10:10:02,974 maskrcnn_benchmark.trainer INFO: eta: 5:01:01  iter: 30120  loss: 0.5865 (0.7199)  loss_classifier: 0.1929 (0.2503)  loss_box_reg: 0.0885 (0.1196)  loss_mask: 0.2515 (0.2676)  loss_objectness: 0.0162 (0.0335)  loss_rpn_box_reg: 0.0280 (0.0490)  time: 0.8426 (1.5203)  data: 0.0029 (0.6821)  lr: 0.001200  max mem: 24032
DONE (t=14.27s)
Running per image evaluation...
Evaluate annotation type *segm*
2020-02-11 10:10:19,727 maskrcnn_benchmark.trainer INFO: eta: 5:00:25  iter: 30140  loss: 0.5943 (0.7198)  loss_classifier: 0.2035 (0.2502)  loss_box_reg: 0.0988 (0.1196)  loss_mask: 0.2436 (0.2676)  loss_objectness: 0.0175 (0.0335)  loss_rpn_box_reg: 0.0281 (0.0490)  time: 0.8340 (1.5199)  data: 0.0030 (0.6816)  lr: 0.001200  max mem: 24032
2020-02-11 10:10:36,732 maskrcnn_benchmark.trainer INFO: eta: 4:59:49  iter: 30160  loss: 0.5933 (0.7198)  loss_classifier: 0.1899 (0.2502)  loss_box_reg: 0.1023 (0.1196)  loss_mask: 0.2490 (0.2675)  loss_objectness: 0.0174 (0.0334)  loss_rpn_box_reg: 0.0392 (0.0490)  time: 0.8512 (1.5194)  data: 0.0030 (0.6812)  lr: 0.001200  max mem: 24032
DONE (t=31.14s).
Accumulating evaluation results...
DONE (t=0.00s).
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.32642
 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=100 ] = 0.53919
 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=100 ] = 0.34491
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.13435
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.33893
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.47944
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=  1 ] = 0.28453
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets= 10 ] = 0.43207
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.44917
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.24936
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.47907
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.60231
2020-02-11 10:10:49,472 maskrcnn_benchmark.trainer INFO: bbox mAP: 0.3604088021973995, segm mAP: 0.32642210083485407
:::MLL 1581415849.474 eval_accuracy: {"value": {"accuracy": {"BBOX": 0.3604088021973995, "SEGM": 0.32642210083485407}}, "metadata": {"epoch_num": 35, "file": "tools/train_mlperf.py", "lineno": 99}}
:::MLL 1581415849.474 eval_stop: {"value": null, "metadata": {"epoch_num": 35, "file": "tools/train_mlperf.py", "lineno": 100}}
2020-02-11 10:10:56,292 maskrcnn_benchmark.trainer INFO: eta: 4:59:15  iter: 30180  loss: 0.5902 (0.7197)  loss_classifier: 0.1999 (0.2502)  loss_box_reg: 0.1012 (0.1196)  loss_mask: 0.2410 (0.2675)  loss_objectness: 0.0182 (0.0334)  loss_rpn_box_reg: 0.0356 (0.0489)  time: 0.8488 (1.5191)  data: 0.0029 (0.6807)  lr: 0.001200  max mem: 24032
2020-02-11 10:11:13,221 maskrcnn_benchmark.trainer INFO: eta: 4:58:39  iter: 30200  loss: 0.5749 (0.7196)  loss_classifier: 0.1825 (0.2501)  loss_box_reg: 0.0942 (0.1196)  loss_mask: 0.2469 (0.2675)  loss_objectness: 0.0171 (0.0334)  loss_rpn_box_reg: 0.0295 (0.0489)  time: 0.8466 (1.5186)  data: 0.0030 (0.6803)  lr: 0.001200  max mem: 24032
2020-02-11 10:11:30,181 maskrcnn_benchmark.trainer INFO: eta: 4:58:04  iter: 30220  loss: 0.6472 (0.7195)  loss_classifier: 0.2071 (0.2501)  loss_box_reg: 0.0983 (0.1196)  loss_mask: 0.2427 (0.2675)  loss_objectness: 0.0178 (0.0334)  loss_rpn_box_reg: 0.0441 (0.0489)  time: 0.8475 (1.5182)  data: 0.0030 (0.6798)  lr: 0.001200  max mem: 24032
2020-02-11 10:11:47,122 maskrcnn_benchmark.trainer INFO: eta: 4:57:28  iter: 30240  loss: 0.5197 (0.7194)  loss_classifier: 0.1731 (0.2501)  loss_box_reg: 0.0862 (0.1196)  loss_mask: 0.2295 (0.2675)  loss_objectness: 0.0146 (0.0334)  loss_rpn_box_reg: 0.0319 (0.0489)  time: 0.8443 (1.5177)  data: 0.0031 (0.6794)  lr: 0.001200  max mem: 24032
2020-02-11 10:12:04,093 maskrcnn_benchmark.trainer INFO: eta: 4:56:52  iter: 30260  loss: 0.5851 (0.7193)  loss_classifier: 0.1882 (0.2500)  loss_box_reg: 0.0990 (0.1195)  loss_mask: 0.2416 (0.2675)  loss_objectness: 0.0198 (0.0334)  loss_rpn_box_reg: 0.0356 (0.0489)  time: 0.8521 (1.5173)  data: 0.0030 (0.6789)  lr: 0.001200  max mem: 24032
2020-02-11 10:12:20,945 maskrcnn_benchmark.trainer INFO: eta: 4:56:17  iter: 30280  loss: 0.5831 (0.7193)  loss_classifier: 0.1979 (0.2500)  loss_box_reg: 0.1018 (0.1195)  loss_mask: 0.2428 (0.2674)  loss_objectness: 0.0184 (0.0334)  loss_rpn_box_reg: 0.0311 (0.0489)  time: 0.8403 (1.5168)  data: 0.0031 (0.6785)  lr: 0.001200  max mem: 24032
2020-02-11 10:12:37,869 maskrcnn_benchmark.trainer INFO: eta: 4:55:41  iter: 30300  loss: 0.6032 (0.7192)  loss_classifier: 0.1948 (0.2499)  loss_box_reg: 0.1015 (0.1195)  loss_mask: 0.2380 (0.2674)  loss_objectness: 0.0186 (0.0334)  loss_rpn_box_reg: 0.0387 (0.0489)  time: 0.8489 (1.5164)  data: 0.0031 (0.6780)  lr: 0.001200  max mem: 24032
2020-02-11 10:12:54,662 maskrcnn_benchmark.trainer INFO: eta: 4:55:06  iter: 30320  loss: 0.5427 (0.7191)  loss_classifier: 0.1987 (0.2499)  loss_box_reg: 0.0915 (0.1195)  loss_mask: 0.2394 (0.2674)  loss_objectness: 0.0168 (0.0334)  loss_rpn_box_reg: 0.0324 (0.0489)  time: 0.8342 (1.5159)  data: 0.0030 (0.6776)  lr: 0.001200  max mem: 24032
2020-02-11 10:13:11,546 maskrcnn_benchmark.trainer INFO: eta: 4:54:30  iter: 30340  loss: 0.6448 (0.7190)  loss_classifier: 0.1861 (0.2499)  loss_box_reg: 0.1145 (0.1195)  loss_mask: 0.2523 (0.2674)  loss_objectness: 0.0186 (0.0334)  loss_rpn_box_reg: 0.0523 (0.0489)  time: 0.8409 (1.5155)  data: 0.0031 (0.6771)  lr: 0.001200  max mem: 24032
2020-02-11 10:13:28,319 maskrcnn_benchmark.trainer INFO: eta: 4:53:55  iter: 30360  loss: 0.5799 (0.7189)  loss_classifier: 0.1722 (0.2498)  loss_box_reg: 0.0878 (0.1195)  loss_mask: 0.2384 (0.2674)  loss_objectness: 0.0177 (0.0334)  loss_rpn_box_reg: 0.0343 (0.0489)  time: 0.8380 (1.5151)  data: 0.0030 (0.6767)  lr: 0.001200  max mem: 24032
2020-02-11 10:13:45,163 maskrcnn_benchmark.trainer INFO: eta: 4:53:19  iter: 30380  loss: 0.6626 (0.7189)  loss_classifier: 0.2196 (0.2498)  loss_box_reg: 0.1181 (0.1195)  loss_mask: 0.2543 (0.2674)  loss_objectness: 0.0182 (0.0333)  loss_rpn_box_reg: 0.0438 (0.0489)  time: 0.8406 (1.5146)  data: 0.0030 (0.6762)  lr: 0.001200  max mem: 24032
2020-02-11 10:14:02,134 maskrcnn_benchmark.trainer INFO: eta: 4:52:44  iter: 30400  loss: 0.5587 (0.7188)  loss_classifier: 0.1713 (0.2498)  loss_box_reg: 0.0880 (0.1195)  loss_mask: 0.2341 (0.2674)  loss_objectness: 0.0161 (0.0333)  loss_rpn_box_reg: 0.0277 (0.0489)  time: 0.8498 (1.5142)  data: 0.0031 (0.6758)  lr: 0.001200  max mem: 24032
2020-02-11 10:14:18,934 maskrcnn_benchmark.trainer INFO: eta: 4:52:09  iter: 30420  loss: 0.5674 (0.7187)  loss_classifier: 0.1824 (0.2497)  loss_box_reg: 0.0845 (0.1194)  loss_mask: 0.2386 (0.2673)  loss_objectness: 0.0134 (0.0333)  loss_rpn_box_reg: 0.0314 (0.0489)  time: 0.8399 (1.5137)  data: 0.0029 (0.6754)  lr: 0.001200  max mem: 24032
2020-02-11 10:14:35,777 maskrcnn_benchmark.trainer INFO: eta: 4:51:33  iter: 30440  loss: 0.6076 (0.7186)  loss_classifier: 0.1908 (0.2497)  loss_box_reg: 0.1067 (0.1194)  loss_mask: 0.2387 (0.2673)  loss_objectness: 0.0166 (0.0333)  loss_rpn_box_reg: 0.0392 (0.0489)  time: 0.8392 (1.5133)  data: 0.0030 (0.6749)  lr: 0.001200  max mem: 24032
2020-02-11 10:14:52,687 maskrcnn_benchmark.trainer INFO: eta: 4:50:58  iter: 30460  loss: 0.5905 (0.7185)  loss_classifier: 0.1766 (0.2496)  loss_box_reg: 0.0940 (0.1194)  loss_mask: 0.2397 (0.2673)  loss_objectness: 0.0141 (0.0333)  loss_rpn_box_reg: 0.0324 (0.0489)  time: 0.8458 (1.5129)  data: 0.0030 (0.6745)  lr: 0.001200  max mem: 24032
2020-02-11 10:15:09,626 maskrcnn_benchmark.trainer INFO: eta: 4:50:23  iter: 30480  loss: 0.5540 (0.7184)  loss_classifier: 0.1717 (0.2496)  loss_box_reg: 0.0904 (0.1194)  loss_mask: 0.2398 (0.2673)  loss_objectness: 0.0143 (0.0333)  loss_rpn_box_reg: 0.0278 (0.0488)  time: 0.8464 (1.5124)  data: 0.0028 (0.6740)  lr: 0.001200  max mem: 24032
2020-02-11 10:15:26,518 maskrcnn_benchmark.trainer INFO: eta: 4:49:47  iter: 30500  loss: 0.5777 (0.7183)  loss_classifier: 0.1878 (0.2495)  loss_box_reg: 0.0975 (0.1194)  loss_mask: 0.2418 (0.2673)  loss_objectness: 0.0171 (0.0333)  loss_rpn_box_reg: 0.0301 (0.0488)  time: 0.8423 (1.5120)  data: 0.0030 (0.6736)  lr: 0.001200  max mem: 24032
2020-02-11 10:15:43,523 maskrcnn_benchmark.trainer INFO: eta: 4:49:12  iter: 30520  loss: 0.5963 (0.7183)  loss_classifier: 0.1901 (0.2495)  loss_box_reg: 0.0976 (0.1194)  loss_mask: 0.2370 (0.2673)  loss_objectness: 0.0178 (0.0333)  loss_rpn_box_reg: 0.0389 (0.0488)  time: 0.8475 (1.5115)  data: 0.0029 (0.6732)  lr: 0.001200  max mem: 24032
2020-02-11 10:16:00,528 maskrcnn_benchmark.trainer INFO: eta: 4:48:37  iter: 30540  loss: 0.6449 (0.7182)  loss_classifier: 0.2097 (0.2495)  loss_box_reg: 0.1117 (0.1194)  loss_mask: 0.2350 (0.2672)  loss_objectness: 0.0192 (0.0333)  loss_rpn_box_reg: 0.0393 (0.0488)  time: 0.8473 (1.5111)  data: 0.0031 (0.6727)  lr: 0.001200  max mem: 24032
2020-02-11 10:16:17,555 maskrcnn_benchmark.trainer INFO: eta: 4:48:02  iter: 30560  loss: 0.5399 (0.7181)  loss_classifier: 0.1756 (0.2494)  loss_box_reg: 0.0893 (0.1193)  loss_mask: 0.2296 (0.2672)  loss_objectness: 0.0142 (0.0333)  loss_rpn_box_reg: 0.0284 (0.0488)  time: 0.8514 (1.5107)  data: 0.0029 (0.6723)  lr: 0.001200  max mem: 24032
2020-02-11 10:16:34,237 maskrcnn_benchmark.trainer INFO: eta: 4:47:26  iter: 30580  loss: 0.5894 (0.7180)  loss_classifier: 0.1892 (0.2494)  loss_box_reg: 0.1017 (0.1193)  loss_mask: 0.2411 (0.2672)  loss_objectness: 0.0184 (0.0332)  loss_rpn_box_reg: 0.0358 (0.0488)  time: 0.8329 (1.5102)  data: 0.0030 (0.6718)  lr: 0.001200  max mem: 24032
2020-02-11 10:16:51,148 maskrcnn_benchmark.trainer INFO: eta: 4:46:51  iter: 30600  loss: 0.6461 (0.7180)  loss_classifier: 0.2055 (0.2494)  loss_box_reg: 0.1108 (0.1193)  loss_mask: 0.2376 (0.2672)  loss_objectness: 0.0218 (0.0332)  loss_rpn_box_reg: 0.0334 (0.0488)  time: 0.8426 (1.5098)  data: 0.0031 (0.6714)  lr: 0.001200  max mem: 24032
2020-02-11 10:17:08,005 maskrcnn_benchmark.trainer INFO: eta: 4:46:16  iter: 30620  loss: 0.6049 (0.7179)  loss_classifier: 0.2031 (0.2494)  loss_box_reg: 0.1062 (0.1193)  loss_mask: 0.2449 (0.2672)  loss_objectness: 0.0175 (0.0332)  loss_rpn_box_reg: 0.0373 (0.0488)  time: 0.8417 (1.5094)  data: 0.0031 (0.6710)  lr: 0.001200  max mem: 24032
2020-02-11 10:17:24,733 maskrcnn_benchmark.trainer INFO: eta: 4:45:41  iter: 30640  loss: 0.5876 (0.7178)  loss_classifier: 0.1859 (0.2493)  loss_box_reg: 0.0961 (0.1193)  loss_mask: 0.2276 (0.2671)  loss_objectness: 0.0166 (0.0332)  loss_rpn_box_reg: 0.0319 (0.0488)  time: 0.8365 (1.5089)  data: 0.0029 (0.6705)  lr: 0.001200  max mem: 24032
2020-02-11 10:17:41,642 maskrcnn_benchmark.trainer INFO: eta: 4:45:06  iter: 30660  loss: 0.5743 (0.7177)  loss_classifier: 0.1791 (0.2493)  loss_box_reg: 0.0928 (0.1193)  loss_mask: 0.2421 (0.2671)  loss_objectness: 0.0165 (0.0332)  loss_rpn_box_reg: 0.0250 (0.0488)  time: 0.8403 (1.5085)  data: 0.0030 (0.6701)  lr: 0.001200  max mem: 24032
2020-02-11 10:17:58,602 maskrcnn_benchmark.trainer INFO: eta: 4:44:31  iter: 30680  loss: 0.6193 (0.7176)  loss_classifier: 0.1987 (0.2492)  loss_box_reg: 0.1010 (0.1193)  loss_mask: 0.2466 (0.2671)  loss_objectness: 0.0161 (0.0332)  loss_rpn_box_reg: 0.0312 (0.0488)  time: 0.8447 (1.5081)  data: 0.0030 (0.6697)  lr: 0.001200  max mem: 24032
2020-02-11 10:18:15,572 maskrcnn_benchmark.trainer INFO: eta: 4:43:56  iter: 30700  loss: 0.6088 (0.7175)  loss_classifier: 0.2059 (0.2492)  loss_box_reg: 0.1052 (0.1193)  loss_mask: 0.2406 (0.2671)  loss_objectness: 0.0162 (0.0332)  loss_rpn_box_reg: 0.0323 (0.0488)  time: 0.8458 (1.5076)  data: 0.0031 (0.6692)  lr: 0.001200  max mem: 24032
2020-02-11 10:18:32,448 maskrcnn_benchmark.trainer INFO: eta: 4:43:21  iter: 30720  loss: 0.6113 (0.7175)  loss_classifier: 0.2140 (0.2492)  loss_box_reg: 0.1007 (0.1193)  loss_mask: 0.2381 (0.2671)  loss_objectness: 0.0178 (0.0332)  loss_rpn_box_reg: 0.0413 (0.0488)  time: 0.8455 (1.5072)  data: 0.0031 (0.6688)  lr: 0.001200  max mem: 24032
2020-02-11 10:18:49,334 maskrcnn_benchmark.trainer INFO: eta: 4:42:46  iter: 30740  loss: 0.5573 (0.7174)  loss_classifier: 0.1875 (0.2491)  loss_box_reg: 0.0866 (0.1192)  loss_mask: 0.2283 (0.2671)  loss_objectness: 0.0157 (0.0332)  loss_rpn_box_reg: 0.0376 (0.0488)  time: 0.8418 (1.5068)  data: 0.0030 (0.6684)  lr: 0.001200  max mem: 24032
2020-02-11 10:19:06,201 maskrcnn_benchmark.trainer INFO: eta: 4:42:11  iter: 30760  loss: 0.5893 (0.7173)  loss_classifier: 0.1986 (0.2491)  loss_box_reg: 0.1000 (0.1192)  loss_mask: 0.2471 (0.2671)  loss_objectness: 0.0205 (0.0332)  loss_rpn_box_reg: 0.0409 (0.0488)  time: 0.8412 (1.5063)  data: 0.0030 (0.6679)  lr: 0.001200  max mem: 24032
2020-02-11 10:19:22,996 maskrcnn_benchmark.trainer INFO: eta: 4:41:36  iter: 30780  loss: 0.5902 (0.7172)  loss_classifier: 0.1948 (0.2491)  loss_box_reg: 0.1026 (0.1192)  loss_mask: 0.2426 (0.2670)  loss_objectness: 0.0192 (0.0332)  loss_rpn_box_reg: 0.0275 (0.0488)  time: 0.8437 (1.5059)  data: 0.0031 (0.6675)  lr: 0.001200  max mem: 24032
2020-02-11 10:19:39,776 maskrcnn_benchmark.trainer INFO: eta: 4:41:01  iter: 30800  loss: 0.5594 (0.7172)  loss_classifier: 0.1748 (0.2490)  loss_box_reg: 0.0890 (0.1192)  loss_mask: 0.2348 (0.2670)  loss_objectness: 0.0164 (0.0331)  loss_rpn_box_reg: 0.0328 (0.0488)  time: 0.8358 (1.5055)  data: 0.0032 (0.6671)  lr: 0.001200  max mem: 24032
:::MLL 1581416392.848 epoch_stop: {"value": null, "metadata": {"epoch_num": 36, "file": "tools/train_mlperf.py", "lineno": 75}}
:::MLL 1581416392.849 block_stop: {"value": null, "metadata": {"first_epoch_num": 36, "file": "tools/train_mlperf.py", "lineno": 76}}
:::MLL 1581416392.849 eval_start: {"value": null, "metadata": {"epoch_num": 36, "file": "tools/train_mlperf.py", "lineno": 77}}
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
2020-02-11 10:19:53,838 maskrcnn_benchmark.data.build WARNING: When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
Done (t=3.87s)
creating index...
index created!
Done (t=3.96s)
creating index...
  0%|                                                  | 0/2532 [00:00<?, ?it/s]Done (t=3.90s)
creating index...
Done (t=3.94s)
creating index...
Done (t=3.96s)
creating index...
Done (t=3.86s)
creating index...
Done (t=3.93s)
creating index...
Done (t=3.95s)
creating index...
index created!
index created!
  0%|                                                  | 0/2532 [00:00<?, ?it/s]index created!
index created!
index created!
index created!
index created!
  0%|                                                  | 0/2532 [00:00<?, ?it/s]2020-02-11 10:19:58,224 maskrcnn_benchmark.inference INFO: Start evaluation on coco_2014_val dataset(40504 images).
100%|███████████████████████████████████████| 2532/2532 [03:44<00:00, 11.27it/s]
100%|███████████████████████████████████████| 2532/2532 [03:45<00:00, 11.24it/s]
 97%|█████████████████████████████████████▊ | 2456/2532 [03:46<00:06, 12.06it/s]
 99%|██████████████████████████████████████▋| 2509/2532 [03:47<00:02, 10.80it/s]
100%|███████████████████████████████████████| 2532/2532 [03:49<00:00, 11.02it/s]
100%|███████████████████████████████████████| 2532/2532 [03:50<00:00, 10.98it/s]
100%|███████████████████████████████████████| 2532/2532 [03:51<00:00, 10.92it/s]
100%|███████████████████████████████████████| 2532/2532 [03:53<00:00, 11.34it/s]
2020-02-11 10:23:52,812 maskrcnn_benchmark.inference INFO: Total inference time: 0:03:54.588008 (0.046333795805917344 s / img per device, on 8 devices)
2020-02-11 10:23:53,822 maskrcnn_benchmark.inference INFO: Preparing results for COCO format
2020-02-11 10:23:53,822 maskrcnn_benchmark.inference INFO: Preparing bbox results
2020-02-11 10:23:55,325 maskrcnn_benchmark.inference INFO: Preparing segm results
:::MLL 1581416868.144 block_start: {"value": null, "metadata": {"first_epoch_num": 37, "epoch_count": 1, "file": "tools/train_mlperf.py", "lineno": 134}}
:::MLL 1581416868.146 epoch_start: {"value": null, "metadata": {"epoch_num": 37, "file": "tools/train_mlperf.py", "lineno": 135}}
2020-02-11 10:27:51,493 maskrcnn_benchmark.trainer INFO: eta: 4:43:18  iter: 30820  loss: 0.5725 (0.7171)  loss_classifier: 0.1712 (0.2490)  loss_box_reg: 0.0856 (0.1192)  loss_mask: 0.2368 (0.2670)  loss_objectness: 0.0149 (0.0331)  loss_rpn_box_reg: 0.0338 (0.0487)  time: 0.8460 (1.5205)  data: 0.0030 (0.6821)  lr: 0.001200  max mem: 24032
Evaluating predictions
creating index...
GT annotations already exist!
2020-02-11 10:28:08,475 maskrcnn_benchmark.trainer INFO: eta: 4:42:43  iter: 30840  loss: 0.6120 (0.7170)  loss_classifier: 0.2050 (0.2490)  loss_box_reg: 0.1048 (0.1192)  loss_mask: 0.2510 (0.2670)  loss_objectness: 0.0191 (0.0331)  loss_rpn_box_reg: 0.0344 (0.0487)  time: 0.8475 (1.5200)  data: 0.0029 (0.6816)  lr: 0.001200  max mem: 24032
2020-02-11 10:28:25,242 maskrcnn_benchmark.trainer INFO: eta: 4:42:08  iter: 30860  loss: 0.5799 (0.7169)  loss_classifier: 0.1833 (0.2489)  loss_box_reg: 0.1073 (0.1192)  loss_mask: 0.2383 (0.2670)  loss_objectness: 0.0167 (0.0331)  loss_rpn_box_reg: 0.0364 (0.0487)  time: 0.8375 (1.5196)  data: 0.0029 (0.6812)  lr: 0.001200  max mem: 24032
Loading and preparing results...
resFile is ./inference/coco_2014_val/bbox.json
2020-02-11 10:28:42,063 maskrcnn_benchmark.trainer INFO: eta: 4:41:32  iter: 30880  loss: 0.5336 (0.7168)  loss_classifier: 0.1792 (0.2489)  loss_box_reg: 0.0885 (0.1192)  loss_mask: 0.2297 (0.2669)  loss_objectness: 0.0162 (0.0331)  loss_rpn_box_reg: 0.0377 (0.0487)  time: 0.8409 (1.5191)  data: 0.0029 (0.6807)  lr: 0.001200  max mem: 24032
DONE (t=6.13s)
Running per image evaluation...
Evaluate annotation type *bbox*
2020-02-11 10:28:59,025 maskrcnn_benchmark.trainer INFO: eta: 4:40:57  iter: 30900  loss: 0.5869 (0.7168)  loss_classifier: 0.1887 (0.2489)  loss_box_reg: 0.1064 (0.1192)  loss_mask: 0.2509 (0.2669)  loss_objectness: 0.0147 (0.0331)  loss_rpn_box_reg: 0.0393 (0.0487)  time: 0.8495 (1.5187)  data: 0.0030 (0.6803)  lr: 0.001200  max mem: 24032
DONE (t=23.87s).
Accumulating evaluation results...
DONE (t=0.00s).
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.35980
 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=100 ] = 0.57122
 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=100 ] = 0.39013
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.18758
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.37504
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.46491
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=  1 ] = 0.30269
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets= 10 ] = 0.47100
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.49179
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.29435
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.51677
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.62964
2020-02-11 10:29:15,925 maskrcnn_benchmark.trainer INFO: eta: 4:40:22  iter: 30920  loss: 0.5200 (0.7167)  loss_classifier: 0.1749 (0.2488)  loss_box_reg: 0.0871 (0.1191)  loss_mask: 0.2224 (0.2669)  loss_objectness: 0.0137 (0.0331)  loss_rpn_box_reg: 0.0273 (0.0487)  time: 0.8446 (1.5183)  data: 0.0028 (0.6799)  lr: 0.001200  max mem: 24032
2020-02-11 10:29:32,853 maskrcnn_benchmark.trainer INFO: eta: 4:39:47  iter: 30940  loss: 0.5987 (0.7166)  loss_classifier: 0.2030 (0.2488)  loss_box_reg: 0.1002 (0.1191)  loss_mask: 0.2530 (0.2669)  loss_objectness: 0.0187 (0.0331)  loss_rpn_box_reg: 0.0325 (0.0487)  time: 0.8467 (1.5178)  data: 0.0029 (0.6794)  lr: 0.001200  max mem: 24032
2020-02-11 10:29:49,764 maskrcnn_benchmark.trainer INFO: eta: 4:39:12  iter: 30960  loss: 0.5662 (0.7165)  loss_classifier: 0.1716 (0.2487)  loss_box_reg: 0.0907 (0.1191)  loss_mask: 0.2402 (0.2669)  loss_objectness: 0.0118 (0.0331)  loss_rpn_box_reg: 0.0407 (0.0487)  time: 0.8408 (1.5174)  data: 0.0029 (0.6790)  lr: 0.001200  max mem: 24032
Loading and preparing results...
resFile is ./inference/coco_2014_val/segm.json
2020-02-11 10:30:06,568 maskrcnn_benchmark.trainer INFO: eta: 4:38:36  iter: 30980  loss: 0.5963 (0.7164)  loss_classifier: 0.1968 (0.2487)  loss_box_reg: 0.0994 (0.1191)  loss_mask: 0.2385 (0.2669)  loss_objectness: 0.0143 (0.0331)  loss_rpn_box_reg: 0.0327 (0.0487)  time: 0.8452 (1.5170)  data: 0.0029 (0.6786)  lr: 0.001200  max mem: 24032
DONE (t=14.29s)
Running per image evaluation...
Evaluate annotation type *segm*
2020-02-11 10:30:23,536 maskrcnn_benchmark.trainer INFO: eta: 4:38:01  iter: 31000  loss: 0.5758 (0.7163)  loss_classifier: 0.1995 (0.2487)  loss_box_reg: 0.0975 (0.1191)  loss_mask: 0.2342 (0.2668)  loss_objectness: 0.0183 (0.0330)  loss_rpn_box_reg: 0.0366 (0.0487)  time: 0.8546 (1.5165)  data: 0.0030 (0.6781)  lr: 0.001200  max mem: 24032
2020-02-11 10:30:40,535 maskrcnn_benchmark.trainer INFO: eta: 4:37:26  iter: 31020  loss: 0.5269 (0.7163)  loss_classifier: 0.1699 (0.2486)  loss_box_reg: 0.0823 (0.1191)  loss_mask: 0.2425 (0.2668)  loss_objectness: 0.0143 (0.0330)  loss_rpn_box_reg: 0.0305 (0.0487)  time: 0.8474 (1.5161)  data: 0.0029 (0.6777)  lr: 0.001200  max mem: 24032
DONE (t=31.32s).
Accumulating evaluation results...
DONE (t=0.00s).
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.32549
 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=100 ] = 0.53891
 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=100 ] = 0.34315
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.13387
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.33754
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.47915
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=  1 ] = 0.28430
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets= 10 ] = 0.43112
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.44837
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.25013
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.47631
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.60090
2020-02-11 10:30:49,878 maskrcnn_benchmark.trainer INFO: bbox mAP: 0.3598029427906427, segm mAP: 0.32549145288611253
:::MLL 1581417049.893 eval_accuracy: {"value": {"accuracy": {"BBOX": 0.3598029427906427, "SEGM": 0.32549145288611253}}, "metadata": {"epoch_num": 36, "file": "tools/train_mlperf.py", "lineno": 99}}
:::MLL 1581417049.893 eval_stop: {"value": null, "metadata": {"epoch_num": 36, "file": "tools/train_mlperf.py", "lineno": 100}}
2020-02-11 10:31:00,144 maskrcnn_benchmark.trainer INFO: eta: 4:36:52  iter: 31040  loss: 0.6087 (0.7162)  loss_classifier: 0.2026 (0.2486)  loss_box_reg: 0.1051 (0.1191)  loss_mask: 0.2335 (0.2668)  loss_objectness: 0.0188 (0.0330)  loss_rpn_box_reg: 0.0283 (0.0487)  time: 0.8635 (1.5158)  data: 0.0030 (0.6772)  lr: 0.001200  max mem: 24032
2020-02-11 10:31:16,980 maskrcnn_benchmark.trainer INFO: eta: 4:36:17  iter: 31060  loss: 0.5914 (0.7161)  loss_classifier: 0.1896 (0.2486)  loss_box_reg: 0.1007 (0.1191)  loss_mask: 0.2347 (0.2668)  loss_objectness: 0.0164 (0.0330)  loss_rpn_box_reg: 0.0331 (0.0487)  time: 0.8506 (1.5153)  data: 0.0030 (0.6768)  lr: 0.001200  max mem: 24032
2020-02-11 10:31:33,947 maskrcnn_benchmark.trainer INFO: eta: 4:35:42  iter: 31080  loss: 0.6105 (0.7160)  loss_classifier: 0.2040 (0.2485)  loss_box_reg: 0.1109 (0.1191)  loss_mask: 0.2352 (0.2668)  loss_objectness: 0.0182 (0.0330)  loss_rpn_box_reg: 0.0352 (0.0487)  time: 0.8457 (1.5149)  data: 0.0030 (0.6764)  lr: 0.001200  max mem: 24032
2020-02-11 10:31:50,832 maskrcnn_benchmark.trainer INFO: eta: 4:35:07  iter: 31100  loss: 0.5679 (0.7160)  loss_classifier: 0.1847 (0.2485)  loss_box_reg: 0.0916 (0.1190)  loss_mask: 0.2472 (0.2668)  loss_objectness: 0.0194 (0.0330)  loss_rpn_box_reg: 0.0327 (0.0487)  time: 0.8470 (1.5145)  data: 0.0029 (0.6759)  lr: 0.001200  max mem: 24032
2020-02-11 10:32:07,556 maskrcnn_benchmark.trainer INFO: eta: 4:34:32  iter: 31120  loss: 0.5407 (0.7159)  loss_classifier: 0.1802 (0.2485)  loss_box_reg: 0.0957 (0.1190)  loss_mask: 0.2259 (0.2667)  loss_objectness: 0.0150 (0.0330)  loss_rpn_box_reg: 0.0307 (0.0487)  time: 0.8392 (1.5140)  data: 0.0029 (0.6755)  lr: 0.001200  max mem: 24032
2020-02-11 10:32:24,492 maskrcnn_benchmark.trainer INFO: eta: 4:33:57  iter: 31140  loss: 0.5754 (0.7158)  loss_classifier: 0.1868 (0.2484)  loss_box_reg: 0.1016 (0.1190)  loss_mask: 0.2468 (0.2667)  loss_objectness: 0.0168 (0.0330)  loss_rpn_box_reg: 0.0312 (0.0486)  time: 0.8438 (1.5136)  data: 0.0029 (0.6751)  lr: 0.001200  max mem: 24032
2020-02-11 10:32:41,411 maskrcnn_benchmark.trainer INFO: eta: 4:33:22  iter: 31160  loss: 0.6179 (0.7157)  loss_classifier: 0.2049 (0.2484)  loss_box_reg: 0.1055 (0.1190)  loss_mask: 0.2532 (0.2667)  loss_objectness: 0.0192 (0.0330)  loss_rpn_box_reg: 0.0378 (0.0486)  time: 0.8464 (1.5132)  data: 0.0030 (0.6746)  lr: 0.001200  max mem: 24032
2020-02-11 10:32:58,285 maskrcnn_benchmark.trainer INFO: eta: 4:32:47  iter: 31180  loss: 0.6395 (0.7157)  loss_classifier: 0.2108 (0.2484)  loss_box_reg: 0.1088 (0.1190)  loss_mask: 0.2569 (0.2667)  loss_objectness: 0.0186 (0.0330)  loss_rpn_box_reg: 0.0400 (0.0486)  time: 0.8403 (1.5127)  data: 0.0031 (0.6742)  lr: 0.001200  max mem: 24032
2020-02-11 10:33:15,125 maskrcnn_benchmark.trainer INFO: eta: 4:32:12  iter: 31200  loss: 0.6145 (0.7156)  loss_classifier: 0.2063 (0.2483)  loss_box_reg: 0.1056 (0.1190)  loss_mask: 0.2292 (0.2667)  loss_objectness: 0.0170 (0.0330)  loss_rpn_box_reg: 0.0366 (0.0486)  time: 0.8467 (1.5123)  data: 0.0030 (0.6738)  lr: 0.001200  max mem: 24032
2020-02-11 10:33:31,898 maskrcnn_benchmark.trainer INFO: eta: 4:31:38  iter: 31220  loss: 0.5764 (0.7156)  loss_classifier: 0.1844 (0.2483)  loss_box_reg: 0.1073 (0.1190)  loss_mask: 0.2541 (0.2667)  loss_objectness: 0.0169 (0.0329)  loss_rpn_box_reg: 0.0451 (0.0486)  time: 0.8415 (1.5119)  data: 0.0031 (0.6734)  lr: 0.001200  max mem: 24032
2020-02-11 10:33:48,782 maskrcnn_benchmark.trainer INFO: eta: 4:31:03  iter: 31240  loss: 0.5880 (0.7155)  loss_classifier: 0.2080 (0.2483)  loss_box_reg: 0.1047 (0.1190)  loss_mask: 0.2385 (0.2667)  loss_objectness: 0.0194 (0.0329)  loss_rpn_box_reg: 0.0299 (0.0486)  time: 0.8461 (1.5115)  data: 0.0030 (0.6729)  lr: 0.001200  max mem: 24032
2020-02-11 10:34:05,632 maskrcnn_benchmark.trainer INFO: eta: 4:30:28  iter: 31260  loss: 0.6180 (0.7154)  loss_classifier: 0.1942 (0.2483)  loss_box_reg: 0.0995 (0.1190)  loss_mask: 0.2463 (0.2666)  loss_objectness: 0.0160 (0.0329)  loss_rpn_box_reg: 0.0424 (0.0486)  time: 0.8497 (1.5110)  data: 0.0030 (0.6725)  lr: 0.001200  max mem: 24032
2020-02-11 10:34:22,543 maskrcnn_benchmark.trainer INFO: eta: 4:29:53  iter: 31280  loss: 0.5803 (0.7153)  loss_classifier: 0.1845 (0.2482)  loss_box_reg: 0.0989 (0.1189)  loss_mask: 0.2349 (0.2666)  loss_objectness: 0.0157 (0.0329)  loss_rpn_box_reg: 0.0319 (0.0486)  time: 0.8450 (1.5106)  data: 0.0030 (0.6721)  lr: 0.001200  max mem: 24032
2020-02-11 10:34:39,445 maskrcnn_benchmark.trainer INFO: eta: 4:29:18  iter: 31300  loss: 0.5645 (0.7153)  loss_classifier: 0.1849 (0.2482)  loss_box_reg: 0.0977 (0.1189)  loss_mask: 0.2374 (0.2666)  loss_objectness: 0.0152 (0.0329)  loss_rpn_box_reg: 0.0379 (0.0486)  time: 0.8439 (1.5102)  data: 0.0031 (0.6716)  lr: 0.001200  max mem: 24032
2020-02-11 10:34:56,471 maskrcnn_benchmark.trainer INFO: eta: 4:28:44  iter: 31320  loss: 0.5794 (0.7152)  loss_classifier: 0.1839 (0.2482)  loss_box_reg: 0.0882 (0.1189)  loss_mask: 0.2317 (0.2666)  loss_objectness: 0.0214 (0.0329)  loss_rpn_box_reg: 0.0423 (0.0486)  time: 0.8537 (1.5098)  data: 0.0030 (0.6712)  lr: 0.001200  max mem: 24032
2020-02-11 10:35:13,257 maskrcnn_benchmark.trainer INFO: eta: 4:28:09  iter: 31340  loss: 0.5409 (0.7151)  loss_classifier: 0.1784 (0.2481)  loss_box_reg: 0.0854 (0.1189)  loss_mask: 0.2347 (0.2666)  loss_objectness: 0.0140 (0.0329)  loss_rpn_box_reg: 0.0371 (0.0486)  time: 0.8401 (1.5093)  data: 0.0028 (0.6708)  lr: 0.001200  max mem: 24032
2020-02-11 10:35:30,226 maskrcnn_benchmark.trainer INFO: eta: 4:27:34  iter: 31360  loss: 0.5854 (0.7150)  loss_classifier: 0.1810 (0.2481)  loss_box_reg: 0.0939 (0.1189)  loss_mask: 0.2417 (0.2666)  loss_objectness: 0.0138 (0.0329)  loss_rpn_box_reg: 0.0341 (0.0486)  time: 0.8471 (1.5089)  data: 0.0031 (0.6704)  lr: 0.001200  max mem: 24032
2020-02-11 10:35:47,110 maskrcnn_benchmark.trainer INFO: eta: 4:27:00  iter: 31380  loss: 0.6055 (0.7149)  loss_classifier: 0.1821 (0.2480)  loss_box_reg: 0.0977 (0.1189)  loss_mask: 0.2440 (0.2665)  loss_objectness: 0.0176 (0.0329)  loss_rpn_box_reg: 0.0426 (0.0486)  time: 0.8442 (1.5085)  data: 0.0030 (0.6699)  lr: 0.001200  max mem: 24032
2020-02-11 10:36:04,086 maskrcnn_benchmark.trainer INFO: eta: 4:26:25  iter: 31400  loss: 0.6385 (0.7149)  loss_classifier: 0.2247 (0.2480)  loss_box_reg: 0.1011 (0.1189)  loss_mask: 0.2445 (0.2665)  loss_objectness: 0.0212 (0.0329)  loss_rpn_box_reg: 0.0403 (0.0486)  time: 0.8485 (1.5081)  data: 0.0030 (0.6695)  lr: 0.001200  max mem: 24032
2020-02-11 10:36:20,969 maskrcnn_benchmark.trainer INFO: eta: 4:25:50  iter: 31420  loss: 0.5992 (0.7148)  loss_classifier: 0.2080 (0.2480)  loss_box_reg: 0.1006 (0.1189)  loss_mask: 0.2411 (0.2665)  loss_objectness: 0.0174 (0.0329)  loss_rpn_box_reg: 0.0289 (0.0486)  time: 0.8408 (1.5076)  data: 0.0031 (0.6691)  lr: 0.001200  max mem: 24032
2020-02-11 10:36:37,688 maskrcnn_benchmark.trainer INFO: eta: 4:25:16  iter: 31440  loss: 0.5945 (0.7147)  loss_classifier: 0.1841 (0.2480)  loss_box_reg: 0.1006 (0.1189)  loss_mask: 0.2405 (0.2665)  loss_objectness: 0.0147 (0.0328)  loss_rpn_box_reg: 0.0253 (0.0486)  time: 0.8327 (1.5072)  data: 0.0030 (0.6687)  lr: 0.001200  max mem: 24032
2020-02-11 10:36:54,565 maskrcnn_benchmark.trainer INFO: eta: 4:24:41  iter: 31460  loss: 0.5949 (0.7147)  loss_classifier: 0.1939 (0.2479)  loss_box_reg: 0.1004 (0.1189)  loss_mask: 0.2419 (0.2665)  loss_objectness: 0.0169 (0.0328)  loss_rpn_box_reg: 0.0380 (0.0486)  time: 0.8440 (1.5068)  data: 0.0031 (0.6682)  lr: 0.001200  max mem: 24032
2020-02-11 10:37:11,552 maskrcnn_benchmark.trainer INFO: eta: 4:24:06  iter: 31480  loss: 0.5993 (0.7146)  loss_classifier: 0.2047 (0.2479)  loss_box_reg: 0.0953 (0.1188)  loss_mask: 0.2458 (0.2665)  loss_objectness: 0.0188 (0.0328)  loss_rpn_box_reg: 0.0335 (0.0486)  time: 0.8498 (1.5064)  data: 0.0030 (0.6678)  lr: 0.001200  max mem: 24032
2020-02-11 10:37:28,360 maskrcnn_benchmark.trainer INFO: eta: 4:23:32  iter: 31500  loss: 0.5808 (0.7145)  loss_classifier: 0.1812 (0.2479)  loss_box_reg: 0.0985 (0.1188)  loss_mask: 0.2484 (0.2665)  loss_objectness: 0.0139 (0.0328)  loss_rpn_box_reg: 0.0345 (0.0485)  time: 0.8403 (1.5059)  data: 0.0030 (0.6674)  lr: 0.001200  max mem: 24032
2020-02-11 10:37:45,225 maskrcnn_benchmark.trainer INFO: eta: 4:22:57  iter: 31520  loss: 0.6133 (0.7145)  loss_classifier: 0.2031 (0.2478)  loss_box_reg: 0.1121 (0.1188)  loss_mask: 0.2487 (0.2664)  loss_objectness: 0.0157 (0.0328)  loss_rpn_box_reg: 0.0306 (0.0485)  time: 0.8378 (1.5055)  data: 0.0030 (0.6670)  lr: 0.001200  max mem: 24032
2020-02-11 10:38:02,074 maskrcnn_benchmark.trainer INFO: eta: 4:22:23  iter: 31540  loss: 0.5656 (0.7144)  loss_classifier: 0.1860 (0.2478)  loss_box_reg: 0.0950 (0.1188)  loss_mask: 0.2310 (0.2664)  loss_objectness: 0.0170 (0.0328)  loss_rpn_box_reg: 0.0323 (0.0485)  time: 0.8422 (1.5051)  data: 0.0030 (0.6666)  lr: 0.001200  max mem: 24032
2020-02-11 10:38:18,989 maskrcnn_benchmark.trainer INFO: eta: 4:21:48  iter: 31560  loss: 0.5580 (0.7143)  loss_classifier: 0.1818 (0.2478)  loss_box_reg: 0.0877 (0.1188)  loss_mask: 0.2485 (0.2664)  loss_objectness: 0.0136 (0.0328)  loss_rpn_box_reg: 0.0281 (0.0485)  time: 0.8462 (1.5047)  data: 0.0029 (0.6661)  lr: 0.001200  max mem: 24032
2020-02-11 10:38:35,968 maskrcnn_benchmark.trainer INFO: eta: 4:21:14  iter: 31580  loss: 0.6122 (0.7142)  loss_classifier: 0.2052 (0.2477)  loss_box_reg: 0.0959 (0.1188)  loss_mask: 0.2409 (0.2664)  loss_objectness: 0.0221 (0.0328)  loss_rpn_box_reg: 0.0469 (0.0485)  time: 0.8552 (1.5043)  data: 0.0031 (0.6657)  lr: 0.001200  max mem: 24032
2020-02-11 10:38:52,901 maskrcnn_benchmark.trainer INFO: eta: 4:20:40  iter: 31600  loss: 0.5755 (0.7142)  loss_classifier: 0.2026 (0.2477)  loss_box_reg: 0.0986 (0.1188)  loss_mask: 0.2315 (0.2664)  loss_objectness: 0.0182 (0.0328)  loss_rpn_box_reg: 0.0315 (0.0485)  time: 0.8498 (1.5039)  data: 0.0031 (0.6653)  lr: 0.001200  max mem: 24032
2020-02-11 10:39:09,757 maskrcnn_benchmark.trainer INFO: eta: 4:20:05  iter: 31620  loss: 0.6158 (0.7141)  loss_classifier: 0.1960 (0.2477)  loss_box_reg: 0.1084 (0.1188)  loss_mask: 0.2443 (0.2664)  loss_objectness: 0.0195 (0.0328)  loss_rpn_box_reg: 0.0408 (0.0485)  time: 0.8462 (1.5034)  data: 0.0032 (0.6649)  lr: 0.001200  max mem: 24032
2020-02-11 10:39:26,610 maskrcnn_benchmark.trainer INFO: eta: 4:19:31  iter: 31640  loss: 0.5873 (0.7140)  loss_classifier: 0.1849 (0.2477)  loss_box_reg: 0.0989 (0.1188)  loss_mask: 0.2445 (0.2664)  loss_objectness: 0.0134 (0.0328)  loss_rpn_box_reg: 0.0462 (0.0485)  time: 0.8431 (1.5030)  data: 0.0031 (0.6645)  lr: 0.001200  max mem: 24032
2020-02-11 10:39:43,414 maskrcnn_benchmark.trainer INFO: eta: 4:18:56  iter: 31660  loss: 0.5529 (0.7140)  loss_classifier: 0.1832 (0.2476)  loss_box_reg: 0.0944 (0.1187)  loss_mask: 0.2421 (0.2663)  loss_objectness: 0.0155 (0.0327)  loss_rpn_box_reg: 0.0319 (0.0485)  time: 0.8406 (1.5026)  data: 0.0029 (0.6640)  lr: 0.001200  max mem: 24032
Gradient overflow.  Skipping step, loss scaler 0 reducing loss scale to 131072.0
Gradient overflow.  Skipping step, loss scaler 0 reducing loss scale to 131072.0
Gradient overflow.  Skipping step, loss scaler 0 reducing loss scale to 131072.0
Gradient overflow.  Skipping step, loss scaler 0 reducing loss scale to 131072.0
Gradient overflow.  Skipping step, loss scaler 0 reducing loss scale to 131072.0
Gradient overflow.  Skipping step, loss scaler 0 reducing loss scale to 131072.0
Gradient overflow.  Skipping step, loss scaler 0 reducing loss scale to 131072.0
Gradient overflow.  Skipping step, loss scaler 0 reducing loss scale to 131072.0
:::MLL 1581417593.234 epoch_stop: {"value": null, "metadata": {"epoch_num": 37, "file": "tools/train_mlperf.py", "lineno": 75}}
:::MLL 1581417593.235 block_stop: {"value": null, "metadata": {"first_epoch_num": 37, "file": "tools/train_mlperf.py", "lineno": 76}}
:::MLL 1581417593.235 eval_start: {"value": null, "metadata": {"epoch_num": 37, "file": "tools/train_mlperf.py", "lineno": 77}}
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
2020-02-11 10:39:53,959 maskrcnn_benchmark.data.build WARNING: When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
Done (t=3.84s)
creating index...
Done (t=3.90s)
creating index...
Done (t=3.94s)
creating index...
Done (t=3.95s)
creating index...
Done (t=3.88s)
creating index...
Done (t=3.94s)
creating index...
Done (t=3.94s)
creating index...
index created!
Done (t=4.03s)
creating index...
  0%|                                                  | 0/2532 [00:00<?, ?it/s]index created!
index created!
index created!
index created!
index created!
index created!
  0%|                                                  | 0/2532 [00:00<?, ?it/s]2020-02-11 10:39:58,338 maskrcnn_benchmark.inference INFO: Start evaluation on coco_2014_val dataset(40504 images).
  0%|                                                  | 0/2532 [00:00<?, ?it/s]index created!
100%|███████████████████████████████████████| 2532/2532 [03:46<00:00, 11.19it/s]
100%|███████████████████████████████████████| 2532/2532 [03:46<00:00, 11.19it/s]
100%|██████████████████████████████████████▉| 2527/2532 [03:46<00:00, 11.04it/s]
 98%|██████████████████████████████████████▎| 2491/2532 [03:46<00:03, 11.67it/s]
100%|███████████████████████████████████████| 2532/2532 [03:48<00:00, 11.09it/s]
100%|██████████████████████████████████████▉| 2530/2532 [03:50<00:00, 12.30it/s]
100%|██████████████████████████████████████▉| 2531/2532 [03:50<00:00, 12.26it/s]
100%|███████████████████████████████████████| 2532/2532 [03:51<00:00, 10.93it/s]
2020-02-11 10:43:50,119 maskrcnn_benchmark.inference INFO: Total inference time: 0:03:51.780545 (0.045779289945933554 s / img per device, on 8 devices)
2020-02-11 10:43:51,130 maskrcnn_benchmark.inference INFO: Preparing results for COCO format
2020-02-11 10:43:51,131 maskrcnn_benchmark.inference INFO: Preparing bbox results
2020-02-11 10:43:52,657 maskrcnn_benchmark.inference INFO: Preparing segm results
:::MLL 1581418059.294 block_start: {"value": null, "metadata": {"first_epoch_num": 38, "epoch_count": 1, "file": "tools/train_mlperf.py", "lineno": 134}}
:::MLL 1581418059.297 epoch_start: {"value": null, "metadata": {"epoch_num": 38, "file": "tools/train_mlperf.py", "lineno": 135}}
2020-02-11 10:47:46,056 maskrcnn_benchmark.trainer INFO: eta: 4:20:54  iter: 31680  loss: 0.5496 (0.7139)  loss_classifier: 0.1836 (0.2476)  loss_box_reg: 0.0937 (0.1187)  loss_mask: 0.2339 (0.2663)  loss_objectness: 0.0126 (0.0327)  loss_rpn_box_reg: 0.0320 (0.0485)  time: 0.8357 (1.5169)  data: 0.0029 (0.6783)  lr: 0.001200  max mem: 24032
Evaluating predictions
creating index...
GT annotations already exist!
2020-02-11 10:48:02,973 maskrcnn_benchmark.trainer INFO: eta: 4:20:19  iter: 31700  loss: 0.5770 (0.7138)  loss_classifier: 0.1796 (0.2476)  loss_box_reg: 0.0931 (0.1187)  loss_mask: 0.2486 (0.2663)  loss_objectness: 0.0139 (0.0327)  loss_rpn_box_reg: 0.0349 (0.0485)  time: 0.8441 (1.5165)  data: 0.0030 (0.6779)  lr: 0.001200  max mem: 24032
2020-02-11 10:48:19,764 maskrcnn_benchmark.trainer INFO: eta: 4:19:44  iter: 31720  loss: 0.5699 (0.7137)  loss_classifier: 0.1886 (0.2475)  loss_box_reg: 0.0946 (0.1187)  loss_mask: 0.2384 (0.2663)  loss_objectness: 0.0200 (0.0327)  loss_rpn_box_reg: 0.0294 (0.0485)  time: 0.8398 (1.5160)  data: 0.0029 (0.6775)  lr: 0.001200  max mem: 24032
Loading and preparing results...
resFile is ./inference/coco_2014_val/bbox.json
DONE (t=6.01s)
Running per image evaluation...
Evaluate annotation type *bbox*
2020-02-11 10:48:36,856 maskrcnn_benchmark.trainer INFO: eta: 4:19:10  iter: 31740  loss: 0.5894 (0.7137)  loss_classifier: 0.1928 (0.2475)  loss_box_reg: 0.0970 (0.1187)  loss_mask: 0.2441 (0.2663)  loss_objectness: 0.0165 (0.0327)  loss_rpn_box_reg: 0.0313 (0.0485)  time: 0.8443 (1.5156)  data: 0.0029 (0.6771)  lr: 0.001200  max mem: 24032
2020-02-11 10:48:53,824 maskrcnn_benchmark.trainer INFO: eta: 4:18:35  iter: 31760  loss: 0.5423 (0.7136)  loss_classifier: 0.1693 (0.2475)  loss_box_reg: 0.0912 (0.1187)  loss_mask: 0.2333 (0.2663)  loss_objectness: 0.0153 (0.0327)  loss_rpn_box_reg: 0.0327 (0.0485)  time: 0.8470 (1.5152)  data: 0.0029 (0.6766)  lr: 0.001200  max mem: 24032
DONE (t=24.44s).
Accumulating evaluation results...
DONE (t=0.00s).
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.35958
 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=100 ] = 0.57043
 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=100 ] = 0.39106
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.18765
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.37563
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.46441
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=  1 ] = 0.30257
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets= 10 ] = 0.47018
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.49043
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.29211
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.51611
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.62943
2020-02-11 10:49:10,810 maskrcnn_benchmark.trainer INFO: eta: 4:18:01  iter: 31780  loss: 0.5341 (0.7135)  loss_classifier: 0.1738 (0.2474)  loss_box_reg: 0.0814 (0.1187)  loss_mask: 0.2359 (0.2662)  loss_objectness: 0.0137 (0.0327)  loss_rpn_box_reg: 0.0315 (0.0485)  time: 0.8483 (1.5148)  data: 0.0028 (0.6762)  lr: 0.001200  max mem: 24032
2020-02-11 10:49:27,835 maskrcnn_benchmark.trainer INFO: eta: 4:17:26  iter: 31800  loss: 0.6036 (0.7134)  loss_classifier: 0.1862 (0.2474)  loss_box_reg: 0.0988 (0.1187)  loss_mask: 0.2478 (0.2662)  loss_objectness: 0.0202 (0.0327)  loss_rpn_box_reg: 0.0361 (0.0485)  time: 0.8480 (1.5144)  data: 0.0028 (0.6758)  lr: 0.001200  max mem: 24032
2020-02-11 10:49:44,723 maskrcnn_benchmark.trainer INFO: eta: 4:16:51  iter: 31820  loss: 0.5643 (0.7133)  loss_classifier: 0.1782 (0.2473)  loss_box_reg: 0.0974 (0.1186)  loss_mask: 0.2414 (0.2662)  loss_objectness: 0.0160 (0.0327)  loss_rpn_box_reg: 0.0311 (0.0484)  time: 0.8393 (1.5139)  data: 0.0029 (0.6754)  lr: 0.001200  max mem: 24032
Loading and preparing results...
resFile is ./inference/coco_2014_val/segm.json
2020-02-11 10:50:01,544 maskrcnn_benchmark.trainer INFO: eta: 4:16:17  iter: 31840  loss: 0.6045 (0.7133)  loss_classifier: 0.1961 (0.2473)  loss_box_reg: 0.1045 (0.1186)  loss_mask: 0.2573 (0.2662)  loss_objectness: 0.0179 (0.0327)  loss_rpn_box_reg: 0.0300 (0.0484)  time: 0.8404 (1.5135)  data: 0.0029 (0.6749)  lr: 0.001200  max mem: 24032
DONE (t=13.97s)
Running per image evaluation...
Evaluate annotation type *segm*
2020-02-11 10:50:18,583 maskrcnn_benchmark.trainer INFO: eta: 4:15:42  iter: 31860  loss: 0.5424 (0.7132)  loss_classifier: 0.1640 (0.2473)  loss_box_reg: 0.0828 (0.1186)  loss_mask: 0.2419 (0.2662)  loss_objectness: 0.0169 (0.0327)  loss_rpn_box_reg: 0.0323 (0.0484)  time: 0.8419 (1.5131)  data: 0.0029 (0.6745)  lr: 0.001200  max mem: 24032
DONE (t=30.77s).
Accumulating evaluation results...
DONE (t=0.00s).
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.32525
 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=100 ] = 0.53813
 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=100 ] = 0.34337
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.13360
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.33744
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.47859
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=  1 ] = 0.28382
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets= 10 ] = 0.43018
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.44688
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.24763
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.47569
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.60007
2020-02-11 10:50:36,916 maskrcnn_benchmark.trainer INFO: bbox mAP: 0.3595823954855808, segm mAP: 0.3252502677584773
:::MLL 1581418236.934 eval_accuracy: {"value": {"accuracy": {"BBOX": 0.3595823954855808, "SEGM": 0.3252502677584773}}, "metadata": {"epoch_num": 37, "file": "tools/train_mlperf.py", "lineno": 99}}
:::MLL 1581418236.935 eval_stop: {"value": null, "metadata": {"epoch_num": 37, "file": "tools/train_mlperf.py", "lineno": 100}}
2020-02-11 10:50:37,769 maskrcnn_benchmark.trainer INFO: eta: 4:15:09  iter: 31880  loss: 0.6227 (0.7131)  loss_classifier: 0.2102 (0.2472)  loss_box_reg: 0.1134 (0.1186)  loss_mask: 0.2483 (0.2662)  loss_objectness: 0.0188 (0.0326)  loss_rpn_box_reg: 0.0346 (0.0484)  time: 0.8497 (1.5128)  data: 0.0030 (0.6741)  lr: 0.001200  max mem: 24032
2020-02-11 10:50:54,743 maskrcnn_benchmark.trainer INFO: eta: 4:14:34  iter: 31900  loss: 0.6013 (0.7130)  loss_classifier: 0.1947 (0.2472)  loss_box_reg: 0.0968 (0.1186)  loss_mask: 0.2387 (0.2662)  loss_objectness: 0.0207 (0.0326)  loss_rpn_box_reg: 0.0384 (0.0484)  time: 0.8495 (1.5123)  data: 0.0030 (0.6737)  lr: 0.001200  max mem: 24032
2020-02-11 10:51:11,732 maskrcnn_benchmark.trainer INFO: eta: 4:14:00  iter: 31920  loss: 0.5873 (0.7130)  loss_classifier: 0.2025 (0.2472)  loss_box_reg: 0.1040 (0.1186)  loss_mask: 0.2349 (0.2661)  loss_objectness: 0.0160 (0.0326)  loss_rpn_box_reg: 0.0371 (0.0484)  time: 0.8480 (1.5119)  data: 0.0029 (0.6733)  lr: 0.001200  max mem: 24032
2020-02-11 10:51:28,610 maskrcnn_benchmark.trainer INFO: eta: 4:13:25  iter: 31940  loss: 0.5831 (0.7129)  loss_classifier: 0.1890 (0.2472)  loss_box_reg: 0.0965 (0.1186)  loss_mask: 0.2344 (0.2661)  loss_objectness: 0.0208 (0.0326)  loss_rpn_box_reg: 0.0375 (0.0484)  time: 0.8421 (1.5115)  data: 0.0028 (0.6728)  lr: 0.001200  max mem: 24032
2020-02-11 10:51:45,455 maskrcnn_benchmark.trainer INFO: eta: 4:12:51  iter: 31960  loss: 0.5307 (0.7128)  loss_classifier: 0.1736 (0.2471)  loss_box_reg: 0.0843 (0.1186)  loss_mask: 0.2221 (0.2661)  loss_objectness: 0.0142 (0.0326)  loss_rpn_box_reg: 0.0267 (0.0484)  time: 0.8405 (1.5111)  data: 0.0027 (0.6724)  lr: 0.001200  max mem: 24032
2020-02-11 10:52:02,324 maskrcnn_benchmark.trainer INFO: eta: 4:12:16  iter: 31980  loss: 0.5923 (0.7127)  loss_classifier: 0.1922 (0.2471)  loss_box_reg: 0.0951 (0.1186)  loss_mask: 0.2506 (0.2661)  loss_objectness: 0.0178 (0.0326)  loss_rpn_box_reg: 0.0283 (0.0484)  time: 0.8358 (1.5107)  data: 0.0030 (0.6720)  lr: 0.001200  max mem: 24032
2020-02-11 10:52:19,233 maskrcnn_benchmark.trainer INFO: eta: 4:11:42  iter: 32000  loss: 0.5815 (0.7126)  loss_classifier: 0.1954 (0.2470)  loss_box_reg: 0.0991 (0.1185)  loss_mask: 0.2456 (0.2661)  loss_objectness: 0.0160 (0.0326)  loss_rpn_box_reg: 0.0358 (0.0484)  time: 0.8500 (1.5103)  data: 0.0031 (0.6716)  lr: 0.001200  max mem: 24032
2020-02-11 10:52:36,247 maskrcnn_benchmark.trainer INFO: eta: 4:11:08  iter: 32020  loss: 0.5524 (0.7125)  loss_classifier: 0.1842 (0.2470)  loss_box_reg: 0.0873 (0.1185)  loss_mask: 0.2462 (0.2661)  loss_objectness: 0.0168 (0.0326)  loss_rpn_box_reg: 0.0289 (0.0484)  time: 0.8528 (1.5098)  data: 0.0030 (0.6712)  lr: 0.001200  max mem: 24032
2020-02-11 10:52:53,035 maskrcnn_benchmark.trainer INFO: eta: 4:10:33  iter: 32040  loss: 0.5841 (0.7125)  loss_classifier: 0.1987 (0.2470)  loss_box_reg: 0.0918 (0.1185)  loss_mask: 0.2444 (0.2661)  loss_objectness: 0.0186 (0.0326)  loss_rpn_box_reg: 0.0393 (0.0484)  time: 0.8402 (1.5094)  data: 0.0030 (0.6707)  lr: 0.001200  max mem: 24032
2020-02-11 10:53:10,031 maskrcnn_benchmark.trainer INFO: eta: 4:09:59  iter: 32060  loss: 0.6319 (0.7124)  loss_classifier: 0.1974 (0.2469)  loss_box_reg: 0.1062 (0.1185)  loss_mask: 0.2417 (0.2660)  loss_objectness: 0.0162 (0.0326)  loss_rpn_box_reg: 0.0381 (0.0484)  time: 0.8492 (1.5090)  data: 0.0031 (0.6703)  lr: 0.001200  max mem: 24032
2020-02-11 10:53:26,908 maskrcnn_benchmark.trainer INFO: eta: 4:09:25  iter: 32080  loss: 0.5722 (0.7123)  loss_classifier: 0.1733 (0.2469)  loss_box_reg: 0.0915 (0.1185)  loss_mask: 0.2301 (0.2660)  loss_objectness: 0.0157 (0.0326)  loss_rpn_box_reg: 0.0243 (0.0484)  time: 0.8433 (1.5086)  data: 0.0030 (0.6699)  lr: 0.001200  max mem: 24032
2020-02-11 10:53:43,767 maskrcnn_benchmark.trainer INFO: eta: 4:08:51  iter: 32100  loss: 0.5699 (0.7122)  loss_classifier: 0.1990 (0.2469)  loss_box_reg: 0.0961 (0.1185)  loss_mask: 0.2224 (0.2660)  loss_objectness: 0.0180 (0.0326)  loss_rpn_box_reg: 0.0352 (0.0484)  time: 0.8410 (1.5082)  data: 0.0032 (0.6695)  lr: 0.001200  max mem: 24032
2020-02-11 10:54:00,668 maskrcnn_benchmark.trainer INFO: eta: 4:08:16  iter: 32120  loss: 0.5935 (0.7122)  loss_classifier: 0.1933 (0.2468)  loss_box_reg: 0.1052 (0.1185)  loss_mask: 0.2508 (0.2660)  loss_objectness: 0.0168 (0.0325)  loss_rpn_box_reg: 0.0306 (0.0483)  time: 0.8436 (1.5078)  data: 0.0031 (0.6691)  lr: 0.001200  max mem: 24032
2020-02-11 10:54:17,660 maskrcnn_benchmark.trainer INFO: eta: 4:07:42  iter: 32140  loss: 0.5990 (0.7121)  loss_classifier: 0.1990 (0.2468)  loss_box_reg: 0.0978 (0.1185)  loss_mask: 0.2438 (0.2660)  loss_objectness: 0.0182 (0.0325)  loss_rpn_box_reg: 0.0386 (0.0483)  time: 0.8513 (1.5074)  data: 0.0031 (0.6687)  lr: 0.001200  max mem: 24032
2020-02-11 10:54:34,690 maskrcnn_benchmark.trainer INFO: eta: 4:07:08  iter: 32160  loss: 0.5512 (0.7120)  loss_classifier: 0.1826 (0.2468)  loss_box_reg: 0.0946 (0.1184)  loss_mask: 0.2339 (0.2660)  loss_objectness: 0.0195 (0.0325)  loss_rpn_box_reg: 0.0304 (0.0483)  time: 0.8491 (1.5070)  data: 0.0030 (0.6683)  lr: 0.001200  max mem: 24032
2020-02-11 10:54:51,623 maskrcnn_benchmark.trainer INFO: eta: 4:06:34  iter: 32180  loss: 0.5570 (0.7119)  loss_classifier: 0.1812 (0.2467)  loss_box_reg: 0.0902 (0.1184)  loss_mask: 0.2425 (0.2659)  loss_objectness: 0.0171 (0.0325)  loss_rpn_box_reg: 0.0309 (0.0483)  time: 0.8534 (1.5065)  data: 0.0030 (0.6678)  lr: 0.001200  max mem: 24032
2020-02-11 10:55:08,486 maskrcnn_benchmark.trainer INFO: eta: 4:06:00  iter: 32200  loss: 0.5652 (0.7119)  loss_classifier: 0.1970 (0.2467)  loss_box_reg: 0.0930 (0.1184)  loss_mask: 0.2296 (0.2659)  loss_objectness: 0.0192 (0.0325)  loss_rpn_box_reg: 0.0372 (0.0483)  time: 0.8401 (1.5061)  data: 0.0031 (0.6674)  lr: 0.001200  max mem: 24032
2020-02-11 10:55:25,257 maskrcnn_benchmark.trainer INFO: eta: 4:05:25  iter: 32220  loss: 0.5434 (0.7118)  loss_classifier: 0.1628 (0.2467)  loss_box_reg: 0.0880 (0.1184)  loss_mask: 0.2403 (0.2659)  loss_objectness: 0.0160 (0.0325)  loss_rpn_box_reg: 0.0353 (0.0483)  time: 0.8393 (1.5057)  data: 0.0030 (0.6670)  lr: 0.001200  max mem: 24032
2020-02-11 10:55:42,381 maskrcnn_benchmark.trainer INFO: eta: 4:04:51  iter: 32240  loss: 0.5831 (0.7117)  loss_classifier: 0.1786 (0.2466)  loss_box_reg: 0.0899 (0.1184)  loss_mask: 0.2349 (0.2659)  loss_objectness: 0.0157 (0.0325)  loss_rpn_box_reg: 0.0355 (0.0483)  time: 0.8501 (1.5053)  data: 0.0029 (0.6666)  lr: 0.001200  max mem: 24032
2020-02-11 10:55:59,123 maskrcnn_benchmark.trainer INFO: eta: 4:04:17  iter: 32260  loss: 0.5732 (0.7116)  loss_classifier: 0.1845 (0.2466)  loss_box_reg: 0.0923 (0.1184)  loss_mask: 0.2395 (0.2659)  loss_objectness: 0.0153 (0.0325)  loss_rpn_box_reg: 0.0326 (0.0483)  time: 0.8336 (1.5049)  data: 0.0029 (0.6662)  lr: 0.001200  max mem: 24032
2020-02-11 10:56:15,974 maskrcnn_benchmark.trainer INFO: eta: 4:03:43  iter: 32280  loss: 0.5692 (0.7115)  loss_classifier: 0.1998 (0.2466)  loss_box_reg: 0.0939 (0.1184)  loss_mask: 0.2310 (0.2658)  loss_objectness: 0.0172 (0.0325)  loss_rpn_box_reg: 0.0321 (0.0483)  time: 0.8434 (1.5045)  data: 0.0028 (0.6658)  lr: 0.001200  max mem: 24032
2020-02-11 10:56:33,040 maskrcnn_benchmark.trainer INFO: eta: 4:03:09  iter: 32300  loss: 0.5645 (0.7115)  loss_classifier: 0.1786 (0.2465)  loss_box_reg: 0.0899 (0.1184)  loss_mask: 0.2416 (0.2658)  loss_objectness: 0.0140 (0.0325)  loss_rpn_box_reg: 0.0295 (0.0483)  time: 0.8503 (1.5041)  data: 0.0031 (0.6654)  lr: 0.001200  max mem: 24032
2020-02-11 10:56:50,061 maskrcnn_benchmark.trainer INFO: eta: 4:02:35  iter: 32320  loss: 0.5405 (0.7114)  loss_classifier: 0.1714 (0.2465)  loss_box_reg: 0.0949 (0.1183)  loss_mask: 0.2311 (0.2658)  loss_objectness: 0.0159 (0.0325)  loss_rpn_box_reg: 0.0308 (0.0483)  time: 0.8545 (1.5037)  data: 0.0028 (0.6650)  lr: 0.001200  max mem: 24032
2020-02-11 10:57:07,003 maskrcnn_benchmark.trainer INFO: eta: 4:02:01  iter: 32340  loss: 0.5887 (0.7113)  loss_classifier: 0.1934 (0.2464)  loss_box_reg: 0.0999 (0.1183)  loss_mask: 0.2298 (0.2658)  loss_objectness: 0.0152 (0.0324)  loss_rpn_box_reg: 0.0342 (0.0483)  time: 0.8496 (1.5033)  data: 0.0031 (0.6646)  lr: 0.001200  max mem: 24032
2020-02-11 10:57:24,020 maskrcnn_benchmark.trainer INFO: eta: 4:01:27  iter: 32360  loss: 0.5601 (0.7112)  loss_classifier: 0.1860 (0.2464)  loss_box_reg: 0.1000 (0.1183)  loss_mask: 0.2317 (0.2658)  loss_objectness: 0.0172 (0.0324)  loss_rpn_box_reg: 0.0363 (0.0483)  time: 0.8490 (1.5029)  data: 0.0030 (0.6641)  lr: 0.001200  max mem: 24032
2020-02-11 10:57:40,915 maskrcnn_benchmark.trainer INFO: eta: 4:00:53  iter: 32380  loss: 0.5556 (0.7111)  loss_classifier: 0.1920 (0.2464)  loss_box_reg: 0.0977 (0.1183)  loss_mask: 0.2377 (0.2658)  loss_objectness: 0.0159 (0.0324)  loss_rpn_box_reg: 0.0421 (0.0483)  time: 0.8435 (1.5025)  data: 0.0030 (0.6637)  lr: 0.001200  max mem: 24032
2020-02-11 10:57:57,828 maskrcnn_benchmark.trainer INFO: eta: 4:00:19  iter: 32400  loss: 0.6119 (0.7111)  loss_classifier: 0.2193 (0.2464)  loss_box_reg: 0.1038 (0.1183)  loss_mask: 0.2419 (0.2657)  loss_objectness: 0.0214 (0.0324)  loss_rpn_box_reg: 0.0359 (0.0483)  time: 0.8496 (1.5021)  data: 0.0032 (0.6633)  lr: 0.001200  max mem: 24032
2020-02-11 10:58:14,819 maskrcnn_benchmark.trainer INFO: eta: 3:59:45  iter: 32420  loss: 0.5964 (0.7110)  loss_classifier: 0.1928 (0.2463)  loss_box_reg: 0.0974 (0.1183)  loss_mask: 0.2396 (0.2657)  loss_objectness: 0.0183 (0.0324)  loss_rpn_box_reg: 0.0299 (0.0483)  time: 0.8495 (1.5017)  data: 0.0031 (0.6629)  lr: 0.001200  max mem: 24032
2020-02-11 10:58:31,648 maskrcnn_benchmark.trainer INFO: eta: 3:59:11  iter: 32440  loss: 0.6148 (0.7110)  loss_classifier: 0.2054 (0.2463)  loss_box_reg: 0.1033 (0.1183)  loss_mask: 0.2443 (0.2657)  loss_objectness: 0.0140 (0.0324)  loss_rpn_box_reg: 0.0387 (0.0483)  time: 0.8444 (1.5013)  data: 0.0031 (0.6625)  lr: 0.001200  max mem: 24032
2020-02-11 10:58:48,635 maskrcnn_benchmark.trainer INFO: eta: 3:58:38  iter: 32460  loss: 0.5936 (0.7109)  loss_classifier: 0.2050 (0.2463)  loss_box_reg: 0.1063 (0.1183)  loss_mask: 0.2369 (0.2657)  loss_objectness: 0.0188 (0.0324)  loss_rpn_box_reg: 0.0313 (0.0483)  time: 0.8462 (1.5008)  data: 0.0030 (0.6621)  lr: 0.001200  max mem: 24032
2020-02-11 10:59:05,540 maskrcnn_benchmark.trainer INFO: eta: 3:58:04  iter: 32480  loss: 0.6022 (0.7108)  loss_classifier: 0.1980 (0.2462)  loss_box_reg: 0.0952 (0.1183)  loss_mask: 0.2387 (0.2657)  loss_objectness: 0.0166 (0.0324)  loss_rpn_box_reg: 0.0332 (0.0483)  time: 0.8399 (1.5004)  data: 0.0029 (0.6617)  lr: 0.001200  max mem: 24032
2020-02-11 10:59:22,598 maskrcnn_benchmark.trainer INFO: eta: 3:57:30  iter: 32500  loss: 0.5803 (0.7108)  loss_classifier: 0.2001 (0.2462)  loss_box_reg: 0.0999 (0.1183)  loss_mask: 0.2394 (0.2657)  loss_objectness: 0.0173 (0.0324)  loss_rpn_box_reg: 0.0389 (0.0482)  time: 0.8468 (1.5000)  data: 0.0030 (0.6613)  lr: 0.001200  max mem: 24032
2020-02-11 10:59:39,546 maskrcnn_benchmark.trainer INFO: eta: 3:56:56  iter: 32520  loss: 0.5967 (0.7107)  loss_classifier: 0.2032 (0.2462)  loss_box_reg: 0.1037 (0.1182)  loss_mask: 0.2415 (0.2657)  loss_objectness: 0.0160 (0.0324)  loss_rpn_box_reg: 0.0337 (0.0482)  time: 0.8493 (1.4996)  data: 0.0031 (0.6609)  lr: 0.001200  max mem: 24032
:::MLL 1581418785.841 epoch_stop: {"value": null, "metadata": {"epoch_num": 38, "file": "tools/train_mlperf.py", "lineno": 75}}
:::MLL 1581418785.842 block_stop: {"value": null, "metadata": {"first_epoch_num": 38, "file": "tools/train_mlperf.py", "lineno": 76}}
:::MLL 1581418785.843 eval_start: {"value": null, "metadata": {"epoch_num": 38, "file": "tools/train_mlperf.py", "lineno": 77}}
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
2020-02-11 10:59:46,616 maskrcnn_benchmark.data.build WARNING: When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
Done (t=3.87s)
creating index...
Done (t=3.88s)
creating index...
Done (t=3.89s)
creating index...
index created!
index created!
index created!
Done (t=3.97s)
creating index...
Done (t=3.94s)
creating index...
  0%|                                                  | 0/2532 [00:00<?, ?it/s]Done (t=3.93s)
creating index...
Done (t=3.94s)
creating index...
  0%|                                                  | 0/2532 [00:00<?, ?it/s]Done (t=4.05s)
creating index...
index created!
index created!
index created!
index created!
index created!
2020-02-11 10:59:50,975 maskrcnn_benchmark.inference INFO: Start evaluation on coco_2014_val dataset(40504 images).
100%|███████████████████████████████████████| 2532/2532 [03:46<00:00, 11.17it/s]
100%|██████████████████████████████████████▉| 2524/2532 [03:46<00:00, 11.93it/s]
100%|███████████████████████████████████████| 2532/2532 [03:46<00:00, 11.17it/s]
100%|██████████████████████████████████████▉| 2529/2532 [03:48<00:00, 12.03it/s]
100%|███████████████████████████████████████| 2532/2532 [03:49<00:00, 11.04it/s]
100%|███████████████████████████████████████| 2532/2532 [03:50<00:00, 11.00it/s]
 99%|██████████████████████████████████████▌| 2502/2532 [03:50<00:02, 11.85it/s]
100%|███████████████████████████████████████| 2532/2532 [03:52<00:00, 13.33it/s]
2020-02-11 11:03:45,372 maskrcnn_benchmark.inference INFO: Total inference time: 0:03:54.397439 (0.046296156326254764 s / img per device, on 8 devices)
2020-02-11 11:03:46,396 maskrcnn_benchmark.inference INFO: Preparing results for COCO format
2020-02-11 11:03:46,396 maskrcnn_benchmark.inference INFO: Preparing bbox results
2020-02-11 11:03:47,903 maskrcnn_benchmark.inference INFO: Preparing segm results
:::MLL 1581419258.508 block_start: {"value": null, "metadata": {"first_epoch_num": 39, "epoch_count": 1, "file": "tools/train_mlperf.py", "lineno": 134}}
:::MLL 1581419258.510 epoch_start: {"value": null, "metadata": {"epoch_num": 39, "file": "tools/train_mlperf.py", "lineno": 135}}
Evaluating predictions
creating index...
GT annotations already exist!
2020-02-11 11:07:48,805 maskrcnn_benchmark.trainer INFO: eta: 3:58:40  iter: 32540  loss: 0.5423 (0.7106)  loss_classifier: 0.1749 (0.2461)  loss_box_reg: 0.0869 (0.1182)  loss_mask: 0.2352 (0.2656)  loss_objectness: 0.0169 (0.0324)  loss_rpn_box_reg: 0.0356 (0.0482)  time: 0.8434 (1.5138)  data: 0.0029 (0.6750)  lr: 0.001200  max mem: 24032
2020-02-11 11:08:05,663 maskrcnn_benchmark.trainer INFO: eta: 3:58:05  iter: 32560  loss: 0.5509 (0.7105)  loss_classifier: 0.1806 (0.2461)  loss_box_reg: 0.1003 (0.1182)  loss_mask: 0.2387 (0.2656)  loss_objectness: 0.0124 (0.0323)  loss_rpn_box_reg: 0.0284 (0.0482)  time: 0.8378 (1.5133)  data: 0.0030 (0.6746)  lr: 0.001200  max mem: 24032
2020-02-11 11:08:22,501 maskrcnn_benchmark.trainer INFO: eta: 3:57:31  iter: 32580  loss: 0.6271 (0.7105)  loss_classifier: 0.2156 (0.2461)  loss_box_reg: 0.1018 (0.1182)  loss_mask: 0.2514 (0.2656)  loss_objectness: 0.0242 (0.0323)  loss_rpn_box_reg: 0.0477 (0.0482)  time: 0.8411 (1.5129)  data: 0.0030 (0.6742)  lr: 0.001200  max mem: 24032
Loading and preparing results...
resFile is ./inference/coco_2014_val/bbox.json
DONE (t=6.07s)
Running per image evaluation...
Evaluate annotation type *bbox*
2020-02-11 11:08:39,452 maskrcnn_benchmark.trainer INFO: eta: 3:56:57  iter: 32600  loss: 0.6007 (0.7104)  loss_classifier: 0.1950 (0.2461)  loss_box_reg: 0.0967 (0.1182)  loss_mask: 0.2472 (0.2656)  loss_objectness: 0.0164 (0.0323)  loss_rpn_box_reg: 0.0388 (0.0482)  time: 0.8455 (1.5125)  data: 0.0028 (0.6738)  lr: 0.001200  max mem: 24032
2020-02-11 11:08:56,445 maskrcnn_benchmark.trainer INFO: eta: 3:56:23  iter: 32620  loss: 0.5665 (0.7104)  loss_classifier: 0.1800 (0.2460)  loss_box_reg: 0.0936 (0.1182)  loss_mask: 0.2355 (0.2656)  loss_objectness: 0.0177 (0.0323)  loss_rpn_box_reg: 0.0436 (0.0482)  time: 0.8396 (1.5121)  data: 0.0029 (0.6734)  lr: 0.001200  max mem: 24032
DONE (t=23.89s).
Accumulating evaluation results...
DONE (t=0.00s).
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.35927
 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=100 ] = 0.57012
 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=100 ] = 0.38970
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.18681
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.37541
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.46383
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=  1 ] = 0.30187
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets= 10 ] = 0.46960
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.49023
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.29133
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.51577
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.62788
2020-02-11 11:09:13,334 maskrcnn_benchmark.trainer INFO: eta: 3:55:49  iter: 32640  loss: 0.5570 (0.7103)  loss_classifier: 0.1836 (0.2460)  loss_box_reg: 0.0887 (0.1182)  loss_mask: 0.2236 (0.2656)  loss_objectness: 0.0139 (0.0323)  loss_rpn_box_reg: 0.0313 (0.0482)  time: 0.8435 (1.5117)  data: 0.0028 (0.6730)  lr: 0.001200  max mem: 24032
2020-02-11 11:09:30,224 maskrcnn_benchmark.trainer INFO: eta: 3:55:15  iter: 32660  loss: 0.5776 (0.7102)  loss_classifier: 0.1857 (0.2460)  loss_box_reg: 0.0982 (0.1182)  loss_mask: 0.2329 (0.2656)  loss_objectness: 0.0181 (0.0323)  loss_rpn_box_reg: 0.0354 (0.0482)  time: 0.8411 (1.5113)  data: 0.0030 (0.6725)  lr: 0.001200  max mem: 24032
2020-02-11 11:09:47,153 maskrcnn_benchmark.trainer INFO: eta: 3:54:41  iter: 32680  loss: 0.6022 (0.7101)  loss_classifier: 0.1943 (0.2459)  loss_box_reg: 0.1018 (0.1182)  loss_mask: 0.2370 (0.2655)  loss_objectness: 0.0188 (0.0323)  loss_rpn_box_reg: 0.0474 (0.0482)  time: 0.8476 (1.5109)  data: 0.0031 (0.6721)  lr: 0.001200  max mem: 24032
Loading and preparing results...
resFile is ./inference/coco_2014_val/segm.json
DONE (t=14.31s)
2020-02-11 11:10:03,934 maskrcnn_benchmark.trainer INFO: eta: 3:54:07  iter: 32700  loss: 0.6004 (0.7101)  loss_classifier: 0.1947 (0.2459)  loss_box_reg: 0.0943 (0.1181)  loss_mask: 0.2378 (0.2655)  loss_objectness: 0.0175 (0.0323)  loss_rpn_box_reg: 0.0335 (0.0482)  time: 0.8374 (1.5105)  data: 0.0028 (0.6717)  lr: 0.001200  max mem: 24032
Running per image evaluation...
Evaluate annotation type *segm*
2020-02-11 11:10:20,959 maskrcnn_benchmark.trainer INFO: eta: 3:53:33  iter: 32720  loss: 0.5745 (0.7100)  loss_classifier: 0.1733 (0.2459)  loss_box_reg: 0.0866 (0.1181)  loss_mask: 0.2487 (0.2655)  loss_objectness: 0.0165 (0.0323)  loss_rpn_box_reg: 0.0342 (0.0482)  time: 0.8484 (1.5101)  data: 0.0030 (0.6713)  lr: 0.001200  max mem: 24032
DONE (t=31.37s).
Accumulating evaluation results...
DONE (t=0.00s).
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.32514
 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=100 ] = 0.53801
 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=100 ] = 0.34348
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.13304
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.33777
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.47871
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=  1 ] = 0.28353
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets= 10 ] = 0.42999
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.44692
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.24693
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.47547
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.60087
2020-02-11 11:10:39,457 maskrcnn_benchmark.trainer INFO: bbox mAP: 0.35926920305063936, segm mAP: 0.32513752235405974
:::MLL 1581419439.472 eval_accuracy: {"value": {"accuracy": {"BBOX": 0.35926920305063936, "SEGM": 0.32513752235405974}}, "metadata": {"epoch_num": 38, "file": "tools/train_mlperf.py", "lineno": 99}}
:::MLL 1581419439.472 eval_stop: {"value": null, "metadata": {"epoch_num": 38, "file": "tools/train_mlperf.py", "lineno": 100}}
2020-02-11 11:10:40,313 maskrcnn_benchmark.trainer INFO: eta: 3:53:00  iter: 32740  loss: 0.5681 (0.7099)  loss_classifier: 0.1815 (0.2458)  loss_box_reg: 0.0927 (0.1181)  loss_mask: 0.2401 (0.2655)  loss_objectness: 0.0162 (0.0323)  loss_rpn_box_reg: 0.0325 (0.0482)  time: 0.8511 (1.5098)  data: 0.0030 (0.6709)  lr: 0.001200  max mem: 24032
2020-02-11 11:10:57,226 maskrcnn_benchmark.trainer INFO: eta: 3:52:26  iter: 32760  loss: 0.6275 (0.7098)  loss_classifier: 0.2066 (0.2458)  loss_box_reg: 0.1062 (0.1181)  loss_mask: 0.2399 (0.2655)  loss_objectness: 0.0177 (0.0323)  loss_rpn_box_reg: 0.0401 (0.0482)  time: 0.8422 (1.5093)  data: 0.0030 (0.6705)  lr: 0.001200  max mem: 24032
2020-02-11 11:11:14,166 maskrcnn_benchmark.trainer INFO: eta: 3:51:52  iter: 32780  loss: 0.6222 (0.7098)  loss_classifier: 0.2045 (0.2458)  loss_box_reg: 0.1037 (0.1181)  loss_mask: 0.2430 (0.2655)  loss_objectness: 0.0201 (0.0323)  loss_rpn_box_reg: 0.0316 (0.0482)  time: 0.8488 (1.5089)  data: 0.0030 (0.6701)  lr: 0.001200  max mem: 24032
2020-02-11 11:11:31,092 maskrcnn_benchmark.trainer INFO: eta: 3:51:18  iter: 32800  loss: 0.6088 (0.7097)  loss_classifier: 0.1919 (0.2457)  loss_box_reg: 0.1061 (0.1181)  loss_mask: 0.2554 (0.2655)  loss_objectness: 0.0191 (0.0322)  loss_rpn_box_reg: 0.0369 (0.0482)  time: 0.8462 (1.5085)  data: 0.0030 (0.6697)  lr: 0.001200  max mem: 24032
2020-02-11 11:11:48,057 maskrcnn_benchmark.trainer INFO: eta: 3:50:44  iter: 32820  loss: 0.6065 (0.7097)  loss_classifier: 0.2028 (0.2457)  loss_box_reg: 0.1070 (0.1181)  loss_mask: 0.2501 (0.2654)  loss_objectness: 0.0176 (0.0322)  loss_rpn_box_reg: 0.0359 (0.0482)  time: 0.8424 (1.5081)  data: 0.0031 (0.6693)  lr: 0.001200  max mem: 24032
2020-02-11 11:12:05,092 maskrcnn_benchmark.trainer INFO: eta: 3:50:10  iter: 32840  loss: 0.5928 (0.7096)  loss_classifier: 0.2022 (0.2457)  loss_box_reg: 0.0996 (0.1181)  loss_mask: 0.2428 (0.2654)  loss_objectness: 0.0175 (0.0322)  loss_rpn_box_reg: 0.0371 (0.0482)  time: 0.8483 (1.5077)  data: 0.0032 (0.6689)  lr: 0.001200  max mem: 24032
2020-02-11 11:12:21,949 maskrcnn_benchmark.trainer INFO: eta: 3:49:36  iter: 32860  loss: 0.5745 (0.7095)  loss_classifier: 0.2002 (0.2457)  loss_box_reg: 0.1028 (0.1181)  loss_mask: 0.2321 (0.2654)  loss_objectness: 0.0175 (0.0322)  loss_rpn_box_reg: 0.0302 (0.0481)  time: 0.8441 (1.5073)  data: 0.0031 (0.6685)  lr: 0.001200  max mem: 24032
2020-02-11 11:12:38,791 maskrcnn_benchmark.trainer INFO: eta: 3:49:03  iter: 32880  loss: 0.5098 (0.7094)  loss_classifier: 0.1749 (0.2456)  loss_box_reg: 0.0906 (0.1181)  loss_mask: 0.2339 (0.2654)  loss_objectness: 0.0144 (0.0322)  loss_rpn_box_reg: 0.0347 (0.0481)  time: 0.8443 (1.5069)  data: 0.0029 (0.6681)  lr: 0.001200  max mem: 24032
2020-02-11 11:12:55,696 maskrcnn_benchmark.trainer INFO: eta: 3:48:29  iter: 32900  loss: 0.5991 (0.7094)  loss_classifier: 0.1854 (0.2456)  loss_box_reg: 0.0987 (0.1180)  loss_mask: 0.2479 (0.2654)  loss_objectness: 0.0168 (0.0322)  loss_rpn_box_reg: 0.0374 (0.0481)  time: 0.8455 (1.5065)  data: 0.0031 (0.6677)  lr: 0.001200  max mem: 24032
2020-02-11 11:13:12,623 maskrcnn_benchmark.trainer INFO: eta: 3:47:55  iter: 32920  loss: 0.6213 (0.7093)  loss_classifier: 0.2036 (0.2456)  loss_box_reg: 0.1034 (0.1180)  loss_mask: 0.2480 (0.2654)  loss_objectness: 0.0175 (0.0322)  loss_rpn_box_reg: 0.0397 (0.0481)  time: 0.8432 (1.5061)  data: 0.0032 (0.6673)  lr: 0.001200  max mem: 24032
2020-02-11 11:13:29,340 maskrcnn_benchmark.trainer INFO: eta: 3:47:21  iter: 32940  loss: 0.6173 (0.7093)  loss_classifier: 0.1997 (0.2455)  loss_box_reg: 0.1035 (0.1180)  loss_mask: 0.2511 (0.2654)  loss_objectness: 0.0185 (0.0322)  loss_rpn_box_reg: 0.0450 (0.0481)  time: 0.8339 (1.5057)  data: 0.0030 (0.6669)  lr: 0.001200  max mem: 24032
2020-02-11 11:13:46,255 maskrcnn_benchmark.trainer INFO: eta: 3:46:48  iter: 32960  loss: 0.5657 (0.7092)  loss_classifier: 0.1875 (0.2455)  loss_box_reg: 0.0853 (0.1180)  loss_mask: 0.2325 (0.2653)  loss_objectness: 0.0179 (0.0322)  loss_rpn_box_reg: 0.0357 (0.0481)  time: 0.8426 (1.5053)  data: 0.0030 (0.6665)  lr: 0.001200  max mem: 24032
2020-02-11 11:14:03,198 maskrcnn_benchmark.trainer INFO: eta: 3:46:14  iter: 32980  loss: 0.6078 (0.7091)  loss_classifier: 0.1961 (0.2455)  loss_box_reg: 0.1007 (0.1180)  loss_mask: 0.2484 (0.2653)  loss_objectness: 0.0157 (0.0322)  loss_rpn_box_reg: 0.0415 (0.0481)  time: 0.8455 (1.5049)  data: 0.0031 (0.6661)  lr: 0.001200  max mem: 24032
2020-02-11 11:14:20,140 maskrcnn_benchmark.trainer INFO: eta: 3:45:40  iter: 33000  loss: 0.5867 (0.7090)  loss_classifier: 0.1880 (0.2454)  loss_box_reg: 0.0839 (0.1180)  loss_mask: 0.2335 (0.2653)  loss_objectness: 0.0175 (0.0322)  loss_rpn_box_reg: 0.0348 (0.0481)  time: 0.8472 (1.5045)  data: 0.0029 (0.6656)  lr: 0.001200  max mem: 24032
2020-02-11 11:14:36,839 maskrcnn_benchmark.trainer INFO: eta: 3:45:06  iter: 33020  loss: 0.5930 (0.7090)  loss_classifier: 0.1978 (0.2454)  loss_box_reg: 0.0976 (0.1180)  loss_mask: 0.2401 (0.2653)  loss_objectness: 0.0176 (0.0322)  loss_rpn_box_reg: 0.0402 (0.0481)  time: 0.8375 (1.5041)  data: 0.0031 (0.6652)  lr: 0.001200  max mem: 24032
2020-02-11 11:14:53,567 maskrcnn_benchmark.trainer INFO: eta: 3:44:33  iter: 33040  loss: 0.5328 (0.7089)  loss_classifier: 0.1707 (0.2454)  loss_box_reg: 0.0844 (0.1180)  loss_mask: 0.2326 (0.2653)  loss_objectness: 0.0120 (0.0321)  loss_rpn_box_reg: 0.0322 (0.0481)  time: 0.8381 (1.5037)  data: 0.0030 (0.6648)  lr: 0.001200  max mem: 24032
2020-02-11 11:15:10,417 maskrcnn_benchmark.trainer INFO: eta: 3:43:59  iter: 33060  loss: 0.5212 (0.7088)  loss_classifier: 0.1717 (0.2453)  loss_box_reg: 0.0859 (0.1179)  loss_mask: 0.2353 (0.2653)  loss_objectness: 0.0158 (0.0321)  loss_rpn_box_reg: 0.0307 (0.0481)  time: 0.8414 (1.5033)  data: 0.0030 (0.6644)  lr: 0.001200  max mem: 24032
2020-02-11 11:15:27,375 maskrcnn_benchmark.trainer INFO: eta: 3:43:25  iter: 33080  loss: 0.5845 (0.7087)  loss_classifier: 0.1802 (0.2453)  loss_box_reg: 0.1046 (0.1179)  loss_mask: 0.2420 (0.2653)  loss_objectness: 0.0170 (0.0321)  loss_rpn_box_reg: 0.0436 (0.0481)  time: 0.8470 (1.5029)  data: 0.0030 (0.6640)  lr: 0.001200  max mem: 24032
2020-02-11 11:15:44,360 maskrcnn_benchmark.trainer INFO: eta: 3:42:52  iter: 33100  loss: 0.6408 (0.7087)  loss_classifier: 0.2108 (0.2453)  loss_box_reg: 0.1108 (0.1179)  loss_mask: 0.2533 (0.2653)  loss_objectness: 0.0173 (0.0321)  loss_rpn_box_reg: 0.0412 (0.0481)  time: 0.8479 (1.5025)  data: 0.0032 (0.6636)  lr: 0.001200  max mem: 24032
2020-02-11 11:16:01,292 maskrcnn_benchmark.trainer INFO: eta: 3:42:18  iter: 33120  loss: 0.5981 (0.7086)  loss_classifier: 0.1860 (0.2452)  loss_box_reg: 0.1007 (0.1179)  loss_mask: 0.2436 (0.2652)  loss_objectness: 0.0177 (0.0321)  loss_rpn_box_reg: 0.0402 (0.0481)  time: 0.8466 (1.5021)  data: 0.0031 (0.6632)  lr: 0.001200  max mem: 24032
2020-02-11 11:16:18,122 maskrcnn_benchmark.trainer INFO: eta: 3:41:45  iter: 33140  loss: 0.5303 (0.7085)  loss_classifier: 0.1651 (0.2452)  loss_box_reg: 0.0769 (0.1179)  loss_mask: 0.2336 (0.2652)  loss_objectness: 0.0152 (0.0321)  loss_rpn_box_reg: 0.0340 (0.0481)  time: 0.8403 (1.5017)  data: 0.0029 (0.6628)  lr: 0.001200  max mem: 24032
2020-02-11 11:16:35,121 maskrcnn_benchmark.trainer INFO: eta: 3:41:11  iter: 33160  loss: 0.5903 (0.7085)  loss_classifier: 0.1903 (0.2452)  loss_box_reg: 0.1034 (0.1179)  loss_mask: 0.2445 (0.2652)  loss_objectness: 0.0159 (0.0321)  loss_rpn_box_reg: 0.0340 (0.0481)  time: 0.8485 (1.5013)  data: 0.0030 (0.6625)  lr: 0.001200  max mem: 24032
2020-02-11 11:16:52,046 maskrcnn_benchmark.trainer INFO: eta: 3:40:38  iter: 33180  loss: 0.6266 (0.7084)  loss_classifier: 0.1985 (0.2451)  loss_box_reg: 0.1070 (0.1179)  loss_mask: 0.2572 (0.2652)  loss_objectness: 0.0190 (0.0321)  loss_rpn_box_reg: 0.0360 (0.0481)  time: 0.8436 (1.5009)  data: 0.0031 (0.6621)  lr: 0.001200  max mem: 24032
2020-02-11 11:17:09,004 maskrcnn_benchmark.trainer INFO: eta: 3:40:04  iter: 33200  loss: 0.5828 (0.7084)  loss_classifier: 0.1925 (0.2451)  loss_box_reg: 0.1008 (0.1179)  loss_mask: 0.2382 (0.2652)  loss_objectness: 0.0182 (0.0321)  loss_rpn_box_reg: 0.0295 (0.0481)  time: 0.8459 (1.5005)  data: 0.0030 (0.6617)  lr: 0.001200  max mem: 24032
2020-02-11 11:17:25,896 maskrcnn_benchmark.trainer INFO: eta: 3:39:31  iter: 33220  loss: 0.5412 (0.7083)  loss_classifier: 0.1768 (0.2451)  loss_box_reg: 0.0865 (0.1179)  loss_mask: 0.2254 (0.2652)  loss_objectness: 0.0147 (0.0321)  loss_rpn_box_reg: 0.0369 (0.0481)  time: 0.8390 (1.5001)  data: 0.0029 (0.6613)  lr: 0.001200  max mem: 24032
2020-02-11 11:17:42,775 maskrcnn_benchmark.trainer INFO: eta: 3:38:57  iter: 33240  loss: 0.6296 (0.7082)  loss_classifier: 0.2052 (0.2450)  loss_box_reg: 0.1044 (0.1179)  loss_mask: 0.2518 (0.2652)  loss_objectness: 0.0220 (0.0321)  loss_rpn_box_reg: 0.0366 (0.0481)  time: 0.8431 (1.4998)  data: 0.0032 (0.6609)  lr: 0.001200  max mem: 24032
2020-02-11 11:17:59,766 maskrcnn_benchmark.trainer INFO: eta: 3:38:24  iter: 33260  loss: 0.5827 (0.7081)  loss_classifier: 0.1760 (0.2450)  loss_box_reg: 0.0970 (0.1178)  loss_mask: 0.2480 (0.2652)  loss_objectness: 0.0172 (0.0321)  loss_rpn_box_reg: 0.0293 (0.0481)  time: 0.8454 (1.4994)  data: 0.0030 (0.6605)  lr: 0.001200  max mem: 24032
2020-02-11 11:18:16,560 maskrcnn_benchmark.trainer INFO: eta: 3:37:50  iter: 33280  loss: 0.5750 (0.7081)  loss_classifier: 0.1933 (0.2450)  loss_box_reg: 0.1003 (0.1178)  loss_mask: 0.2333 (0.2651)  loss_objectness: 0.0146 (0.0321)  loss_rpn_box_reg: 0.0306 (0.0481)  time: 0.8429 (1.4990)  data: 0.0030 (0.6601)  lr: 0.001200  max mem: 24032
2020-02-11 11:18:33,449 maskrcnn_benchmark.trainer INFO: eta: 3:37:17  iter: 33300  loss: 0.5939 (0.7080)  loss_classifier: 0.1849 (0.2449)  loss_box_reg: 0.0994 (0.1178)  loss_mask: 0.2311 (0.2651)  loss_objectness: 0.0145 (0.0320)  loss_rpn_box_reg: 0.0297 (0.0481)  time: 0.8413 (1.4986)  data: 0.0030 (0.6597)  lr: 0.001200  max mem: 24032
2020-02-11 11:18:50,339 maskrcnn_benchmark.trainer INFO: eta: 3:36:44  iter: 33320  loss: 0.5495 (0.7079)  loss_classifier: 0.1824 (0.2449)  loss_box_reg: 0.0916 (0.1178)  loss_mask: 0.2346 (0.2651)  loss_objectness: 0.0158 (0.0320)  loss_rpn_box_reg: 0.0352 (0.0480)  time: 0.8459 (1.4982)  data: 0.0030 (0.6593)  lr: 0.001200  max mem: 24032
2020-02-11 11:19:07,403 maskrcnn_benchmark.trainer INFO: eta: 3:36:10  iter: 33340  loss: 0.5959 (0.7078)  loss_classifier: 0.2047 (0.2449)  loss_box_reg: 0.1047 (0.1178)  loss_mask: 0.2459 (0.2651)  loss_objectness: 0.0213 (0.0320)  loss_rpn_box_reg: 0.0309 (0.0480)  time: 0.8515 (1.4978)  data: 0.0031 (0.6589)  lr: 0.001200  max mem: 24032
2020-02-11 11:19:24,373 maskrcnn_benchmark.trainer INFO: eta: 3:35:37  iter: 33360  loss: 0.5806 (0.7078)  loss_classifier: 0.1823 (0.2448)  loss_box_reg: 0.0930 (0.1178)  loss_mask: 0.2491 (0.2651)  loss_objectness: 0.0162 (0.0320)  loss_rpn_box_reg: 0.0349 (0.0480)  time: 0.8453 (1.4974)  data: 0.0030 (0.6585)  lr: 0.001200  max mem: 24032
2020-02-11 11:19:41,409 maskrcnn_benchmark.trainer INFO: eta: 3:35:04  iter: 33380  loss: 0.5954 (0.7077)  loss_classifier: 0.2035 (0.2448)  loss_box_reg: 0.1118 (0.1178)  loss_mask: 0.2358 (0.2651)  loss_objectness: 0.0198 (0.0320)  loss_rpn_box_reg: 0.0281 (0.0480)  time: 0.8540 (1.4970)  data: 0.0029 (0.6581)  lr: 0.001200  max mem: 24032
:::MLL 1581419984.308 epoch_stop: {"value": null, "metadata": {"epoch_num": 39, "file": "tools/train_mlperf.py", "lineno": 75}}
:::MLL 1581419984.309 block_stop: {"value": null, "metadata": {"first_epoch_num": 39, "file": "tools/train_mlperf.py", "lineno": 76}}
:::MLL 1581419984.309 eval_start: {"value": null, "metadata": {"epoch_num": 39, "file": "tools/train_mlperf.py", "lineno": 77}}
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
2020-02-11 11:19:45,111 maskrcnn_benchmark.data.build WARNING: When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
Done (t=3.87s)
creating index...
Done (t=3.81s)
creating index...
Done (t=3.90s)
creating index...
Done (t=3.96s)
creating index...
index created!
index created!
Done (t=3.92s)
creating index...
Done (t=3.94s)
creating index...
  0%|                                                  | 0/2532 [00:00<?, ?it/s]Done (t=3.93s)
creating index...
index created!
index created!
  0%|                                                  | 0/2532 [00:00<?, ?it/s]Done (t=4.04s)
creating index...
  0%|                                                  | 0/2532 [00:00<?, ?it/s]index created!
index created!
index created!
2020-02-11 11:19:49,475 maskrcnn_benchmark.inference INFO: Start evaluation on coco_2014_val dataset(40504 images).
  0%|                                                  | 0/2532 [00:00<?, ?it/s]index created!
100%|███████████████████████████████████████| 2532/2532 [03:46<00:00, 11.20it/s]
100%|███████████████████████████████████████| 2532/2532 [03:46<00:00, 11.17it/s]
 99%|██████████████████████████████████████▊| 2516/2532 [03:46<00:01, 11.47it/s]
 99%|██████████████████████████████████████▌| 2502/2532 [03:48<00:02, 11.52it/s]
 98%|██████████████████████████████████████▎| 2486/2532 [03:49<00:03, 11.55it/s]
 99%|██████████████████████████████████████▊| 2518/2532 [03:52<00:01, 11.45it/s]
100%|███████████████████████████████████████| 2532/2532 [03:52<00:00, 10.90it/s]
100%|███████████████████████████████████████| 2532/2532 [03:53<00:00, 13.18it/s]
2020-02-11 11:23:44,354 maskrcnn_benchmark.inference INFO: Total inference time: 0:03:54.879040 (0.046391277851946335 s / img per device, on 8 devices)
2020-02-11 11:23:45,368 maskrcnn_benchmark.inference INFO: Preparing results for COCO format
2020-02-11 11:23:45,368 maskrcnn_benchmark.inference INFO: Preparing bbox results
2020-02-11 11:23:46,876 maskrcnn_benchmark.inference INFO: Preparing segm results
:::MLL 1581420457.398 block_start: {"value": null, "metadata": {"first_epoch_num": 40, "epoch_count": 1, "file": "tools/train_mlperf.py", "lineno": 134}}
:::MLL 1581420457.400 epoch_start: {"value": null, "metadata": {"epoch_num": 40, "file": "tools/train_mlperf.py", "lineno": 135}}
Evaluating predictions
creating index...
GT annotations already exist!
2020-02-11 11:27:51,016 maskrcnn_benchmark.trainer INFO: eta: 3:36:32  iter: 33400  loss: 0.5782 (0.7076)  loss_classifier: 0.1936 (0.2448)  loss_box_reg: 0.1016 (0.1178)  loss_mask: 0.2458 (0.2650)  loss_objectness: 0.0146 (0.0320)  loss_rpn_box_reg: 0.0253 (0.0480)  time: 0.8389 (1.5108)  data: 0.0029 (0.6719)  lr: 0.001200  max mem: 24032
2020-02-11 11:28:08,287 maskrcnn_benchmark.trainer INFO: eta: 3:35:59  iter: 33420  loss: 0.5771 (0.7076)  loss_classifier: 0.1955 (0.2448)  loss_box_reg: 0.1016 (0.1178)  loss_mask: 0.2436 (0.2650)  loss_objectness: 0.0159 (0.0320)  loss_rpn_box_reg: 0.0401 (0.0480)  time: 0.8498 (1.5104)  data: 0.0029 (0.6715)  lr: 0.001200  max mem: 24032
2020-02-11 11:28:25,251 maskrcnn_benchmark.trainer INFO: eta: 3:35:25  iter: 33440  loss: 0.5891 (0.7075)  loss_classifier: 0.1918 (0.2447)  loss_box_reg: 0.1038 (0.1178)  loss_mask: 0.2556 (0.2650)  loss_objectness: 0.0160 (0.0320)  loss_rpn_box_reg: 0.0386 (0.0480)  time: 0.8451 (1.5100)  data: 0.0030 (0.6711)  lr: 0.001200  max mem: 24032
Loading and preparing results...
resFile is ./inference/coco_2014_val/bbox.json
DONE (t=6.13s)
Running per image evaluation...
Evaluate annotation type *bbox*
2020-02-11 11:28:42,253 maskrcnn_benchmark.trainer INFO: eta: 3:34:51  iter: 33460  loss: 0.5951 (0.7074)  loss_classifier: 0.1936 (0.2447)  loss_box_reg: 0.1036 (0.1178)  loss_mask: 0.2303 (0.2650)  loss_objectness: 0.0158 (0.0320)  loss_rpn_box_reg: 0.0349 (0.0480)  time: 0.8498 (1.5096)  data: 0.0030 (0.6707)  lr: 0.001200  max mem: 24032
2020-02-11 11:28:59,220 maskrcnn_benchmark.trainer INFO: eta: 3:34:18  iter: 33480  loss: 0.6422 (0.7074)  loss_classifier: 0.2125 (0.2447)  loss_box_reg: 0.1055 (0.1177)  loss_mask: 0.2483 (0.2650)  loss_objectness: 0.0178 (0.0320)  loss_rpn_box_reg: 0.0365 (0.0480)  time: 0.8439 (1.5092)  data: 0.0030 (0.6703)  lr: 0.001200  max mem: 24032
DONE (t=24.38s).
Accumulating evaluation results...
DONE (t=0.00s).
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.35942
 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=100 ] = 0.56992
 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=100 ] = 0.38997
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.18748
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.37486
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.46321
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=  1 ] = 0.30200
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets= 10 ] = 0.46975
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.49061
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.29309
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.51605
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.62712
2020-02-11 11:29:16,227 maskrcnn_benchmark.trainer INFO: eta: 3:33:44  iter: 33500  loss: 0.5522 (0.7073)  loss_classifier: 0.1775 (0.2446)  loss_box_reg: 0.0900 (0.1177)  loss_mask: 0.2447 (0.2650)  loss_objectness: 0.0177 (0.0320)  loss_rpn_box_reg: 0.0324 (0.0480)  time: 0.8510 (1.5088)  data: 0.0030 (0.6699)  lr: 0.001200  max mem: 24032
2020-02-11 11:29:33,214 maskrcnn_benchmark.trainer INFO: eta: 3:33:11  iter: 33520  loss: 0.5419 (0.7072)  loss_classifier: 0.1663 (0.2446)  loss_box_reg: 0.0891 (0.1177)  loss_mask: 0.2279 (0.2650)  loss_objectness: 0.0154 (0.0320)  loss_rpn_box_reg: 0.0342 (0.0480)  time: 0.8445 (1.5084)  data: 0.0029 (0.6695)  lr: 0.001200  max mem: 24032
Loading and preparing results...
resFile is ./inference/coco_2014_val/segm.json
2020-02-11 11:29:50,103 maskrcnn_benchmark.trainer INFO: eta: 3:32:37  iter: 33540  loss: 0.6071 (0.7072)  loss_classifier: 0.1922 (0.2446)  loss_box_reg: 0.1062 (0.1177)  loss_mask: 0.2506 (0.2650)  loss_objectness: 0.0174 (0.0319)  loss_rpn_box_reg: 0.0340 (0.0480)  time: 0.8439 (1.5080)  data: 0.0029 (0.6691)  lr: 0.001200  max mem: 24032
DONE (t=14.55s)
Running per image evaluation...
Evaluate annotation type *segm*
2020-02-11 11:30:06,946 maskrcnn_benchmark.trainer INFO: eta: 3:32:04  iter: 33560  loss: 0.5558 (0.7071)  loss_classifier: 0.1564 (0.2445)  loss_box_reg: 0.1003 (0.1177)  loss_mask: 0.2423 (0.2649)  loss_objectness: 0.0159 (0.0319)  loss_rpn_box_reg: 0.0309 (0.0480)  time: 0.8403 (1.5076)  data: 0.0029 (0.6687)  lr: 0.001200  max mem: 24032
2020-02-11 11:30:23,873 maskrcnn_benchmark.trainer INFO: eta: 3:31:30  iter: 33580  loss: 0.6196 (0.7070)  loss_classifier: 0.1934 (0.2445)  loss_box_reg: 0.1051 (0.1177)  loss_mask: 0.2418 (0.2649)  loss_objectness: 0.0146 (0.0319)  loss_rpn_box_reg: 0.0307 (0.0480)  time: 0.8444 (1.5072)  data: 0.0028 (0.6683)  lr: 0.001200  max mem: 24032
DONE (t=31.24s).
Accumulating evaluation results...
DONE (t=0.00s).
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.32544
 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=100 ] = 0.53822
 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=100 ] = 0.34377
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.13354
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.33780
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.47903
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=  1 ] = 0.28353
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets= 10 ] = 0.43001
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.44706
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.24894
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.47536
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.59939
2020-02-11 11:30:38,755 maskrcnn_benchmark.trainer INFO: bbox mAP: 0.35941894956171416, segm mAP: 0.3254424282417964
:::MLL 1581420638.770 eval_accuracy: {"value": {"accuracy": {"BBOX": 0.35941894956171416, "SEGM": 0.3254424282417964}}, "metadata": {"epoch_num": 39, "file": "tools/train_mlperf.py", "lineno": 99}}
:::MLL 1581420638.771 eval_stop: {"value": null, "metadata": {"epoch_num": 39, "file": "tools/train_mlperf.py", "lineno": 100}}
2020-02-11 11:30:42,982 maskrcnn_benchmark.trainer INFO: eta: 3:30:57  iter: 33600  loss: 0.5752 (0.7069)  loss_classifier: 0.1858 (0.2445)  loss_box_reg: 0.0902 (0.1177)  loss_mask: 0.2412 (0.2649)  loss_objectness: 0.0162 (0.0319)  loss_rpn_box_reg: 0.0304 (0.0480)  time: 0.8424 (1.5069)  data: 0.0031 (0.6679)  lr: 0.001200  max mem: 24032
2020-02-11 11:30:59,952 maskrcnn_benchmark.trainer INFO: eta: 3:30:24  iter: 33620  loss: 0.6011 (0.7069)  loss_classifier: 0.1918 (0.2444)  loss_box_reg: 0.1025 (0.1177)  loss_mask: 0.2414 (0.2649)  loss_objectness: 0.0177 (0.0319)  loss_rpn_box_reg: 0.0311 (0.0480)  time: 0.8519 (1.5065)  data: 0.0028 (0.6675)  lr: 0.001200  max mem: 24032
2020-02-11 11:31:16,927 maskrcnn_benchmark.trainer INFO: eta: 3:29:51  iter: 33640  loss: 0.5682 (0.7068)  loss_classifier: 0.1946 (0.2444)  loss_box_reg: 0.0956 (0.1177)  loss_mask: 0.2369 (0.2649)  loss_objectness: 0.0154 (0.0319)  loss_rpn_box_reg: 0.0390 (0.0479)  time: 0.8431 (1.5061)  data: 0.0028 (0.6671)  lr: 0.001200  max mem: 24032
2020-02-11 11:31:33,728 maskrcnn_benchmark.trainer INFO: eta: 3:29:17  iter: 33660  loss: 0.5812 (0.7067)  loss_classifier: 0.1860 (0.2444)  loss_box_reg: 0.1006 (0.1176)  loss_mask: 0.2394 (0.2649)  loss_objectness: 0.0152 (0.0319)  loss_rpn_box_reg: 0.0300 (0.0479)  time: 0.8373 (1.5057)  data: 0.0029 (0.6667)  lr: 0.001200  max mem: 24032
2020-02-11 11:31:50,535 maskrcnn_benchmark.trainer INFO: eta: 3:28:44  iter: 33680  loss: 0.5956 (0.7067)  loss_classifier: 0.1790 (0.2444)  loss_box_reg: 0.1061 (0.1176)  loss_mask: 0.2531 (0.2649)  loss_objectness: 0.0214 (0.0319)  loss_rpn_box_reg: 0.0377 (0.0479)  time: 0.8401 (1.5053)  data: 0.0030 (0.6663)  lr: 0.001200  max mem: 24032
2020-02-11 11:32:07,377 maskrcnn_benchmark.trainer INFO: eta: 3:28:10  iter: 33700  loss: 0.5595 (0.7066)  loss_classifier: 0.1830 (0.2443)  loss_box_reg: 0.0879 (0.1176)  loss_mask: 0.2433 (0.2649)  loss_objectness: 0.0154 (0.0319)  loss_rpn_box_reg: 0.0335 (0.0479)  time: 0.8390 (1.5049)  data: 0.0030 (0.6659)  lr: 0.001200  max mem: 24032
2020-02-11 11:32:24,210 maskrcnn_benchmark.trainer INFO: eta: 3:27:37  iter: 33720  loss: 0.5550 (0.7065)  loss_classifier: 0.1791 (0.2443)  loss_box_reg: 0.0903 (0.1176)  loss_mask: 0.2362 (0.2648)  loss_objectness: 0.0162 (0.0319)  loss_rpn_box_reg: 0.0268 (0.0479)  time: 0.8408 (1.5045)  data: 0.0031 (0.6655)  lr: 0.001200  max mem: 24032
2020-02-11 11:32:41,118 maskrcnn_benchmark.trainer INFO: eta: 3:27:04  iter: 33740  loss: 0.6005 (0.7065)  loss_classifier: 0.2037 (0.2443)  loss_box_reg: 0.1162 (0.1176)  loss_mask: 0.2387 (0.2648)  loss_objectness: 0.0174 (0.0319)  loss_rpn_box_reg: 0.0306 (0.0479)  time: 0.8402 (1.5042)  data: 0.0031 (0.6651)  lr: 0.001200  max mem: 24032
2020-02-11 11:32:58,006 maskrcnn_benchmark.trainer INFO: eta: 3:26:30  iter: 33760  loss: 0.6065 (0.7064)  loss_classifier: 0.1964 (0.2442)  loss_box_reg: 0.0981 (0.1176)  loss_mask: 0.2384 (0.2648)  loss_objectness: 0.0164 (0.0319)  loss_rpn_box_reg: 0.0356 (0.0479)  time: 0.8436 (1.5038)  data: 0.0031 (0.6647)  lr: 0.001200  max mem: 24032
2020-02-11 11:33:14,861 maskrcnn_benchmark.trainer INFO: eta: 3:25:57  iter: 33780  loss: 0.5828 (0.7063)  loss_classifier: 0.1829 (0.2442)  loss_box_reg: 0.0989 (0.1176)  loss_mask: 0.2511 (0.2648)  loss_objectness: 0.0177 (0.0318)  loss_rpn_box_reg: 0.0396 (0.0479)  time: 0.8418 (1.5034)  data: 0.0029 (0.6644)  lr: 0.001200  max mem: 24032
2020-02-11 11:33:31,893 maskrcnn_benchmark.trainer INFO: eta: 3:25:24  iter: 33800  loss: 0.6324 (0.7063)  loss_classifier: 0.2012 (0.2442)  loss_box_reg: 0.1141 (0.1176)  loss_mask: 0.2366 (0.2648)  loss_objectness: 0.0161 (0.0318)  loss_rpn_box_reg: 0.0376 (0.0479)  time: 0.8537 (1.5030)  data: 0.0031 (0.6640)  lr: 0.001200  max mem: 24032
2020-02-11 11:33:48,851 maskrcnn_benchmark.trainer INFO: eta: 3:24:51  iter: 33820  loss: 0.5275 (0.7062)  loss_classifier: 0.1747 (0.2441)  loss_box_reg: 0.0877 (0.1176)  loss_mask: 0.2336 (0.2648)  loss_objectness: 0.0164 (0.0318)  loss_rpn_box_reg: 0.0285 (0.0479)  time: 0.8445 (1.5026)  data: 0.0029 (0.6636)  lr: 0.001200  max mem: 24032
2020-02-11 11:34:05,829 maskrcnn_benchmark.trainer INFO: eta: 3:24:18  iter: 33840  loss: 0.5762 (0.7061)  loss_classifier: 0.1884 (0.2441)  loss_box_reg: 0.0957 (0.1176)  loss_mask: 0.2336 (0.2648)  loss_objectness: 0.0157 (0.0318)  loss_rpn_box_reg: 0.0363 (0.0479)  time: 0.8490 (1.5022)  data: 0.0030 (0.6632)  lr: 0.001200  max mem: 24032
2020-02-11 11:34:22,810 maskrcnn_benchmark.trainer INFO: eta: 3:23:44  iter: 33860  loss: 0.6276 (0.7061)  loss_classifier: 0.2165 (0.2441)  loss_box_reg: 0.1126 (0.1175)  loss_mask: 0.2499 (0.2648)  loss_objectness: 0.0221 (0.0318)  loss_rpn_box_reg: 0.0364 (0.0479)  time: 0.8500 (1.5018)  data: 0.0031 (0.6628)  lr: 0.001200  max mem: 24032
2020-02-11 11:34:39,575 maskrcnn_benchmark.trainer INFO: eta: 3:23:11  iter: 33880  loss: 0.5910 (0.7060)  loss_classifier: 0.1909 (0.2440)  loss_box_reg: 0.0953 (0.1175)  loss_mask: 0.2404 (0.2647)  loss_objectness: 0.0218 (0.0318)  loss_rpn_box_reg: 0.0353 (0.0479)  time: 0.8394 (1.5014)  data: 0.0030 (0.6624)  lr: 0.001200  max mem: 24032
2020-02-11 11:34:56,513 maskrcnn_benchmark.trainer INFO: eta: 3:22:38  iter: 33900  loss: 0.5285 (0.7059)  loss_classifier: 0.1636 (0.2440)  loss_box_reg: 0.0793 (0.1175)  loss_mask: 0.2384 (0.2647)  loss_objectness: 0.0140 (0.0318)  loss_rpn_box_reg: 0.0251 (0.0479)  time: 0.8471 (1.5010)  data: 0.0029 (0.6620)  lr: 0.001200  max mem: 24032
2020-02-11 11:35:13,409 maskrcnn_benchmark.trainer INFO: eta: 3:22:05  iter: 33920  loss: 0.6122 (0.7059)  loss_classifier: 0.1870 (0.2440)  loss_box_reg: 0.0981 (0.1175)  loss_mask: 0.2452 (0.2647)  loss_objectness: 0.0169 (0.0318)  loss_rpn_box_reg: 0.0350 (0.0479)  time: 0.8411 (1.5007)  data: 0.0030 (0.6616)  lr: 0.001200  max mem: 24032
2020-02-11 11:35:30,370 maskrcnn_benchmark.trainer INFO: eta: 3:21:32  iter: 33940  loss: 0.5610 (0.7058)  loss_classifier: 0.1831 (0.2440)  loss_box_reg: 0.0989 (0.1175)  loss_mask: 0.2495 (0.2647)  loss_objectness: 0.0185 (0.0318)  loss_rpn_box_reg: 0.0315 (0.0479)  time: 0.8501 (1.5003)  data: 0.0029 (0.6612)  lr: 0.001200  max mem: 24032
2020-02-11 11:35:47,405 maskrcnn_benchmark.trainer INFO: eta: 3:20:59  iter: 33960  loss: 0.5941 (0.7057)  loss_classifier: 0.1967 (0.2439)  loss_box_reg: 0.0888 (0.1175)  loss_mask: 0.2485 (0.2647)  loss_objectness: 0.0153 (0.0318)  loss_rpn_box_reg: 0.0348 (0.0479)  time: 0.8450 (1.4999)  data: 0.0030 (0.6608)  lr: 0.001200  max mem: 24032
2020-02-11 11:36:04,237 maskrcnn_benchmark.trainer INFO: eta: 3:20:26  iter: 33980  loss: 0.5229 (0.7057)  loss_classifier: 0.1740 (0.2439)  loss_box_reg: 0.0807 (0.1175)  loss_mask: 0.2409 (0.2647)  loss_objectness: 0.0150 (0.0318)  loss_rpn_box_reg: 0.0314 (0.0479)  time: 0.8436 (1.4995)  data: 0.0030 (0.6605)  lr: 0.001200  max mem: 24032
2020-02-11 11:36:20,973 maskrcnn_benchmark.trainer INFO: eta: 3:19:52  iter: 34000  loss: 0.6223 (0.7056)  loss_classifier: 0.1942 (0.2439)  loss_box_reg: 0.1030 (0.1175)  loss_mask: 0.2498 (0.2647)  loss_objectness: 0.0167 (0.0318)  loss_rpn_box_reg: 0.0390 (0.0478)  time: 0.8381 (1.4991)  data: 0.0030 (0.6601)  lr: 0.001200  max mem: 24032
2020-02-11 11:36:37,821 maskrcnn_benchmark.trainer INFO: eta: 3:19:19  iter: 34020  loss: 0.5968 (0.7056)  loss_classifier: 0.1960 (0.2438)  loss_box_reg: 0.1003 (0.1175)  loss_mask: 0.2455 (0.2646)  loss_objectness: 0.0179 (0.0318)  loss_rpn_box_reg: 0.0394 (0.0478)  time: 0.8426 (1.4987)  data: 0.0031 (0.6597)  lr: 0.001200  max mem: 24032
2020-02-11 11:36:54,705 maskrcnn_benchmark.trainer INFO: eta: 3:18:46  iter: 34040  loss: 0.5372 (0.7055)  loss_classifier: 0.1698 (0.2438)  loss_box_reg: 0.0850 (0.1175)  loss_mask: 0.2241 (0.2646)  loss_objectness: 0.0147 (0.0317)  loss_rpn_box_reg: 0.0276 (0.0478)  time: 0.8417 (1.4983)  data: 0.0030 (0.6593)  lr: 0.001200  max mem: 24032
2020-02-11 11:37:11,715 maskrcnn_benchmark.trainer INFO: eta: 3:18:13  iter: 34060  loss: 0.6369 (0.7054)  loss_classifier: 0.2068 (0.2438)  loss_box_reg: 0.1167 (0.1174)  loss_mask: 0.2488 (0.2646)  loss_objectness: 0.0179 (0.0317)  loss_rpn_box_reg: 0.0364 (0.0478)  time: 0.8517 (1.4980)  data: 0.0031 (0.6589)  lr: 0.001200  max mem: 24032
2020-02-11 11:37:28,709 maskrcnn_benchmark.trainer INFO: eta: 3:17:40  iter: 34080  loss: 0.5756 (0.7054)  loss_classifier: 0.1996 (0.2437)  loss_box_reg: 0.1040 (0.1174)  loss_mask: 0.2373 (0.2646)  loss_objectness: 0.0191 (0.0317)  loss_rpn_box_reg: 0.0382 (0.0478)  time: 0.8490 (1.4976)  data: 0.0031 (0.6585)  lr: 0.001200  max mem: 24032
2020-02-11 11:37:45,578 maskrcnn_benchmark.trainer INFO: eta: 3:17:07  iter: 34100  loss: 0.6317 (0.7053)  loss_classifier: 0.2053 (0.2437)  loss_box_reg: 0.1052 (0.1174)  loss_mask: 0.2446 (0.2646)  loss_objectness: 0.0191 (0.0317)  loss_rpn_box_reg: 0.0414 (0.0478)  time: 0.8424 (1.4972)  data: 0.0031 (0.6581)  lr: 0.001200  max mem: 24032
2020-02-11 11:38:02,480 maskrcnn_benchmark.trainer INFO: eta: 3:16:34  iter: 34120  loss: 0.5652 (0.7052)  loss_classifier: 0.1802 (0.2437)  loss_box_reg: 0.0806 (0.1174)  loss_mask: 0.2295 (0.2646)  loss_objectness: 0.0151 (0.0317)  loss_rpn_box_reg: 0.0351 (0.0478)  time: 0.8420 (1.4968)  data: 0.0030 (0.6578)  lr: 0.001200  max mem: 24032
2020-02-11 11:38:19,395 maskrcnn_benchmark.trainer INFO: eta: 3:16:01  iter: 34140  loss: 0.6227 (0.7052)  loss_classifier: 0.2156 (0.2437)  loss_box_reg: 0.1135 (0.1174)  loss_mask: 0.2436 (0.2646)  loss_objectness: 0.0188 (0.0317)  loss_rpn_box_reg: 0.0331 (0.0478)  time: 0.8467 (1.4964)  data: 0.0030 (0.6574)  lr: 0.001200  max mem: 24032
2020-02-11 11:38:36,424 maskrcnn_benchmark.trainer INFO: eta: 3:15:29  iter: 34160  loss: 0.5872 (0.7051)  loss_classifier: 0.1806 (0.2436)  loss_box_reg: 0.0987 (0.1174)  loss_mask: 0.2445 (0.2646)  loss_objectness: 0.0164 (0.0317)  loss_rpn_box_reg: 0.0389 (0.0478)  time: 0.8522 (1.4961)  data: 0.0029 (0.6570)  lr: 0.001200  max mem: 24032
2020-02-11 11:38:53,259 maskrcnn_benchmark.trainer INFO: eta: 3:14:56  iter: 34180  loss: 0.5871 (0.7051)  loss_classifier: 0.1973 (0.2436)  loss_box_reg: 0.1051 (0.1174)  loss_mask: 0.2374 (0.2645)  loss_objectness: 0.0169 (0.0317)  loss_rpn_box_reg: 0.0337 (0.0478)  time: 0.8391 (1.4957)  data: 0.0031 (0.6566)  lr: 0.001200  max mem: 24032
2020-02-11 11:39:10,201 maskrcnn_benchmark.trainer INFO: eta: 3:14:23  iter: 34200  loss: 0.5697 (0.7050)  loss_classifier: 0.1918 (0.2436)  loss_box_reg: 0.0985 (0.1174)  loss_mask: 0.2219 (0.2645)  loss_objectness: 0.0150 (0.0317)  loss_rpn_box_reg: 0.0304 (0.0478)  time: 0.8423 (1.4953)  data: 0.0031 (0.6562)  lr: 0.001200  max mem: 24032
2020-02-11 11:39:27,072 maskrcnn_benchmark.trainer INFO: eta: 3:13:50  iter: 34220  loss: 0.5527 (0.7049)  loss_classifier: 0.1773 (0.2436)  loss_box_reg: 0.0983 (0.1174)  loss_mask: 0.2533 (0.2645)  loss_objectness: 0.0163 (0.0317)  loss_rpn_box_reg: 0.0333 (0.0478)  time: 0.8427 (1.4949)  data: 0.0029 (0.6559)  lr: 0.001200  max mem: 24032
Gradient overflow.  Skipping step, loss scaler 0 reducing loss scale to 131072.0
Gradient overflow.  Skipping step, loss scaler 0 reducing loss scale to 131072.0
Gradient overflow.  Skipping step, loss scaler 0 reducing loss scale to 131072.0
Gradient overflow.  Skipping step, loss scaler 0 reducing loss scale to 131072.0
Gradient overflow.  Skipping step, loss scaler 0 reducing loss scale to 131072.0
Gradient overflow.  Skipping step, loss scaler 0 reducing loss scale to 131072.0
Gradient overflow.  Skipping step, loss scaler 0 reducing loss scale to 131072.0
Gradient overflow.  Skipping step, loss scaler 0 reducing loss scale to 131072.0
2020-02-11 11:39:43,813 maskrcnn_benchmark.trainer INFO: eta: 3:13:17  iter: 34240  loss: 0.5898 (0.7049)  loss_classifier: 0.1841 (0.2435)  loss_box_reg: 0.1020 (0.1174)  loss_mask: 0.2351 (0.2645)  loss_objectness: 0.0167 (0.0317)  loss_rpn_box_reg: 0.0281 (0.0478)  time: 0.8448 (1.4945)  data: 0.0032 (0.6555)  lr: 0.001200  max mem: 24032
:::MLL 1581421183.815 epoch_stop: {"value": null, "metadata": {"epoch_num": 40, "file": "tools/train_mlperf.py", "lineno": 75}}
:::MLL 1581421183.816 block_stop: {"value": null, "metadata": {"first_epoch_num": 40, "file": "tools/train_mlperf.py", "lineno": 76}}
:::MLL 1581421183.817 eval_start: {"value": null, "metadata": {"epoch_num": 40, "file": "tools/train_mlperf.py", "lineno": 77}}
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
2020-02-11 11:39:44,648 maskrcnn_benchmark.data.build WARNING: When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
Done (t=3.93s)
creating index...
Done (t=3.89s)
creating index...
Done (t=4.01s)
creating index...
Done (t=3.92s)
creating index...
Done (t=3.89s)
creating index...
index created!
Done (t=3.93s)
creating index...
index created!
Done (t=3.97s)
creating index...
Done (t=3.99s)
creating index...
  0%|                                                  | 0/2532 [00:00<?, ?it/s]index created!
index created!
index created!
index created!
  0%|                                                  | 0/2532 [00:00<?, ?it/s]index created!
2020-02-11 11:39:49,027 maskrcnn_benchmark.inference INFO: Start evaluation on coco_2014_val dataset(40504 images).
  0%|                                                  | 0/2532 [00:00<?, ?it/s]index created!
100%|███████████████████████████████████████| 2532/2532 [03:44<00:00, 11.26it/s]
 98%|██████████████████████████████████████ | 2471/2532 [03:45<00:05, 11.75it/s]
100%|███████████████████████████████████████| 2532/2532 [03:46<00:00, 11.16it/s]
 99%|██████████████████████████████████████▍| 2496/2532 [03:48<00:03, 11.63it/s]
100%|██████████████████████████████████████▉| 2524/2532 [03:50<00:00, 10.95it/s]
100%|███████████████████████████████████████| 2532/2532 [03:50<00:00, 10.97it/s]
100%|███████████████████████████████████████| 2532/2532 [03:52<00:00, 10.91it/s]

2020-02-11 11:43:41,360 maskrcnn_benchmark.inference INFO: Total inference time: 0:03:52.333175 (0.0458884406367616 s / img per device, on 8 devices)
2020-02-11 11:43:42,367 maskrcnn_benchmark.inference INFO: Preparing results for COCO format
2020-02-11 11:43:42,367 maskrcnn_benchmark.inference INFO: Preparing bbox results
2020-02-11 11:43:43,879 maskrcnn_benchmark.inference INFO: Preparing segm results
:::MLL 1581421657.417 block_start: {"value": null, "metadata": {"first_epoch_num": 41, "epoch_count": 1, "file": "tools/train_mlperf.py", "lineno": 134}}
:::MLL 1581421657.419 epoch_start: {"value": null, "metadata": {"epoch_num": 41, "file": "tools/train_mlperf.py", "lineno": 135}}
Evaluating predictions
creating index...
GT annotations already exist!
2020-02-11 11:47:54,330 maskrcnn_benchmark.trainer INFO: eta: 3:14:31  iter: 34260  loss: 0.5742 (0.7048)  loss_classifier: 0.1704 (0.2435)  loss_box_reg: 0.0969 (0.1174)  loss_mask: 0.2533 (0.2645)  loss_objectness: 0.0163 (0.0317)  loss_rpn_box_reg: 0.0297 (0.0478)  time: 0.8525 (1.5080)  data: 0.0030 (0.6689)  lr: 0.001200  max mem: 24032
2020-02-11 11:48:11,443 maskrcnn_benchmark.trainer INFO: eta: 3:13:58  iter: 34280  loss: 0.6096 (0.7047)  loss_classifier: 0.2032 (0.2435)  loss_box_reg: 0.1120 (0.1174)  loss_mask: 0.2475 (0.2645)  loss_objectness: 0.0187 (0.0317)  loss_rpn_box_reg: 0.0343 (0.0478)  time: 0.8535 (1.5076)  data: 0.0029 (0.6685)  lr: 0.001200  max mem: 24032
2020-02-11 11:48:28,293 maskrcnn_benchmark.trainer INFO: eta: 3:13:25  iter: 34300  loss: 0.5674 (0.7047)  loss_classifier: 0.1843 (0.2434)  loss_box_reg: 0.0893 (0.1173)  loss_mask: 0.2336 (0.2645)  loss_objectness: 0.0162 (0.0316)  loss_rpn_box_reg: 0.0300 (0.0478)  time: 0.8453 (1.5072)  data: 0.0027 (0.6681)  lr: 0.001200  max mem: 24032
Loading and preparing results...
resFile is ./inference/coco_2014_val/bbox.json
DONE (t=5.95s)
Running per image evaluation...
Evaluate annotation type *bbox*
2020-02-11 11:48:45,201 maskrcnn_benchmark.trainer INFO: eta: 3:12:52  iter: 34320  loss: 0.5480 (0.7046)  loss_classifier: 0.1757 (0.2434)  loss_box_reg: 0.0922 (0.1173)  loss_mask: 0.2343 (0.2644)  loss_objectness: 0.0165 (0.0316)  loss_rpn_box_reg: 0.0371 (0.0478)  time: 0.8446 (1.5068)  data: 0.0029 (0.6677)  lr: 0.001200  max mem: 24032
DONE (t=24.26s).
Accumulating evaluation results...
DONE (t=0.00s).
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.35913
 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=100 ] = 0.56953
 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=100 ] = 0.38933
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.18704
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.37512
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.46412
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=  1 ] = 0.30211
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets= 10 ] = 0.46908
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.48938
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.29095
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.51523
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.62787
2020-02-11 11:49:02,261 maskrcnn_benchmark.trainer INFO: eta: 3:12:19  iter: 34340  loss: 0.5694 (0.7045)  loss_classifier: 0.2000 (0.2434)  loss_box_reg: 0.0915 (0.1173)  loss_mask: 0.2323 (0.2644)  loss_objectness: 0.0162 (0.0316)  loss_rpn_box_reg: 0.0361 (0.0478)  time: 0.8551 (1.5064)  data: 0.0030 (0.6674)  lr: 0.001200  max mem: 24032
2020-02-11 11:49:19,230 maskrcnn_benchmark.trainer INFO: eta: 3:11:46  iter: 34360  loss: 0.5561 (0.7044)  loss_classifier: 0.1854 (0.2434)  loss_box_reg: 0.0977 (0.1173)  loss_mask: 0.2336 (0.2644)  loss_objectness: 0.0177 (0.0316)  loss_rpn_box_reg: 0.0359 (0.0478)  time: 0.8505 (1.5061)  data: 0.0030 (0.6670)  lr: 0.001200  max mem: 24032
2020-02-11 11:49:36,071 maskrcnn_benchmark.trainer INFO: eta: 3:11:13  iter: 34380  loss: 0.5653 (0.7044)  loss_classifier: 0.1863 (0.2433)  loss_box_reg: 0.0822 (0.1173)  loss_mask: 0.2296 (0.2644)  loss_objectness: 0.0165 (0.0316)  loss_rpn_box_reg: 0.0330 (0.0477)  time: 0.8391 (1.5057)  data: 0.0028 (0.6666)  lr: 0.001200  max mem: 24032
Loading and preparing results...
resFile is ./inference/coco_2014_val/segm.json
2020-02-11 11:49:52,947 maskrcnn_benchmark.trainer INFO: eta: 3:10:40  iter: 34400  loss: 0.5629 (0.7043)  loss_classifier: 0.1906 (0.2433)  loss_box_reg: 0.0933 (0.1173)  loss_mask: 0.2363 (0.2644)  loss_objectness: 0.0152 (0.0316)  loss_rpn_box_reg: 0.0378 (0.0477)  time: 0.8435 (1.5053)  data: 0.0029 (0.6662)  lr: 0.001200  max mem: 24032
DONE (t=14.03s)
Running per image evaluation...
Evaluate annotation type *segm*
2020-02-11 11:50:09,803 maskrcnn_benchmark.trainer INFO: eta: 3:10:07  iter: 34420  loss: 0.5622 (0.7042)  loss_classifier: 0.1760 (0.2433)  loss_box_reg: 0.0869 (0.1173)  loss_mask: 0.2373 (0.2644)  loss_objectness: 0.0161 (0.0316)  loss_rpn_box_reg: 0.0420 (0.0477)  time: 0.8431 (1.5049)  data: 0.0031 (0.6658)  lr: 0.001200  max mem: 24032
2020-02-11 11:50:26,616 maskrcnn_benchmark.trainer INFO: eta: 3:09:34  iter: 34440  loss: 0.5739 (0.7042)  loss_classifier: 0.1966 (0.2432)  loss_box_reg: 0.0965 (0.1173)  loss_mask: 0.2438 (0.2644)  loss_objectness: 0.0170 (0.0316)  loss_rpn_box_reg: 0.0330 (0.0477)  time: 0.8384 (1.5045)  data: 0.0030 (0.6654)  lr: 0.001200  max mem: 24032
DONE (t=30.95s).
Accumulating evaluation results...
DONE (t=0.00s).
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.32526
 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=100 ] = 0.53776
 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=100 ] = 0.34381
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.13315
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.33756
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.47901
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=  1 ] = 0.28377
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets= 10 ] = 0.43000
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.44662
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.24783
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.47506
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.59992
2020-02-11 11:50:35,449 maskrcnn_benchmark.trainer INFO: bbox mAP: 0.3591307258629521, segm mAP: 0.32526064720763964
:::MLL 1581421835.463 eval_accuracy: {"value": {"accuracy": {"BBOX": 0.3591307258629521, "SEGM": 0.32526064720763964}}, "metadata": {"epoch_num": 40, "file": "tools/train_mlperf.py", "lineno": 99}}
:::MLL 1581421835.464 eval_stop: {"value": null, "metadata": {"epoch_num": 40, "file": "tools/train_mlperf.py", "lineno": 100}}
2020-02-11 11:50:45,650 maskrcnn_benchmark.trainer INFO: eta: 3:09:01  iter: 34460  loss: 0.5639 (0.7041)  loss_classifier: 0.1788 (0.2432)  loss_box_reg: 0.0956 (0.1172)  loss_mask: 0.2343 (0.2643)  loss_objectness: 0.0136 (0.0316)  loss_rpn_box_reg: 0.0385 (0.0477)  time: 0.8517 (1.5042)  data: 0.0029 (0.6650)  lr: 0.001200  max mem: 24032
2020-02-11 11:51:02,538 maskrcnn_benchmark.trainer INFO: eta: 3:08:28  iter: 34480  loss: 0.5797 (0.7040)  loss_classifier: 0.1925 (0.2432)  loss_box_reg: 0.0983 (0.1172)  loss_mask: 0.2515 (0.2643)  loss_objectness: 0.0185 (0.0316)  loss_rpn_box_reg: 0.0307 (0.0477)  time: 0.8427 (1.5038)  data: 0.0029 (0.6647)  lr: 0.001200  max mem: 24032
2020-02-11 11:51:19,591 maskrcnn_benchmark.trainer INFO: eta: 3:07:55  iter: 34500  loss: 0.5909 (0.7040)  loss_classifier: 0.1835 (0.2431)  loss_box_reg: 0.1017 (0.1172)  loss_mask: 0.2517 (0.2643)  loss_objectness: 0.0157 (0.0316)  loss_rpn_box_reg: 0.0315 (0.0477)  time: 0.8515 (1.5034)  data: 0.0029 (0.6643)  lr: 0.001200  max mem: 24032
2020-02-11 11:51:36,527 maskrcnn_benchmark.trainer INFO: eta: 3:07:22  iter: 34520  loss: 0.5942 (0.7039)  loss_classifier: 0.1991 (0.2431)  loss_box_reg: 0.0972 (0.1172)  loss_mask: 0.2412 (0.2643)  loss_objectness: 0.0179 (0.0316)  loss_rpn_box_reg: 0.0335 (0.0477)  time: 0.8489 (1.5031)  data: 0.0031 (0.6639)  lr: 0.001200  max mem: 24032
2020-02-11 11:51:53,470 maskrcnn_benchmark.trainer INFO: eta: 3:06:49  iter: 34540  loss: 0.6113 (0.7039)  loss_classifier: 0.1845 (0.2431)  loss_box_reg: 0.1007 (0.1172)  loss_mask: 0.2508 (0.2643)  loss_objectness: 0.0188 (0.0316)  loss_rpn_box_reg: 0.0418 (0.0477)  time: 0.8512 (1.5027)  data: 0.0031 (0.6635)  lr: 0.001200  max mem: 24032
2020-02-11 11:52:10,321 maskrcnn_benchmark.trainer INFO: eta: 3:06:17  iter: 34560  loss: 0.5777 (0.7038)  loss_classifier: 0.1806 (0.2431)  loss_box_reg: 0.0922 (0.1172)  loss_mask: 0.2443 (0.2643)  loss_objectness: 0.0172 (0.0315)  loss_rpn_box_reg: 0.0347 (0.0477)  time: 0.8390 (1.5023)  data: 0.0030 (0.6631)  lr: 0.001200  max mem: 24032
2020-02-11 11:52:27,244 maskrcnn_benchmark.trainer INFO: eta: 3:05:44  iter: 34580  loss: 0.5687 (0.7037)  loss_classifier: 0.1793 (0.2430)  loss_box_reg: 0.0939 (0.1172)  loss_mask: 0.2409 (0.2643)  loss_objectness: 0.0150 (0.0315)  loss_rpn_box_reg: 0.0416 (0.0477)  time: 0.8490 (1.5019)  data: 0.0030 (0.6628)  lr: 0.001200  max mem: 24032
2020-02-11 11:52:44,147 maskrcnn_benchmark.trainer INFO: eta: 3:05:11  iter: 34600  loss: 0.5996 (0.7037)  loss_classifier: 0.1900 (0.2430)  loss_box_reg: 0.1010 (0.1172)  loss_mask: 0.2501 (0.2643)  loss_objectness: 0.0172 (0.0315)  loss_rpn_box_reg: 0.0355 (0.0477)  time: 0.8387 (1.5015)  data: 0.0029 (0.6624)  lr: 0.001200  max mem: 24032
2020-02-11 11:53:01,178 maskrcnn_benchmark.trainer INFO: eta: 3:04:38  iter: 34620  loss: 0.5739 (0.7036)  loss_classifier: 0.1830 (0.2430)  loss_box_reg: 0.0937 (0.1172)  loss_mask: 0.2324 (0.2642)  loss_objectness: 0.0162 (0.0315)  loss_rpn_box_reg: 0.0336 (0.0477)  time: 0.8508 (1.5012)  data: 0.0030 (0.6620)  lr: 0.001200  max mem: 24032
2020-02-11 11:53:18,105 maskrcnn_benchmark.trainer INFO: eta: 3:04:05  iter: 34640  loss: 0.5921 (0.7036)  loss_classifier: 0.1794 (0.2429)  loss_box_reg: 0.0945 (0.1172)  loss_mask: 0.2457 (0.2642)  loss_objectness: 0.0154 (0.0315)  loss_rpn_box_reg: 0.0301 (0.0477)  time: 0.8442 (1.5008)  data: 0.0031 (0.6616)  lr: 0.001200  max mem: 24032
2020-02-11 11:53:35,007 maskrcnn_benchmark.trainer INFO: eta: 3:03:32  iter: 34660  loss: 0.6195 (0.7035)  loss_classifier: 0.1988 (0.2429)  loss_box_reg: 0.1002 (0.1172)  loss_mask: 0.2372 (0.2642)  loss_objectness: 0.0168 (0.0315)  loss_rpn_box_reg: 0.0288 (0.0477)  time: 0.8399 (1.5004)  data: 0.0030 (0.6612)  lr: 0.001200  max mem: 24032
2020-02-11 11:53:52,003 maskrcnn_benchmark.trainer INFO: eta: 3:03:00  iter: 34680  loss: 0.5738 (0.7034)  loss_classifier: 0.1968 (0.2429)  loss_box_reg: 0.0994 (0.1172)  loss_mask: 0.2496 (0.2642)  loss_objectness: 0.0188 (0.0315)  loss_rpn_box_reg: 0.0393 (0.0477)  time: 0.8515 (1.5000)  data: 0.0029 (0.6608)  lr: 0.001200  max mem: 24032
2020-02-11 11:54:08,970 maskrcnn_benchmark.trainer INFO: eta: 3:02:27  iter: 34700  loss: 0.5560 (0.7034)  loss_classifier: 0.1778 (0.2429)  loss_box_reg: 0.0908 (0.1171)  loss_mask: 0.2471 (0.2642)  loss_objectness: 0.0153 (0.0315)  loss_rpn_box_reg: 0.0251 (0.0477)  time: 0.8455 (1.4997)  data: 0.0030 (0.6605)  lr: 0.001200  max mem: 24032
2020-02-11 11:54:25,836 maskrcnn_benchmark.trainer INFO: eta: 3:01:54  iter: 34720  loss: 0.5318 (0.7033)  loss_classifier: 0.1640 (0.2428)  loss_box_reg: 0.0822 (0.1171)  loss_mask: 0.2300 (0.2642)  loss_objectness: 0.0149 (0.0315)  loss_rpn_box_reg: 0.0323 (0.0477)  time: 0.8415 (1.4993)  data: 0.0029 (0.6601)  lr: 0.001200  max mem: 24032
2020-02-11 11:54:42,726 maskrcnn_benchmark.trainer INFO: eta: 3:01:21  iter: 34740  loss: 0.6277 (0.7032)  loss_classifier: 0.2015 (0.2428)  loss_box_reg: 0.1005 (0.1171)  loss_mask: 0.2324 (0.2642)  loss_objectness: 0.0153 (0.0315)  loss_rpn_box_reg: 0.0379 (0.0477)  time: 0.8372 (1.4989)  data: 0.0031 (0.6597)  lr: 0.001200  max mem: 24032
2020-02-11 11:54:59,789 maskrcnn_benchmark.trainer INFO: eta: 3:00:49  iter: 34760  loss: 0.6216 (0.7032)  loss_classifier: 0.2133 (0.2428)  loss_box_reg: 0.1062 (0.1171)  loss_mask: 0.2441 (0.2642)  loss_objectness: 0.0190 (0.0315)  loss_rpn_box_reg: 0.0376 (0.0477)  time: 0.8541 (1.4985)  data: 0.0030 (0.6593)  lr: 0.001200  max mem: 24032
2020-02-11 11:55:16,731 maskrcnn_benchmark.trainer INFO: eta: 3:00:16  iter: 34780  loss: 0.6044 (0.7031)  loss_classifier: 0.1831 (0.2428)  loss_box_reg: 0.1034 (0.1171)  loss_mask: 0.2530 (0.2641)  loss_objectness: 0.0184 (0.0315)  loss_rpn_box_reg: 0.0394 (0.0477)  time: 0.8509 (1.4981)  data: 0.0030 (0.6590)  lr: 0.001200  max mem: 24032
2020-02-11 11:55:33,535 maskrcnn_benchmark.trainer INFO: eta: 2:59:43  iter: 34800  loss: 0.5046 (0.7030)  loss_classifier: 0.1703 (0.2427)  loss_box_reg: 0.0808 (0.1171)  loss_mask: 0.2232 (0.2641)  loss_objectness: 0.0157 (0.0315)  loss_rpn_box_reg: 0.0242 (0.0477)  time: 0.8474 (1.4978)  data: 0.0029 (0.6586)  lr: 0.001200  max mem: 24032
2020-02-11 11:55:50,605 maskrcnn_benchmark.trainer INFO: eta: 2:59:11  iter: 34820  loss: 0.6118 (0.7030)  loss_classifier: 0.2060 (0.2427)  loss_box_reg: 0.1095 (0.1171)  loss_mask: 0.2434 (0.2641)  loss_objectness: 0.0179 (0.0314)  loss_rpn_box_reg: 0.0334 (0.0477)  time: 0.8474 (1.4974)  data: 0.0030 (0.6582)  lr: 0.001200  max mem: 24032
2020-02-11 11:56:07,567 maskrcnn_benchmark.trainer INFO: eta: 2:58:38  iter: 34840  loss: 0.5721 (0.7029)  loss_classifier: 0.1910 (0.2427)  loss_box_reg: 0.0908 (0.1171)  loss_mask: 0.2312 (0.2641)  loss_objectness: 0.0167 (0.0314)  loss_rpn_box_reg: 0.0378 (0.0477)  time: 0.8445 (1.4970)  data: 0.0029 (0.6578)  lr: 0.001200  max mem: 24032
2020-02-11 11:56:24,471 maskrcnn_benchmark.trainer INFO: eta: 2:58:06  iter: 34860  loss: 0.6217 (0.7029)  loss_classifier: 0.1994 (0.2426)  loss_box_reg: 0.1097 (0.1171)  loss_mask: 0.2375 (0.2641)  loss_objectness: 0.0183 (0.0314)  loss_rpn_box_reg: 0.0355 (0.0477)  time: 0.8410 (1.4967)  data: 0.0030 (0.6575)  lr: 0.001200  max mem: 24032
2020-02-11 11:56:41,345 maskrcnn_benchmark.trainer INFO: eta: 2:57:33  iter: 34880  loss: 0.5769 (0.7028)  loss_classifier: 0.1804 (0.2426)  loss_box_reg: 0.0911 (0.1170)  loss_mask: 0.2449 (0.2641)  loss_objectness: 0.0178 (0.0314)  loss_rpn_box_reg: 0.0375 (0.0476)  time: 0.8445 (1.4963)  data: 0.0030 (0.6571)  lr: 0.001200  max mem: 24032
2020-02-11 11:56:58,291 maskrcnn_benchmark.trainer INFO: eta: 2:57:00  iter: 34900  loss: 0.5566 (0.7027)  loss_classifier: 0.1952 (0.2426)  loss_box_reg: 0.0938 (0.1170)  loss_mask: 0.2428 (0.2641)  loss_objectness: 0.0162 (0.0314)  loss_rpn_box_reg: 0.0363 (0.0476)  time: 0.8463 (1.4959)  data: 0.0030 (0.6567)  lr: 0.001200  max mem: 24032
2020-02-11 11:57:15,307 maskrcnn_benchmark.trainer INFO: eta: 2:56:28  iter: 34920  loss: 0.5477 (0.7027)  loss_classifier: 0.1545 (0.2425)  loss_box_reg: 0.0780 (0.1170)  loss_mask: 0.2451 (0.2640)  loss_objectness: 0.0157 (0.0314)  loss_rpn_box_reg: 0.0336 (0.0476)  time: 0.8505 (1.4955)  data: 0.0031 (0.6563)  lr: 0.001200  max mem: 24032
2020-02-11 11:57:32,229 maskrcnn_benchmark.trainer INFO: eta: 2:55:55  iter: 34940  loss: 0.6100 (0.7026)  loss_classifier: 0.2010 (0.2425)  loss_box_reg: 0.1034 (0.1170)  loss_mask: 0.2387 (0.2640)  loss_objectness: 0.0174 (0.0314)  loss_rpn_box_reg: 0.0401 (0.0476)  time: 0.8452 (1.4952)  data: 0.0031 (0.6560)  lr: 0.001200  max mem: 24032
2020-02-11 11:57:49,039 maskrcnn_benchmark.trainer INFO: eta: 2:55:23  iter: 34960  loss: 0.5901 (0.7025)  loss_classifier: 0.1910 (0.2425)  loss_box_reg: 0.0866 (0.1170)  loss_mask: 0.2337 (0.2640)  loss_objectness: 0.0185 (0.0314)  loss_rpn_box_reg: 0.0331 (0.0476)  time: 0.8409 (1.4948)  data: 0.0029 (0.6556)  lr: 0.001200  max mem: 24032
2020-02-11 11:58:05,827 maskrcnn_benchmark.trainer INFO: eta: 2:54:50  iter: 34980  loss: 0.6437 (0.7025)  loss_classifier: 0.2121 (0.2425)  loss_box_reg: 0.1115 (0.1170)  loss_mask: 0.2482 (0.2640)  loss_objectness: 0.0164 (0.0314)  loss_rpn_box_reg: 0.0398 (0.0476)  time: 0.8397 (1.4944)  data: 0.0029 (0.6552)  lr: 0.001200  max mem: 24032
2020-02-11 11:58:22,716 maskrcnn_benchmark.trainer INFO: eta: 2:54:18  iter: 35000  loss: 0.6131 (0.7024)  loss_classifier: 0.1880 (0.2424)  loss_box_reg: 0.1038 (0.1170)  loss_mask: 0.2378 (0.2640)  loss_objectness: 0.0177 (0.0314)  loss_rpn_box_reg: 0.0388 (0.0476)  time: 0.8446 (1.4940)  data: 0.0031 (0.6548)  lr: 0.001200  max mem: 24032
2020-02-11 11:58:39,802 maskrcnn_benchmark.trainer INFO: eta: 2:53:45  iter: 35020  loss: 0.5422 (0.7024)  loss_classifier: 0.1782 (0.2424)  loss_box_reg: 0.0927 (0.1170)  loss_mask: 0.2376 (0.2640)  loss_objectness: 0.0154 (0.0314)  loss_rpn_box_reg: 0.0448 (0.0476)  time: 0.8556 (1.4937)  data: 0.0031 (0.6545)  lr: 0.001200  max mem: 24032
2020-02-11 11:58:56,743 maskrcnn_benchmark.trainer INFO: eta: 2:53:13  iter: 35040  loss: 0.5372 (0.7023)  loss_classifier: 0.1743 (0.2424)  loss_box_reg: 0.0936 (0.1170)  loss_mask: 0.2284 (0.2640)  loss_objectness: 0.0143 (0.0314)  loss_rpn_box_reg: 0.0288 (0.0476)  time: 0.8442 (1.4933)  data: 0.0030 (0.6541)  lr: 0.001200  max mem: 24032
2020-02-11 11:59:13,631 maskrcnn_benchmark.trainer INFO: eta: 2:52:41  iter: 35060  loss: 0.5948 (0.7022)  loss_classifier: 0.1822 (0.2423)  loss_box_reg: 0.1007 (0.1170)  loss_mask: 0.2382 (0.2639)  loss_objectness: 0.0143 (0.0314)  loss_rpn_box_reg: 0.0324 (0.0476)  time: 0.8438 (1.4929)  data: 0.0030 (0.6537)  lr: 0.001200  max mem: 24032
2020-02-11 11:59:30,668 maskrcnn_benchmark.trainer INFO: eta: 2:52:08  iter: 35080  loss: 0.5535 (0.7021)  loss_classifier: 0.1677 (0.2423)  loss_box_reg: 0.0879 (0.1169)  loss_mask: 0.2383 (0.2639)  loss_objectness: 0.0169 (0.0313)  loss_rpn_box_reg: 0.0375 (0.0476)  time: 0.8519 (1.4926)  data: 0.0030 (0.6533)  lr: 0.001200  max mem: 24032
Gradient overflow.  Skipping step, loss scaler 0 reducing loss scale to 65536.0
Gradient overflow.  Skipping step, loss scaler 0 reducing loss scale to 65536.0
Gradient overflow.  Skipping step, loss scaler 0 reducing loss scale to 65536.0
Gradient overflow.  Skipping step, loss scaler 0 reducing loss scale to 65536.0
Gradient overflow.  Skipping step, loss scaler 0 reducing loss scale to 65536.0
Gradient overflow.  Skipping step, loss scaler 0 reducing loss scale to 65536.0
Gradient overflow.  Skipping step, loss scaler 0 reducing loss scale to 65536.0
Gradient overflow.  Skipping step, loss scaler 0 reducing loss scale to 65536.0
:::MLL 1581422383.869 epoch_stop: {"value": null, "metadata": {"epoch_num": 41, "file": "tools/train_mlperf.py", "lineno": 75}}
:::MLL 1581422383.869 block_stop: {"value": null, "metadata": {"first_epoch_num": 41, "file": "tools/train_mlperf.py", "lineno": 76}}
:::MLL 1581422383.870 eval_start: {"value": null, "metadata": {"epoch_num": 41, "file": "tools/train_mlperf.py", "lineno": 77}}
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
2020-02-11 11:59:44,573 maskrcnn_benchmark.data.build WARNING: When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
Done (t=3.88s)
creating index...
Done (t=3.98s)
creating index...
Done (t=3.80s)
creating index...
Done (t=3.83s)
creating index...
Done (t=3.93s)
creating index...
Done (t=3.95s)
creating index...
Done (t=3.93s)
creating index...
Done (t=3.93s)
creating index...
index created!
index created!
index created!
index created!
  0%|                                                  | 0/2532 [00:00<?, ?it/s]index created!
index created!
  0%|                                                  | 0/2532 [00:00<?, ?it/s]index created!
index created!
2020-02-11 11:59:48,956 maskrcnn_benchmark.inference INFO: Start evaluation on coco_2014_val dataset(40504 images).
 99%|██████████████████████████████████████▊| 2518/2532 [03:45<00:01, 11.53it/s]
100%|███████████████████████████████████████| 2532/2532 [03:46<00:00, 11.16it/s]
100%|███████████████████████████████████████| 2532/2532 [03:47<00:00, 11.14it/s]
 98%|██████████████████████████████████████▏| 2482/2532 [03:47<00:04, 10.57it/s]
 98%|██████████████████████████████████████▍| 2494/2532 [03:48<00:03, 10.68it/s]
 99%|██████████████████████████████████████▌| 2500/2532 [03:49<00:02, 11.23it/s]
 99%|██████████████████████████████████████▌| 2504/2532 [03:49<00:02, 11.16it/s]
100%|███████████████████████████████████████| 2532/2532 [03:52<00:00, 12.71it/s]
2020-02-11 12:03:42,785 maskrcnn_benchmark.inference INFO: Total inference time: 0:03:53.829091 (0.046183901108137686 s / img per device, on 8 devices)
2020-02-11 12:03:43,797 maskrcnn_benchmark.inference INFO: Preparing results for COCO format
2020-02-11 12:03:43,797 maskrcnn_benchmark.inference INFO: Preparing bbox results
2020-02-11 12:03:45,301 maskrcnn_benchmark.inference INFO: Preparing segm results
:::MLL 1581422852.673 block_start: {"value": null, "metadata": {"first_epoch_num": 42, "epoch_count": 1, "file": "tools/train_mlperf.py", "lineno": 134}}
:::MLL 1581422852.675 epoch_start: {"value": null, "metadata": {"epoch_num": 42, "file": "tools/train_mlperf.py", "lineno": 135}}
2020-02-11 12:07:36,093 maskrcnn_benchmark.trainer INFO: eta: 2:53:08  iter: 35100  loss: 0.6013 (0.7021)  loss_classifier: 0.1865 (0.2423)  loss_box_reg: 0.0975 (0.1169)  loss_mask: 0.2394 (0.2639)  loss_objectness: 0.0166 (0.0313)  loss_rpn_box_reg: 0.0346 (0.0476)  time: 0.8400 (1.5056)  data: 0.0031 (0.6663)  lr: 0.001200  max mem: 24032
Evaluating predictions
creating index...
GT annotations already exist!
2020-02-11 12:07:53,130 maskrcnn_benchmark.trainer INFO: eta: 2:52:35  iter: 35120  loss: 0.6062 (0.7020)  loss_classifier: 0.1972 (0.2423)  loss_box_reg: 0.1025 (0.1169)  loss_mask: 0.2400 (0.2639)  loss_objectness: 0.0170 (0.0313)  loss_rpn_box_reg: 0.0350 (0.0476)  time: 0.8494 (1.5052)  data: 0.0029 (0.6660)  lr: 0.001200  max mem: 24032
2020-02-11 12:08:10,098 maskrcnn_benchmark.trainer INFO: eta: 2:52:02  iter: 35140  loss: 0.5722 (0.7019)  loss_classifier: 0.1976 (0.2422)  loss_box_reg: 0.0969 (0.1169)  loss_mask: 0.2366 (0.2639)  loss_objectness: 0.0147 (0.0313)  loss_rpn_box_reg: 0.0381 (0.0476)  time: 0.8484 (1.5048)  data: 0.0030 (0.6656)  lr: 0.001200  max mem: 24032
Loading and preparing results...
resFile is ./inference/coco_2014_val/bbox.json
2020-02-11 12:08:27,140 maskrcnn_benchmark.trainer INFO: eta: 2:51:30  iter: 35160  loss: 0.5576 (0.7019)  loss_classifier: 0.1881 (0.2422)  loss_box_reg: 0.0861 (0.1169)  loss_mask: 0.2172 (0.2639)  loss_objectness: 0.0146 (0.0313)  loss_rpn_box_reg: 0.0301 (0.0476)  time: 0.8495 (1.5044)  data: 0.0028 (0.6652)  lr: 0.001200  max mem: 24032
DONE (t=6.04s)
Running per image evaluation...
Evaluate annotation type *bbox*
2020-02-11 12:08:44,226 maskrcnn_benchmark.trainer INFO: eta: 2:50:57  iter: 35180  loss: 0.6305 (0.7018)  loss_classifier: 0.2005 (0.2422)  loss_box_reg: 0.1148 (0.1169)  loss_mask: 0.2430 (0.2639)  loss_objectness: 0.0163 (0.0313)  loss_rpn_box_reg: 0.0385 (0.0476)  time: 0.8486 (1.5041)  data: 0.0030 (0.6648)  lr: 0.001200  max mem: 24032
DONE (t=24.72s).
Accumulating evaluation results...
DONE (t=0.00s).
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.35867
 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=100 ] = 0.56937
 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=100 ] = 0.38944
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.18611
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.37326
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.46272
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=  1 ] = 0.30157
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets= 10 ] = 0.46842
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.48916
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.29356
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.51350
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.62454
2020-02-11 12:09:01,133 maskrcnn_benchmark.trainer INFO: eta: 2:50:25  iter: 35200  loss: 0.5814 (0.7017)  loss_classifier: 0.1899 (0.2421)  loss_box_reg: 0.0936 (0.1169)  loss_mask: 0.2424 (0.2638)  loss_objectness: 0.0167 (0.0313)  loss_rpn_box_reg: 0.0286 (0.0476)  time: 0.8421 (1.5037)  data: 0.0030 (0.6644)  lr: 0.001200  max mem: 24032
2020-02-11 12:09:17,916 maskrcnn_benchmark.trainer INFO: eta: 2:49:52  iter: 35220  loss: 0.5526 (0.7017)  loss_classifier: 0.1891 (0.2421)  loss_box_reg: 0.0982 (0.1169)  loss_mask: 0.2384 (0.2638)  loss_objectness: 0.0181 (0.0313)  loss_rpn_box_reg: 0.0272 (0.0476)  time: 0.8377 (1.5033)  data: 0.0027 (0.6641)  lr: 0.001200  max mem: 24032
2020-02-11 12:09:34,719 maskrcnn_benchmark.trainer INFO: eta: 2:49:19  iter: 35240  loss: 0.4754 (0.7016)  loss_classifier: 0.1676 (0.2421)  loss_box_reg: 0.0783 (0.1169)  loss_mask: 0.2198 (0.2638)  loss_objectness: 0.0126 (0.0313)  loss_rpn_box_reg: 0.0287 (0.0476)  time: 0.8357 (1.5029)  data: 0.0027 (0.6637)  lr: 0.001200  max mem: 24032
Loading and preparing results...
resFile is ./inference/coco_2014_val/segm.json
2020-02-11 12:09:51,592 maskrcnn_benchmark.trainer INFO: eta: 2:48:47  iter: 35260  loss: 0.5419 (0.7015)  loss_classifier: 0.1844 (0.2420)  loss_box_reg: 0.0995 (0.1169)  loss_mask: 0.2367 (0.2638)  loss_objectness: 0.0192 (0.0313)  loss_rpn_box_reg: 0.0361 (0.0475)  time: 0.8398 (1.5026)  data: 0.0029 (0.6633)  lr: 0.001200  max mem: 24032
DONE (t=13.94s)
Running per image evaluation...
Evaluate annotation type *segm*
2020-02-11 12:10:08,515 maskrcnn_benchmark.trainer INFO: eta: 2:48:14  iter: 35280  loss: 0.6091 (0.7015)  loss_classifier: 0.1909 (0.2420)  loss_box_reg: 0.0996 (0.1168)  loss_mask: 0.2433 (0.2638)  loss_objectness: 0.0174 (0.0313)  loss_rpn_box_reg: 0.0415 (0.0475)  time: 0.8474 (1.5022)  data: 0.0028 (0.6629)  lr: 0.001200  max mem: 24032
2020-02-11 12:10:25,324 maskrcnn_benchmark.trainer INFO: eta: 2:47:42  iter: 35300  loss: 0.5355 (0.7014)  loss_classifier: 0.1800 (0.2420)  loss_box_reg: 0.0862 (0.1168)  loss_mask: 0.2353 (0.2638)  loss_objectness: 0.0182 (0.0313)  loss_rpn_box_reg: 0.0286 (0.0475)  time: 0.8403 (1.5018)  data: 0.0030 (0.6626)  lr: 0.001200  max mem: 24032
DONE (t=30.85s).
Accumulating evaluation results...
DONE (t=0.00s).
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.32421
 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=100 ] = 0.53676
 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=100 ] = 0.34231
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.13272
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.33654
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.47773
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=  1 ] = 0.28316
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets= 10 ] = 0.42870
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.44577
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.24967
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.47335
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.59688
2020-02-11 12:10:31,227 maskrcnn_benchmark.trainer INFO: bbox mAP: 0.35867198127698097, segm mAP: 0.3242115115818028
:::MLL 1581423031.241 eval_accuracy: {"value": {"accuracy": {"BBOX": 0.35867198127698097, "SEGM": 0.3242115115818028}}, "metadata": {"epoch_num": 41, "file": "tools/train_mlperf.py", "lineno": 99}}
:::MLL 1581423031.242 eval_stop: {"value": null, "metadata": {"epoch_num": 41, "file": "tools/train_mlperf.py", "lineno": 100}}
2020-02-11 12:10:44,935 maskrcnn_benchmark.trainer INFO: eta: 2:47:10  iter: 35320  loss: 0.5822 (0.7013)  loss_classifier: 0.1874 (0.2420)  loss_box_reg: 0.0990 (0.1168)  loss_mask: 0.2370 (0.2638)  loss_objectness: 0.0138 (0.0313)  loss_rpn_box_reg: 0.0384 (0.0475)  time: 0.8572 (1.5015)  data: 0.0030 (0.6622)  lr: 0.001200  max mem: 24032
2020-02-11 12:11:01,859 maskrcnn_benchmark.trainer INFO: eta: 2:46:37  iter: 35340  loss: 0.5459 (0.7012)  loss_classifier: 0.1853 (0.2419)  loss_box_reg: 0.0874 (0.1168)  loss_mask: 0.2393 (0.2637)  loss_objectness: 0.0200 (0.0312)  loss_rpn_box_reg: 0.0253 (0.0475)  time: 0.8429 (1.5012)  data: 0.0028 (0.6618)  lr: 0.001200  max mem: 24032
2020-02-11 12:11:18,773 maskrcnn_benchmark.trainer INFO: eta: 2:46:05  iter: 35360  loss: 0.5609 (0.7012)  loss_classifier: 0.1756 (0.2419)  loss_box_reg: 0.0968 (0.1168)  loss_mask: 0.2378 (0.2637)  loss_objectness: 0.0153 (0.0312)  loss_rpn_box_reg: 0.0329 (0.0475)  time: 0.8407 (1.5008)  data: 0.0029 (0.6615)  lr: 0.001200  max mem: 24032
2020-02-11 12:11:35,688 maskrcnn_benchmark.trainer INFO: eta: 2:45:32  iter: 35380  loss: 0.5700 (0.7011)  loss_classifier: 0.1828 (0.2419)  loss_box_reg: 0.0964 (0.1168)  loss_mask: 0.2331 (0.2637)  loss_objectness: 0.0158 (0.0312)  loss_rpn_box_reg: 0.0399 (0.0475)  time: 0.8454 (1.5004)  data: 0.0031 (0.6611)  lr: 0.001200  max mem: 24032
2020-02-11 12:11:52,619 maskrcnn_benchmark.trainer INFO: eta: 2:45:00  iter: 35400  loss: 0.5774 (0.7010)  loss_classifier: 0.1832 (0.2418)  loss_box_reg: 0.0965 (0.1168)  loss_mask: 0.2505 (0.2637)  loss_objectness: 0.0138 (0.0312)  loss_rpn_box_reg: 0.0322 (0.0475)  time: 0.8498 (1.5000)  data: 0.0029 (0.6607)  lr: 0.001200  max mem: 24032
2020-02-11 12:12:09,672 maskrcnn_benchmark.trainer INFO: eta: 2:44:27  iter: 35420  loss: 0.6194 (0.7010)  loss_classifier: 0.2067 (0.2418)  loss_box_reg: 0.1123 (0.1168)  loss_mask: 0.2528 (0.2637)  loss_objectness: 0.0212 (0.0312)  loss_rpn_box_reg: 0.0393 (0.0475)  time: 0.8551 (1.4997)  data: 0.0032 (0.6603)  lr: 0.001200  max mem: 24032
2020-02-11 12:12:26,529 maskrcnn_benchmark.trainer INFO: eta: 2:43:55  iter: 35440  loss: 0.6069 (0.7010)  loss_classifier: 0.2011 (0.2418)  loss_box_reg: 0.1063 (0.1168)  loss_mask: 0.2379 (0.2637)  loss_objectness: 0.0194 (0.0312)  loss_rpn_box_reg: 0.0291 (0.0475)  time: 0.8469 (1.4993)  data: 0.0031 (0.6600)  lr: 0.001200  max mem: 24032
2020-02-11 12:12:43,645 maskrcnn_benchmark.trainer INFO: eta: 2:43:23  iter: 35460  loss: 0.5529 (0.7009)  loss_classifier: 0.1726 (0.2418)  loss_box_reg: 0.0853 (0.1168)  loss_mask: 0.2230 (0.2637)  loss_objectness: 0.0163 (0.0312)  loss_rpn_box_reg: 0.0321 (0.0475)  time: 0.8549 (1.4989)  data: 0.0030 (0.6596)  lr: 0.001200  max mem: 24032
2020-02-11 12:13:00,640 maskrcnn_benchmark.trainer INFO: eta: 2:42:50  iter: 35480  loss: 0.5544 (0.7008)  loss_classifier: 0.1689 (0.2417)  loss_box_reg: 0.0930 (0.1167)  loss_mask: 0.2332 (0.2636)  loss_objectness: 0.0148 (0.0312)  loss_rpn_box_reg: 0.0296 (0.0475)  time: 0.8492 (1.4986)  data: 0.0030 (0.6592)  lr: 0.001200  max mem: 24032
2020-02-11 12:13:17,626 maskrcnn_benchmark.trainer INFO: eta: 2:42:18  iter: 35500  loss: 0.5424 (0.7007)  loss_classifier: 0.1784 (0.2417)  loss_box_reg: 0.0864 (0.1167)  loss_mask: 0.2285 (0.2636)  loss_objectness: 0.0145 (0.0312)  loss_rpn_box_reg: 0.0364 (0.0475)  time: 0.8427 (1.4982)  data: 0.0030 (0.6589)  lr: 0.001200  max mem: 24032
2020-02-11 12:13:34,529 maskrcnn_benchmark.trainer INFO: eta: 2:41:46  iter: 35520  loss: 0.5631 (0.7007)  loss_classifier: 0.1962 (0.2417)  loss_box_reg: 0.0898 (0.1167)  loss_mask: 0.2354 (0.2636)  loss_objectness: 0.0163 (0.0312)  loss_rpn_box_reg: 0.0290 (0.0475)  time: 0.8457 (1.4978)  data: 0.0029 (0.6585)  lr: 0.001200  max mem: 24032
2020-02-11 12:13:51,413 maskrcnn_benchmark.trainer INFO: eta: 2:41:13  iter: 35540  loss: 0.6340 (0.7006)  loss_classifier: 0.2039 (0.2416)  loss_box_reg: 0.1074 (0.1167)  loss_mask: 0.2445 (0.2636)  loss_objectness: 0.0188 (0.0312)  loss_rpn_box_reg: 0.0491 (0.0475)  time: 0.8402 (1.4975)  data: 0.0030 (0.6581)  lr: 0.001200  max mem: 24032
2020-02-11 12:14:08,250 maskrcnn_benchmark.trainer INFO: eta: 2:40:41  iter: 35560  loss: 0.5387 (0.7005)  loss_classifier: 0.1663 (0.2416)  loss_box_reg: 0.0808 (0.1167)  loss_mask: 0.2375 (0.2636)  loss_objectness: 0.0150 (0.0312)  loss_rpn_box_reg: 0.0368 (0.0475)  time: 0.8443 (1.4971)  data: 0.0030 (0.6578)  lr: 0.001200  max mem: 24032
2020-02-11 12:14:25,193 maskrcnn_benchmark.trainer INFO: eta: 2:40:09  iter: 35580  loss: 0.6071 (0.7005)  loss_classifier: 0.1982 (0.2416)  loss_box_reg: 0.1068 (0.1167)  loss_mask: 0.2443 (0.2636)  loss_objectness: 0.0193 (0.0312)  loss_rpn_box_reg: 0.0365 (0.0475)  time: 0.8469 (1.4967)  data: 0.0030 (0.6574)  lr: 0.001200  max mem: 24032
2020-02-11 12:14:41,929 maskrcnn_benchmark.trainer INFO: eta: 2:39:36  iter: 35600  loss: 0.5917 (0.7004)  loss_classifier: 0.1989 (0.2416)  loss_box_reg: 0.0891 (0.1167)  loss_mask: 0.2377 (0.2636)  loss_objectness: 0.0181 (0.0312)  loss_rpn_box_reg: 0.0306 (0.0475)  time: 0.8282 (1.4964)  data: 0.0030 (0.6570)  lr: 0.001200  max mem: 24032
2020-02-11 12:14:58,918 maskrcnn_benchmark.trainer INFO: eta: 2:39:04  iter: 35620  loss: 0.5724 (0.7004)  loss_classifier: 0.1843 (0.2415)  loss_box_reg: 0.0886 (0.1167)  loss_mask: 0.2400 (0.2636)  loss_objectness: 0.0184 (0.0311)  loss_rpn_box_reg: 0.0386 (0.0475)  time: 0.8413 (1.4960)  data: 0.0031 (0.6567)  lr: 0.001200  max mem: 24032
2020-02-11 12:15:15,858 maskrcnn_benchmark.trainer INFO: eta: 2:38:32  iter: 35640  loss: 0.5709 (0.7003)  loss_classifier: 0.1953 (0.2415)  loss_box_reg: 0.1011 (0.1167)  loss_mask: 0.2407 (0.2635)  loss_objectness: 0.0187 (0.0311)  loss_rpn_box_reg: 0.0299 (0.0475)  time: 0.8442 (1.4956)  data: 0.0030 (0.6563)  lr: 0.001200  max mem: 24032
2020-02-11 12:15:32,694 maskrcnn_benchmark.trainer INFO: eta: 2:38:00  iter: 35660  loss: 0.5367 (0.7002)  loss_classifier: 0.1681 (0.2415)  loss_box_reg: 0.0891 (0.1167)  loss_mask: 0.2353 (0.2635)  loss_objectness: 0.0137 (0.0311)  loss_rpn_box_reg: 0.0330 (0.0475)  time: 0.8408 (1.4953)  data: 0.0028 (0.6559)  lr: 0.001200  max mem: 24032
2020-02-11 12:15:49,572 maskrcnn_benchmark.trainer INFO: eta: 2:37:27  iter: 35680  loss: 0.5784 (0.7002)  loss_classifier: 0.2039 (0.2414)  loss_box_reg: 0.0986 (0.1166)  loss_mask: 0.2284 (0.2635)  loss_objectness: 0.0175 (0.0311)  loss_rpn_box_reg: 0.0365 (0.0474)  time: 0.8438 (1.4949)  data: 0.0031 (0.6556)  lr: 0.001200  max mem: 24032
2020-02-11 12:16:06,340 maskrcnn_benchmark.trainer INFO: eta: 2:36:55  iter: 35700  loss: 0.5375 (0.7001)  loss_classifier: 0.1614 (0.2414)  loss_box_reg: 0.0879 (0.1166)  loss_mask: 0.2354 (0.2635)  loss_objectness: 0.0132 (0.0311)  loss_rpn_box_reg: 0.0286 (0.0474)  time: 0.8381 (1.4945)  data: 0.0028 (0.6552)  lr: 0.001200  max mem: 24032
2020-02-11 12:16:23,347 maskrcnn_benchmark.trainer INFO: eta: 2:36:23  iter: 35720  loss: 0.5770 (0.7000)  loss_classifier: 0.1893 (0.2414)  loss_box_reg: 0.1021 (0.1166)  loss_mask: 0.2407 (0.2635)  loss_objectness: 0.0169 (0.0311)  loss_rpn_box_reg: 0.0329 (0.0474)  time: 0.8532 (1.4942)  data: 0.0031 (0.6548)  lr: 0.001200  max mem: 24032
2020-02-11 12:16:40,091 maskrcnn_benchmark.trainer INFO: eta: 2:35:51  iter: 35740  loss: 0.6015 (0.7000)  loss_classifier: 0.2004 (0.2413)  loss_box_reg: 0.0953 (0.1166)  loss_mask: 0.2430 (0.2635)  loss_objectness: 0.0180 (0.0311)  loss_rpn_box_reg: 0.0294 (0.0474)  time: 0.8353 (1.4938)  data: 0.0029 (0.6545)  lr: 0.001200  max mem: 24032
2020-02-11 12:16:56,899 maskrcnn_benchmark.trainer INFO: eta: 2:35:19  iter: 35760  loss: 0.5776 (0.6999)  loss_classifier: 0.1815 (0.2413)  loss_box_reg: 0.0948 (0.1166)  loss_mask: 0.2320 (0.2635)  loss_objectness: 0.0187 (0.0311)  loss_rpn_box_reg: 0.0483 (0.0474)  time: 0.8423 (1.4935)  data: 0.0030 (0.6541)  lr: 0.001200  max mem: 24032
2020-02-11 12:17:13,709 maskrcnn_benchmark.trainer INFO: eta: 2:34:46  iter: 35780  loss: 0.5586 (0.6998)  loss_classifier: 0.1730 (0.2413)  loss_box_reg: 0.0872 (0.1166)  loss_mask: 0.2410 (0.2634)  loss_objectness: 0.0150 (0.0311)  loss_rpn_box_reg: 0.0384 (0.0474)  time: 0.8384 (1.4931)  data: 0.0030 (0.6537)  lr: 0.001200  max mem: 24032
2020-02-11 12:17:30,652 maskrcnn_benchmark.trainer INFO: eta: 2:34:14  iter: 35800  loss: 0.5799 (0.6997)  loss_classifier: 0.1874 (0.2412)  loss_box_reg: 0.0923 (0.1166)  loss_mask: 0.2303 (0.2634)  loss_objectness: 0.0177 (0.0311)  loss_rpn_box_reg: 0.0271 (0.0474)  time: 0.8483 (1.4927)  data: 0.0029 (0.6534)  lr: 0.001200  max mem: 24032
2020-02-11 12:17:47,312 maskrcnn_benchmark.trainer INFO: eta: 2:33:42  iter: 35820  loss: 0.6155 (0.6997)  loss_classifier: 0.2062 (0.2412)  loss_box_reg: 0.1006 (0.1166)  loss_mask: 0.2458 (0.2634)  loss_objectness: 0.0151 (0.0311)  loss_rpn_box_reg: 0.0422 (0.0474)  time: 0.8330 (1.4924)  data: 0.0031 (0.6530)  lr: 0.001200  max mem: 24032
2020-02-11 12:18:04,209 maskrcnn_benchmark.trainer INFO: eta: 2:33:10  iter: 35840  loss: 0.5836 (0.6997)  loss_classifier: 0.1981 (0.2412)  loss_box_reg: 0.0928 (0.1166)  loss_mask: 0.2330 (0.2634)  loss_objectness: 0.0173 (0.0311)  loss_rpn_box_reg: 0.0404 (0.0474)  time: 0.8403 (1.4920)  data: 0.0030 (0.6526)  lr: 0.001200  max mem: 24032
2020-02-11 12:18:21,136 maskrcnn_benchmark.trainer INFO: eta: 2:32:38  iter: 35860  loss: 0.5630 (0.6996)  loss_classifier: 0.1757 (0.2412)  loss_box_reg: 0.0827 (0.1165)  loss_mask: 0.2251 (0.2634)  loss_objectness: 0.0158 (0.0311)  loss_rpn_box_reg: 0.0302 (0.0474)  time: 0.8442 (1.4916)  data: 0.0029 (0.6523)  lr: 0.001200  max mem: 24032
2020-02-11 12:18:38,076 maskrcnn_benchmark.trainer INFO: eta: 2:32:06  iter: 35880  loss: 0.5702 (0.6995)  loss_classifier: 0.1787 (0.2411)  loss_box_reg: 0.0984 (0.1165)  loss_mask: 0.2427 (0.2634)  loss_objectness: 0.0153 (0.0310)  loss_rpn_box_reg: 0.0373 (0.0474)  time: 0.8445 (1.4913)  data: 0.0030 (0.6519)  lr: 0.001200  max mem: 24032
2020-02-11 12:18:54,956 maskrcnn_benchmark.trainer INFO: eta: 2:31:34  iter: 35900  loss: 0.5629 (0.6995)  loss_classifier: 0.1878 (0.2411)  loss_box_reg: 0.0957 (0.1165)  loss_mask: 0.2378 (0.2634)  loss_objectness: 0.0167 (0.0310)  loss_rpn_box_reg: 0.0350 (0.0474)  time: 0.8380 (1.4909)  data: 0.0030 (0.6516)  lr: 0.001200  max mem: 24032
2020-02-11 12:19:11,811 maskrcnn_benchmark.trainer INFO: eta: 2:31:02  iter: 35920  loss: 0.6242 (0.6994)  loss_classifier: 0.1986 (0.2411)  loss_box_reg: 0.1095 (0.1165)  loss_mask: 0.2410 (0.2634)  loss_objectness: 0.0174 (0.0310)  loss_rpn_box_reg: 0.0458 (0.0474)  time: 0.8412 (1.4906)  data: 0.0031 (0.6512)  lr: 0.001200  max mem: 24032
2020-02-11 12:19:28,855 maskrcnn_benchmark.trainer INFO: eta: 2:30:30  iter: 35940  loss: 0.5618 (0.6994)  loss_classifier: 0.1848 (0.2411)  loss_box_reg: 0.0872 (0.1165)  loss_mask: 0.2311 (0.2633)  loss_objectness: 0.0156 (0.0310)  loss_rpn_box_reg: 0.0371 (0.0474)  time: 0.8523 (1.4902)  data: 0.0030 (0.6508)  lr: 0.001200  max mem: 24032
:::MLL 1581423578.564 epoch_stop: {"value": null, "metadata": {"epoch_num": 42, "file": "tools/train_mlperf.py", "lineno": 75}}
:::MLL 1581423578.565 block_stop: {"value": null, "metadata": {"first_epoch_num": 42, "file": "tools/train_mlperf.py", "lineno": 76}}
:::MLL 1581423578.565 eval_start: {"value": null, "metadata": {"epoch_num": 42, "file": "tools/train_mlperf.py", "lineno": 77}}
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
2020-02-11 12:19:39,081 maskrcnn_benchmark.data.build WARNING: When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
Done (t=3.90s)
creating index...
Done (t=3.83s)
creating index...
Done (t=3.92s)
creating index...
Done (t=3.93s)
creating index...
index created!
Done (t=3.91s)
creating index...
Done (t=3.92s)
creating index...
Done (t=3.96s)
creating index...
index created!
Done (t=3.99s)
creating index...
index created!
  0%|                                                  | 0/2532 [00:00<?, ?it/s]index created!
  0%|                                                  | 0/2532 [00:00<?, ?it/s]2020-02-11 12:19:43,423 maskrcnn_benchmark.inference INFO: Start evaluation on coco_2014_val dataset(40504 images).
  0%|                                                  | 0/2532 [00:00<?, ?it/s]index created!
index created!
index created!
index created!
 98%|██████████████████████████████████████▏| 2476/2532 [03:46<00:04, 11.77it/s]
100%|███████████████████████████████████████| 2532/2532 [03:47<00:00, 11.15it/s]
100%|███████████████████████████████████████| 2532/2532 [03:47<00:00, 11.12it/s]
 99%|██████████████████████████████████████▋| 2512/2532 [03:49<00:01, 11.68it/s]
100%|███████████████████████████████████████| 2532/2532 [03:49<00:00, 11.01it/s]
100%|███████████████████████████████████████| 2532/2532 [03:49<00:00, 11.02it/s]
100%|██████████████████████████████████████▉| 2531/2532 [03:51<00:00, 12.77it/s]
100%|███████████████████████████████████████| 2532/2532 [03:52<00:00, 10.88it/s]
2020-02-11 12:23:36,186 maskrcnn_benchmark.inference INFO: Total inference time: 0:03:52.762854 (0.04597330714976766 s / img per device, on 8 devices)
2020-02-11 12:23:37,195 maskrcnn_benchmark.inference INFO: Preparing results for COCO format
2020-02-11 12:23:37,196 maskrcnn_benchmark.inference INFO: Preparing bbox results
2020-02-11 12:23:38,699 maskrcnn_benchmark.inference INFO: Preparing segm results
:::MLL 1581424047.924 block_start: {"value": null, "metadata": {"first_epoch_num": 43, "epoch_count": 1, "file": "tools/train_mlperf.py", "lineno": 134}}
:::MLL 1581424047.926 epoch_start: {"value": null, "metadata": {"epoch_num": 43, "file": "tools/train_mlperf.py", "lineno": 135}}
2020-02-11 12:27:34,831 maskrcnn_benchmark.trainer INFO: eta: 2:31:17  iter: 35960  loss: 0.5534 (0.6993)  loss_classifier: 0.1636 (0.2410)  loss_box_reg: 0.0897 (0.1165)  loss_mask: 0.2268 (0.2633)  loss_objectness: 0.0172 (0.0310)  loss_rpn_box_reg: 0.0354 (0.0474)  time: 0.8440 (1.5029)  data: 0.0030 (0.6635)  lr: 0.001200  max mem: 24032
Evaluating predictions
creating index...
GT annotations already exist!
2020-02-11 12:27:51,866 maskrcnn_benchmark.trainer INFO: eta: 2:30:45  iter: 35980  loss: 0.5707 (0.6992)  loss_classifier: 0.1859 (0.2410)  loss_box_reg: 0.1001 (0.1165)  loss_mask: 0.2310 (0.2633)  loss_objectness: 0.0152 (0.0310)  loss_rpn_box_reg: 0.0337 (0.0474)  time: 0.8463 (1.5025)  data: 0.0030 (0.6632)  lr: 0.001200  max mem: 24032
2020-02-11 12:28:08,808 maskrcnn_benchmark.trainer INFO: eta: 2:30:12  iter: 36000  loss: 0.5432 (0.6991)  loss_classifier: 0.1907 (0.2410)  loss_box_reg: 0.0935 (0.1165)  loss_mask: 0.2300 (0.2633)  loss_objectness: 0.0135 (0.0310)  loss_rpn_box_reg: 0.0293 (0.0474)  time: 0.8495 (1.5022)  data: 0.0028 (0.6628)  lr: 0.001200  max mem: 24032
Loading and preparing results...
resFile is ./inference/coco_2014_val/bbox.json
2020-02-11 12:28:25,770 maskrcnn_benchmark.trainer INFO: eta: 2:29:40  iter: 36020  loss: 0.5847 (0.6991)  loss_classifier: 0.1902 (0.2409)  loss_box_reg: 0.0904 (0.1165)  loss_mask: 0.2413 (0.2633)  loss_objectness: 0.0166 (0.0310)  loss_rpn_box_reg: 0.0344 (0.0474)  time: 0.8494 (1.5018)  data: 0.0028 (0.6624)  lr: 0.001200  max mem: 24032
DONE (t=6.05s)
Running per image evaluation...
Evaluate annotation type *bbox*
2020-02-11 12:28:42,694 maskrcnn_benchmark.trainer INFO: eta: 2:29:08  iter: 36040  loss: 0.5581 (0.6990)  loss_classifier: 0.1787 (0.2409)  loss_box_reg: 0.0920 (0.1164)  loss_mask: 0.2364 (0.2633)  loss_objectness: 0.0162 (0.0310)  loss_rpn_box_reg: 0.0317 (0.0474)  time: 0.8454 (1.5014)  data: 0.0027 (0.6621)  lr: 0.001200  max mem: 24032
DONE (t=24.01s).
Accumulating evaluation results...
DONE (t=0.00s).
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.35847
 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=100 ] = 0.56877
 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=100 ] = 0.38862
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.18601
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.37341
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.46373
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=  1 ] = 0.30175
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets= 10 ] = 0.46895
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.48943
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.29110
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.51415
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.62911
2020-02-11 12:28:59,695 maskrcnn_benchmark.trainer INFO: eta: 2:28:36  iter: 36060  loss: 0.4805 (0.6989)  loss_classifier: 0.1484 (0.2409)  loss_box_reg: 0.0715 (0.1164)  loss_mask: 0.2313 (0.2633)  loss_objectness: 0.0106 (0.0310)  loss_rpn_box_reg: 0.0230 (0.0474)  time: 0.8499 (1.5011)  data: 0.0028 (0.6617)  lr: 0.001200  max mem: 24032
2020-02-11 12:29:16,580 maskrcnn_benchmark.trainer INFO: eta: 2:28:04  iter: 36080  loss: 0.5814 (0.6988)  loss_classifier: 0.1767 (0.2408)  loss_box_reg: 0.1136 (0.1164)  loss_mask: 0.2445 (0.2632)  loss_objectness: 0.0163 (0.0310)  loss_rpn_box_reg: 0.0312 (0.0474)  time: 0.8433 (1.5007)  data: 0.0030 (0.6613)  lr: 0.001200  max mem: 24032
2020-02-11 12:29:33,477 maskrcnn_benchmark.trainer INFO: eta: 2:27:32  iter: 36100  loss: 0.5714 (0.6988)  loss_classifier: 0.1899 (0.2408)  loss_box_reg: 0.0920 (0.1164)  loss_mask: 0.2245 (0.2632)  loss_objectness: 0.0143 (0.0310)  loss_rpn_box_reg: 0.0350 (0.0474)  time: 0.8468 (1.5003)  data: 0.0030 (0.6610)  lr: 0.001200  max mem: 24032
Loading and preparing results...
resFile is ./inference/coco_2014_val/segm.json
2020-02-11 12:29:50,437 maskrcnn_benchmark.trainer INFO: eta: 2:26:59  iter: 36120  loss: 0.5508 (0.6987)  loss_classifier: 0.1755 (0.2408)  loss_box_reg: 0.0960 (0.1164)  loss_mask: 0.2384 (0.2632)  loss_objectness: 0.0162 (0.0310)  loss_rpn_box_reg: 0.0324 (0.0473)  time: 0.8504 (1.5000)  data: 0.0028 (0.6606)  lr: 0.001200  max mem: 24032
DONE (t=14.34s)
Running per image evaluation...
Evaluate annotation type *segm*
2020-02-11 12:30:07,344 maskrcnn_benchmark.trainer INFO: eta: 2:26:27  iter: 36140  loss: 0.6250 (0.6987)  loss_classifier: 0.2083 (0.2408)  loss_box_reg: 0.1021 (0.1164)  loss_mask: 0.2442 (0.2632)  loss_objectness: 0.0201 (0.0310)  loss_rpn_box_reg: 0.0417 (0.0473)  time: 0.8457 (1.4996)  data: 0.0030 (0.6602)  lr: 0.001200  max mem: 24032
DONE (t=31.17s).
Accumulating evaluation results...
DONE (t=0.00s).
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.32450
 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=100 ] = 0.53701
 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=100 ] = 0.34258
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.13264
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.33642
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.47861
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=  1 ] = 0.28349
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets= 10 ] = 0.42962
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.44653
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.24739
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.47433
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.60062
2020-02-11 12:30:24,274 maskrcnn_benchmark.trainer INFO: eta: 2:25:55  iter: 36160  loss: 0.5377 (0.6986)  loss_classifier: 0.1588 (0.2407)  loss_box_reg: 0.0868 (0.1164)  loss_mask: 0.2240 (0.2632)  loss_objectness: 0.0128 (0.0309)  loss_rpn_box_reg: 0.0265 (0.0473)  time: 0.8444 (1.4993)  data: 0.0028 (0.6599)  lr: 0.001200  max mem: 24032
2020-02-11 12:30:28,375 maskrcnn_benchmark.trainer INFO: bbox mAP: 0.35846543476855774, segm mAP: 0.3244953511670983
:::MLL 1581424228.377 eval_accuracy: {"value": {"accuracy": {"BBOX": 0.35846543476855774, "SEGM": 0.3244953511670983}}, "metadata": {"epoch_num": 42, "file": "tools/train_mlperf.py", "lineno": 99}}
:::MLL 1581424228.377 eval_stop: {"value": null, "metadata": {"epoch_num": 42, "file": "tools/train_mlperf.py", "lineno": 100}}
2020-02-11 12:30:43,575 maskrcnn_benchmark.trainer INFO: eta: 2:25:23  iter: 36180  loss: 0.5501 (0.6985)  loss_classifier: 0.1895 (0.2407)  loss_box_reg: 0.0985 (0.1164)  loss_mask: 0.2331 (0.2632)  loss_objectness: 0.0160 (0.0309)  loss_rpn_box_reg: 0.0337 (0.0473)  time: 0.8404 (1.4990)  data: 0.0029 (0.6595)  lr: 0.001200  max mem: 24032
2020-02-11 12:31:00,497 maskrcnn_benchmark.trainer INFO: eta: 2:24:51  iter: 36200  loss: 0.6256 (0.6984)  loss_classifier: 0.1966 (0.2407)  loss_box_reg: 0.1020 (0.1164)  loss_mask: 0.2321 (0.2632)  loss_objectness: 0.0168 (0.0309)  loss_rpn_box_reg: 0.0370 (0.0473)  time: 0.8447 (1.4986)  data: 0.0029 (0.6591)  lr: 0.001200  max mem: 24032
2020-02-11 12:31:17,255 maskrcnn_benchmark.trainer INFO: eta: 2:24:19  iter: 36220  loss: 0.6095 (0.6984)  loss_classifier: 0.1922 (0.2406)  loss_box_reg: 0.1034 (0.1164)  loss_mask: 0.2403 (0.2631)  loss_objectness: 0.0161 (0.0309)  loss_rpn_box_reg: 0.0383 (0.0473)  time: 0.8361 (1.4982)  data: 0.0030 (0.6588)  lr: 0.001200  max mem: 24032
2020-02-11 12:31:34,144 maskrcnn_benchmark.trainer INFO: eta: 2:23:47  iter: 36240  loss: 0.6063 (0.6983)  loss_classifier: 0.2066 (0.2406)  loss_box_reg: 0.1078 (0.1163)  loss_mask: 0.2507 (0.2631)  loss_objectness: 0.0183 (0.0309)  loss_rpn_box_reg: 0.0376 (0.0473)  time: 0.8449 (1.4979)  data: 0.0028 (0.6584)  lr: 0.001200  max mem: 24032
2020-02-11 12:31:51,107 maskrcnn_benchmark.trainer INFO: eta: 2:23:15  iter: 36260  loss: 0.5361 (0.6983)  loss_classifier: 0.1785 (0.2406)  loss_box_reg: 0.0914 (0.1163)  loss_mask: 0.2316 (0.2631)  loss_objectness: 0.0169 (0.0309)  loss_rpn_box_reg: 0.0254 (0.0473)  time: 0.8476 (1.4975)  data: 0.0030 (0.6581)  lr: 0.001200  max mem: 24032
2020-02-11 12:32:08,030 maskrcnn_benchmark.trainer INFO: eta: 2:22:43  iter: 36280  loss: 0.5257 (0.6982)  loss_classifier: 0.1603 (0.2405)  loss_box_reg: 0.0757 (0.1163)  loss_mask: 0.2349 (0.2631)  loss_objectness: 0.0175 (0.0309)  loss_rpn_box_reg: 0.0307 (0.0473)  time: 0.8428 (1.4972)  data: 0.0030 (0.6577)  lr: 0.001200  max mem: 24032
2020-02-11 12:32:25,015 maskrcnn_benchmark.trainer INFO: eta: 2:22:11  iter: 36300  loss: 0.5760 (0.6981)  loss_classifier: 0.1828 (0.2405)  loss_box_reg: 0.1041 (0.1163)  loss_mask: 0.2385 (0.2631)  loss_objectness: 0.0180 (0.0309)  loss_rpn_box_reg: 0.0348 (0.0473)  time: 0.8454 (1.4968)  data: 0.0031 (0.6573)  lr: 0.001200  max mem: 24032
2020-02-11 12:32:42,062 maskrcnn_benchmark.trainer INFO: eta: 2:21:39  iter: 36320  loss: 0.5587 (0.6980)  loss_classifier: 0.1768 (0.2405)  loss_box_reg: 0.0893 (0.1163)  loss_mask: 0.2312 (0.2631)  loss_objectness: 0.0137 (0.0309)  loss_rpn_box_reg: 0.0376 (0.0473)  time: 0.8534 (1.4964)  data: 0.0029 (0.6570)  lr: 0.001200  max mem: 24032
2020-02-11 12:32:59,009 maskrcnn_benchmark.trainer INFO: eta: 2:21:07  iter: 36340  loss: 0.5575 (0.6980)  loss_classifier: 0.1966 (0.2405)  loss_box_reg: 0.0882 (0.1163)  loss_mask: 0.2341 (0.2631)  loss_objectness: 0.0136 (0.0309)  loss_rpn_box_reg: 0.0234 (0.0473)  time: 0.8427 (1.4961)  data: 0.0030 (0.6566)  lr: 0.001200  max mem: 24032
2020-02-11 12:33:15,832 maskrcnn_benchmark.trainer INFO: eta: 2:20:35  iter: 36360  loss: 0.5305 (0.6979)  loss_classifier: 0.1664 (0.2404)  loss_box_reg: 0.0851 (0.1163)  loss_mask: 0.2339 (0.2630)  loss_objectness: 0.0126 (0.0309)  loss_rpn_box_reg: 0.0231 (0.0473)  time: 0.8439 (1.4957)  data: 0.0030 (0.6563)  lr: 0.001200  max mem: 24032
2020-02-11 12:33:32,674 maskrcnn_benchmark.trainer INFO: eta: 2:20:03  iter: 36380  loss: 0.5933 (0.6978)  loss_classifier: 0.1833 (0.2404)  loss_box_reg: 0.0958 (0.1163)  loss_mask: 0.2343 (0.2630)  loss_objectness: 0.0159 (0.0309)  loss_rpn_box_reg: 0.0409 (0.0473)  time: 0.8395 (1.4954)  data: 0.0030 (0.6559)  lr: 0.001200  max mem: 24032
2020-02-11 12:33:49,520 maskrcnn_benchmark.trainer INFO: eta: 2:19:32  iter: 36400  loss: 0.5707 (0.6978)  loss_classifier: 0.1949 (0.2404)  loss_box_reg: 0.0935 (0.1163)  loss_mask: 0.2351 (0.2630)  loss_objectness: 0.0172 (0.0309)  loss_rpn_box_reg: 0.0302 (0.0473)  time: 0.8458 (1.4950)  data: 0.0031 (0.6555)  lr: 0.001200  max mem: 24032
2020-02-11 12:34:06,278 maskrcnn_benchmark.trainer INFO: eta: 2:19:00  iter: 36420  loss: 0.5349 (0.6977)  loss_classifier: 0.1620 (0.2403)  loss_box_reg: 0.0781 (0.1162)  loss_mask: 0.2374 (0.2630)  loss_objectness: 0.0143 (0.0308)  loss_rpn_box_reg: 0.0341 (0.0473)  time: 0.8326 (1.4947)  data: 0.0029 (0.6552)  lr: 0.001200  max mem: 24032
2020-02-11 12:34:23,225 maskrcnn_benchmark.trainer INFO: eta: 2:18:28  iter: 36440  loss: 0.5893 (0.6976)  loss_classifier: 0.1921 (0.2403)  loss_box_reg: 0.1090 (0.1162)  loss_mask: 0.2381 (0.2630)  loss_objectness: 0.0176 (0.0308)  loss_rpn_box_reg: 0.0377 (0.0473)  time: 0.8435 (1.4943)  data: 0.0030 (0.6548)  lr: 0.001200  max mem: 24032
2020-02-11 12:34:40,154 maskrcnn_benchmark.trainer INFO: eta: 2:17:56  iter: 36460  loss: 0.5887 (0.6976)  loss_classifier: 0.1835 (0.2403)  loss_box_reg: 0.1005 (0.1162)  loss_mask: 0.2417 (0.2630)  loss_objectness: 0.0148 (0.0308)  loss_rpn_box_reg: 0.0361 (0.0473)  time: 0.8481 (1.4939)  data: 0.0030 (0.6545)  lr: 0.001200  max mem: 24032
2020-02-11 12:34:57,129 maskrcnn_benchmark.trainer INFO: eta: 2:17:24  iter: 36480  loss: 0.5795 (0.6975)  loss_classifier: 0.1718 (0.2402)  loss_box_reg: 0.0979 (0.1162)  loss_mask: 0.2301 (0.2630)  loss_objectness: 0.0165 (0.0308)  loss_rpn_box_reg: 0.0317 (0.0473)  time: 0.8469 (1.4936)  data: 0.0030 (0.6541)  lr: 0.001200  max mem: 24032
2020-02-11 12:35:14,086 maskrcnn_benchmark.trainer INFO: eta: 2:16:52  iter: 36500  loss: 0.6534 (0.6975)  loss_classifier: 0.2235 (0.2402)  loss_box_reg: 0.1104 (0.1162)  loss_mask: 0.2409 (0.2630)  loss_objectness: 0.0192 (0.0308)  loss_rpn_box_reg: 0.0442 (0.0473)  time: 0.8494 (1.4932)  data: 0.0032 (0.6538)  lr: 0.001200  max mem: 24032
2020-02-11 12:35:31,052 maskrcnn_benchmark.trainer INFO: eta: 2:16:20  iter: 36520  loss: 0.5482 (0.6974)  loss_classifier: 0.1964 (0.2402)  loss_box_reg: 0.1012 (0.1162)  loss_mask: 0.2396 (0.2629)  loss_objectness: 0.0163 (0.0308)  loss_rpn_box_reg: 0.0292 (0.0472)  time: 0.8492 (1.4929)  data: 0.0030 (0.6534)  lr: 0.001200  max mem: 24032
2020-02-11 12:35:47,985 maskrcnn_benchmark.trainer INFO: eta: 2:15:49  iter: 36540  loss: 0.6037 (0.6974)  loss_classifier: 0.2033 (0.2402)  loss_box_reg: 0.0937 (0.1162)  loss_mask: 0.2489 (0.2629)  loss_objectness: 0.0163 (0.0308)  loss_rpn_box_reg: 0.0330 (0.0472)  time: 0.8456 (1.4925)  data: 0.0030 (0.6530)  lr: 0.001200  max mem: 24032
2020-02-11 12:36:04,953 maskrcnn_benchmark.trainer INFO: eta: 2:15:17  iter: 36560  loss: 0.5722 (0.6973)  loss_classifier: 0.1771 (0.2402)  loss_box_reg: 0.0990 (0.1162)  loss_mask: 0.2309 (0.2629)  loss_objectness: 0.0172 (0.0308)  loss_rpn_box_reg: 0.0379 (0.0472)  time: 0.8521 (1.4922)  data: 0.0029 (0.6527)  lr: 0.001200  max mem: 24032
2020-02-11 12:36:21,981 maskrcnn_benchmark.trainer INFO: eta: 2:14:45  iter: 36580  loss: 0.6128 (0.6972)  loss_classifier: 0.1957 (0.2401)  loss_box_reg: 0.1048 (0.1162)  loss_mask: 0.2546 (0.2629)  loss_objectness: 0.0177 (0.0308)  loss_rpn_box_reg: 0.0330 (0.0472)  time: 0.8542 (1.4918)  data: 0.0031 (0.6523)  lr: 0.001200  max mem: 24032
2020-02-11 12:36:38,902 maskrcnn_benchmark.trainer INFO: eta: 2:14:13  iter: 36600  loss: 0.6462 (0.6972)  loss_classifier: 0.2112 (0.2401)  loss_box_reg: 0.1086 (0.1162)  loss_mask: 0.2418 (0.2629)  loss_objectness: 0.0183 (0.0308)  loss_rpn_box_reg: 0.0348 (0.0472)  time: 0.8489 (1.4915)  data: 0.0032 (0.6520)  lr: 0.001200  max mem: 24032
2020-02-11 12:36:55,826 maskrcnn_benchmark.trainer INFO: eta: 2:13:42  iter: 36620  loss: 0.6025 (0.6971)  loss_classifier: 0.1857 (0.2401)  loss_box_reg: 0.0977 (0.1162)  loss_mask: 0.2396 (0.2629)  loss_objectness: 0.0168 (0.0308)  loss_rpn_box_reg: 0.0398 (0.0472)  time: 0.8464 (1.4911)  data: 0.0030 (0.6516)  lr: 0.001200  max mem: 24032
2020-02-11 12:37:12,716 maskrcnn_benchmark.trainer INFO: eta: 2:13:10  iter: 36640  loss: 0.6613 (0.6971)  loss_classifier: 0.2183 (0.2401)  loss_box_reg: 0.1092 (0.1162)  loss_mask: 0.2427 (0.2629)  loss_objectness: 0.0202 (0.0308)  loss_rpn_box_reg: 0.0365 (0.0472)  time: 0.8486 (1.4908)  data: 0.0031 (0.6513)  lr: 0.001200  max mem: 24032
2020-02-11 12:37:29,679 maskrcnn_benchmark.trainer INFO: eta: 2:12:38  iter: 36660  loss: 0.5060 (0.6970)  loss_classifier: 0.1598 (0.2400)  loss_box_reg: 0.0848 (0.1161)  loss_mask: 0.2207 (0.2629)  loss_objectness: 0.0151 (0.0308)  loss_rpn_box_reg: 0.0194 (0.0472)  time: 0.8436 (1.4904)  data: 0.0030 (0.6509)  lr: 0.001200  max mem: 24032
2020-02-11 12:37:46,697 maskrcnn_benchmark.trainer INFO: eta: 2:12:07  iter: 36680  loss: 0.5932 (0.6970)  loss_classifier: 0.1919 (0.2400)  loss_box_reg: 0.1004 (0.1161)  loss_mask: 0.2401 (0.2629)  loss_objectness: 0.0167 (0.0308)  loss_rpn_box_reg: 0.0328 (0.0472)  time: 0.8487 (1.4901)  data: 0.0030 (0.6506)  lr: 0.001200  max mem: 24032
2020-02-11 12:38:03,588 maskrcnn_benchmark.trainer INFO: eta: 2:11:35  iter: 36700  loss: 0.5981 (0.6969)  loss_classifier: 0.1805 (0.2400)  loss_box_reg: 0.0864 (0.1161)  loss_mask: 0.2489 (0.2628)  loss_objectness: 0.0215 (0.0308)  loss_rpn_box_reg: 0.0321 (0.0472)  time: 0.8457 (1.4897)  data: 0.0029 (0.6502)  lr: 0.001200  max mem: 24032
2020-02-11 12:38:20,464 maskrcnn_benchmark.trainer INFO: eta: 2:11:03  iter: 36720  loss: 0.5754 (0.6968)  loss_classifier: 0.1886 (0.2400)  loss_box_reg: 0.0901 (0.1161)  loss_mask: 0.2339 (0.2628)  loss_objectness: 0.0172 (0.0307)  loss_rpn_box_reg: 0.0268 (0.0472)  time: 0.8422 (1.4894)  data: 0.0030 (0.6499)  lr: 0.001200  max mem: 24032
2020-02-11 12:38:37,328 maskrcnn_benchmark.trainer INFO: eta: 2:10:32  iter: 36740  loss: 0.5922 (0.6968)  loss_classifier: 0.1934 (0.2399)  loss_box_reg: 0.0973 (0.1161)  loss_mask: 0.2532 (0.2628)  loss_objectness: 0.0187 (0.0307)  loss_rpn_box_reg: 0.0365 (0.0472)  time: 0.8467 (1.4890)  data: 0.0031 (0.6495)  lr: 0.001200  max mem: 24032
2020-02-11 12:38:54,262 maskrcnn_benchmark.trainer INFO: eta: 2:10:00  iter: 36760  loss: 0.5951 (0.6967)  loss_classifier: 0.1811 (0.2399)  loss_box_reg: 0.0953 (0.1161)  loss_mask: 0.2428 (0.2628)  loss_objectness: 0.0202 (0.0307)  loss_rpn_box_reg: 0.0361 (0.0472)  time: 0.8454 (1.4887)  data: 0.0031 (0.6491)  lr: 0.001200  max mem: 24032
2020-02-11 12:39:11,025 maskrcnn_benchmark.trainer INFO: eta: 2:09:28  iter: 36780  loss: 0.6084 (0.6967)  loss_classifier: 0.1985 (0.2399)  loss_box_reg: 0.1006 (0.1161)  loss_mask: 0.2452 (0.2628)  loss_objectness: 0.0163 (0.0307)  loss_rpn_box_reg: 0.0311 (0.0472)  time: 0.8375 (1.4883)  data: 0.0031 (0.6488)  lr: 0.001200  max mem: 24032
2020-02-11 12:39:28,056 maskrcnn_benchmark.trainer INFO: eta: 2:08:57  iter: 36800  loss: 0.5838 (0.6966)  loss_classifier: 0.1887 (0.2398)  loss_box_reg: 0.1063 (0.1161)  loss_mask: 0.2380 (0.2628)  loss_objectness: 0.0175 (0.0307)  loss_rpn_box_reg: 0.0363 (0.0472)  time: 0.8531 (1.4880)  data: 0.0031 (0.6484)  lr: 0.001200  max mem: 24032
:::MLL 1581424774.516 epoch_stop: {"value": null, "metadata": {"epoch_num": 43, "file": "tools/train_mlperf.py", "lineno": 75}}
:::MLL 1581424774.517 block_stop: {"value": null, "metadata": {"first_epoch_num": 43, "file": "tools/train_mlperf.py", "lineno": 76}}
:::MLL 1581424774.517 eval_start: {"value": null, "metadata": {"epoch_num": 43, "file": "tools/train_mlperf.py", "lineno": 77}}
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
2020-02-11 12:39:35,298 maskrcnn_benchmark.data.build WARNING: When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
Done (t=3.93s)
creating index...
Done (t=3.86s)
creating index...
Done (t=3.87s)
creating index...
Done (t=3.91s)
creating index...
Done (t=3.86s)
creating index...
Done (t=3.90s)
creating index...
Done (t=4.01s)
creating index...
Done (t=3.91s)
creating index...
index created!
index created!
index created!
index created!
index created!
index created!
  0%|                                                  | 0/2532 [00:00<?, ?it/s]index created!
index created!
  0%|                                                  | 0/2532 [00:00<?, ?it/s]2020-02-11 12:39:39,640 maskrcnn_benchmark.inference INFO: Start evaluation on coco_2014_val dataset(40504 images).
 97%|█████████████████████████████████████▋ | 2450/2532 [03:44<00:07, 10.75it/s]
100%|███████████████████████████████████████| 2532/2532 [03:46<00:00, 11.17it/s]
100%|███████████████████████████████████████| 2532/2532 [03:48<00:00, 11.10it/s]
100%|███████████████████████████████████████| 2532/2532 [03:49<00:00, 11.02it/s]
100%|███████████████████████████████████████| 2532/2532 [03:49<00:00, 11.02it/s]
100%|███████████████████████████████████████| 2532/2532 [03:50<00:00, 10.96it/s]
100%|██████████████████████████████████████▉| 2528/2532 [03:51<00:00, 12.55it/s]
100%|███████████████████████████████████████| 2532/2532 [03:51<00:00, 13.43it/s]
2020-02-11 12:43:33,237 maskrcnn_benchmark.inference INFO: Total inference time: 0:03:53.597180 (0.046138096015820175 s / img per device, on 8 devices)
2020-02-11 12:43:34,242 maskrcnn_benchmark.inference INFO: Preparing results for COCO format
2020-02-11 12:43:34,242 maskrcnn_benchmark.inference INFO: Preparing bbox results
2020-02-11 12:43:35,753 maskrcnn_benchmark.inference INFO: Preparing segm results
:::MLL 1581425245.210 block_start: {"value": null, "metadata": {"first_epoch_num": 44, "epoch_count": 1, "file": "tools/train_mlperf.py", "lineno": 134}}
:::MLL 1581425245.212 epoch_start: {"value": null, "metadata": {"epoch_num": 44, "file": "tools/train_mlperf.py", "lineno": 135}}
Evaluating predictions
creating index...
GT annotations already exist!
2020-02-11 12:47:35,636 maskrcnn_benchmark.trainer INFO: eta: 2:09:32  iter: 36820  loss: 0.5886 (0.6965)  loss_classifier: 0.1858 (0.2398)  loss_box_reg: 0.0896 (0.1161)  loss_mask: 0.2448 (0.2628)  loss_objectness: 0.0144 (0.0307)  loss_rpn_box_reg: 0.0369 (0.0472)  time: 0.8368 (1.5004)  data: 0.0030 (0.6609)  lr: 0.001200  max mem: 24032
2020-02-11 12:47:52,479 maskrcnn_benchmark.trainer INFO: eta: 2:09:00  iter: 36840  loss: 0.6226 (0.6965)  loss_classifier: 0.1913 (0.2398)  loss_box_reg: 0.1019 (0.1161)  loss_mask: 0.2453 (0.2628)  loss_objectness: 0.0190 (0.0307)  loss_rpn_box_reg: 0.0376 (0.0472)  time: 0.8435 (1.5000)  data: 0.0028 (0.6605)  lr: 0.001200  max mem: 24032
2020-02-11 12:48:09,341 maskrcnn_benchmark.trainer INFO: eta: 2:08:28  iter: 36860  loss: 0.5737 (0.6964)  loss_classifier: 0.1816 (0.2398)  loss_box_reg: 0.0928 (0.1160)  loss_mask: 0.2538 (0.2628)  loss_objectness: 0.0136 (0.0307)  loss_rpn_box_reg: 0.0472 (0.0472)  time: 0.8436 (1.4997)  data: 0.0028 (0.6602)  lr: 0.001200  max mem: 24032
Loading and preparing results...
resFile is ./inference/coco_2014_val/bbox.json
DONE (t=6.10s)
Running per image evaluation...
Evaluate annotation type *bbox*
2020-02-11 12:48:26,161 maskrcnn_benchmark.trainer INFO: eta: 2:07:56  iter: 36880  loss: 0.5909 (0.6964)  loss_classifier: 0.2076 (0.2397)  loss_box_reg: 0.0981 (0.1160)  loss_mask: 0.2327 (0.2627)  loss_objectness: 0.0177 (0.0307)  loss_rpn_box_reg: 0.0382 (0.0472)  time: 0.8420 (1.4993)  data: 0.0030 (0.6598)  lr: 0.001200  max mem: 24032
2020-02-11 12:48:43,100 maskrcnn_benchmark.trainer INFO: eta: 2:07:24  iter: 36900  loss: 0.5049 (0.6963)  loss_classifier: 0.1538 (0.2397)  loss_box_reg: 0.0832 (0.1160)  loss_mask: 0.2271 (0.2627)  loss_objectness: 0.0146 (0.0307)  loss_rpn_box_reg: 0.0287 (0.0472)  time: 0.8448 (1.4990)  data: 0.0029 (0.6595)  lr: 0.001200  max mem: 24032
DONE (t=24.23s).
Accumulating evaluation results...
DONE (t=0.00s).
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.35798
 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=100 ] = 0.56819
 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=100 ] = 0.38821
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.18541
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.37268
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.46346
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=  1 ] = 0.30133
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets= 10 ] = 0.46842
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.48902
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.29112
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.51318
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.62741
2020-02-11 12:49:00,129 maskrcnn_benchmark.trainer INFO: eta: 2:06:52  iter: 36920  loss: 0.5296 (0.6962)  loss_classifier: 0.1682 (0.2397)  loss_box_reg: 0.0805 (0.1160)  loss_mask: 0.2314 (0.2627)  loss_objectness: 0.0136 (0.0307)  loss_rpn_box_reg: 0.0274 (0.0472)  time: 0.8460 (1.4986)  data: 0.0028 (0.6591)  lr: 0.001200  max mem: 24032
2020-02-11 12:49:17,086 maskrcnn_benchmark.trainer INFO: eta: 2:06:21  iter: 36940  loss: 0.5964 (0.6962)  loss_classifier: 0.2050 (0.2396)  loss_box_reg: 0.1104 (0.1160)  loss_mask: 0.2439 (0.2627)  loss_objectness: 0.0203 (0.0307)  loss_rpn_box_reg: 0.0333 (0.0472)  time: 0.8462 (1.4983)  data: 0.0031 (0.6587)  lr: 0.001200  max mem: 24032
2020-02-11 12:49:33,990 maskrcnn_benchmark.trainer INFO: eta: 2:05:49  iter: 36960  loss: 0.5426 (0.6961)  loss_classifier: 0.1759 (0.2396)  loss_box_reg: 0.0820 (0.1160)  loss_mask: 0.2262 (0.2627)  loss_objectness: 0.0126 (0.0307)  loss_rpn_box_reg: 0.0317 (0.0472)  time: 0.8403 (1.4979)  data: 0.0028 (0.6584)  lr: 0.001200  max mem: 24032
Loading and preparing results...
resFile is ./inference/coco_2014_val/segm.json
DONE (t=14.10s)
Running per image evaluation...
Evaluate annotation type *segm*
2020-02-11 12:49:50,830 maskrcnn_benchmark.trainer INFO: eta: 2:05:17  iter: 36980  loss: 0.5795 (0.6960)  loss_classifier: 0.1973 (0.2396)  loss_box_reg: 0.0984 (0.1160)  loss_mask: 0.2450 (0.2627)  loss_objectness: 0.0153 (0.0307)  loss_rpn_box_reg: 0.0375 (0.0471)  time: 0.8385 (1.4976)  data: 0.0029 (0.6580)  lr: 0.001200  max mem: 24032
2020-02-11 12:50:07,803 maskrcnn_benchmark.trainer INFO: eta: 2:04:46  iter: 37000  loss: 0.6103 (0.6960)  loss_classifier: 0.1785 (0.2396)  loss_box_reg: 0.0971 (0.1160)  loss_mask: 0.2424 (0.2627)  loss_objectness: 0.0181 (0.0307)  loss_rpn_box_reg: 0.0364 (0.0471)  time: 0.8479 (1.4972)  data: 0.0029 (0.6577)  lr: 0.001200  max mem: 24032
DONE (t=30.81s).
Accumulating evaluation results...
DONE (t=0.00s).
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.32433
 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=100 ] = 0.53686
 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=100 ] = 0.34221
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.13266
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.33609
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.47842
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=  1 ] = 0.28347
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets= 10 ] = 0.42954
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.44647
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.24755
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.47349
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.60089
2020-02-11 12:50:23,669 maskrcnn_benchmark.trainer INFO: bbox mAP: 0.35797988167842687, segm mAP: 0.3243313729530803
:::MLL 1581425423.684 eval_accuracy: {"value": {"accuracy": {"BBOX": 0.35797988167842687, "SEGM": 0.3243313729530803}}, "metadata": {"epoch_num": 43, "file": "tools/train_mlperf.py", "lineno": 99}}
:::MLL 1581425423.684 eval_stop: {"value": null, "metadata": {"epoch_num": 43, "file": "tools/train_mlperf.py", "lineno": 100}}
2020-02-11 12:50:27,074 maskrcnn_benchmark.trainer INFO: eta: 2:04:14  iter: 37020  loss: 0.6042 (0.6959)  loss_classifier: 0.2032 (0.2395)  loss_box_reg: 0.1082 (0.1160)  loss_mask: 0.2419 (0.2627)  loss_objectness: 0.0165 (0.0306)  loss_rpn_box_reg: 0.0375 (0.0471)  time: 0.8472 (1.4969)  data: 0.0030 (0.6573)  lr: 0.001200  max mem: 24032
2020-02-11 12:50:44,014 maskrcnn_benchmark.trainer INFO: eta: 2:03:42  iter: 37040  loss: 0.5843 (0.6959)  loss_classifier: 0.1818 (0.2395)  loss_box_reg: 0.0930 (0.1160)  loss_mask: 0.2520 (0.2626)  loss_objectness: 0.0159 (0.0306)  loss_rpn_box_reg: 0.0318 (0.0471)  time: 0.8403 (1.4966)  data: 0.0029 (0.6570)  lr: 0.001200  max mem: 24032
2020-02-11 12:51:00,998 maskrcnn_benchmark.trainer INFO: eta: 2:03:11  iter: 37060  loss: 0.5549 (0.6958)  loss_classifier: 0.1768 (0.2395)  loss_box_reg: 0.0968 (0.1159)  loss_mask: 0.2360 (0.2626)  loss_objectness: 0.0158 (0.0306)  loss_rpn_box_reg: 0.0313 (0.0471)  time: 0.8515 (1.4962)  data: 0.0030 (0.6566)  lr: 0.001200  max mem: 24032
2020-02-11 12:51:17,920 maskrcnn_benchmark.trainer INFO: eta: 2:02:39  iter: 37080  loss: 0.6147 (0.6958)  loss_classifier: 0.1928 (0.2395)  loss_box_reg: 0.0943 (0.1159)  loss_mask: 0.2383 (0.2626)  loss_objectness: 0.0176 (0.0306)  loss_rpn_box_reg: 0.0321 (0.0471)  time: 0.8443 (1.4959)  data: 0.0029 (0.6563)  lr: 0.001200  max mem: 24032
2020-02-11 12:51:34,972 maskrcnn_benchmark.trainer INFO: eta: 2:02:08  iter: 37100  loss: 0.5910 (0.6957)  loss_classifier: 0.2041 (0.2394)  loss_box_reg: 0.0964 (0.1159)  loss_mask: 0.2437 (0.2626)  loss_objectness: 0.0201 (0.0306)  loss_rpn_box_reg: 0.0274 (0.0471)  time: 0.8545 (1.4955)  data: 0.0030 (0.6559)  lr: 0.001200  max mem: 24032
2020-02-11 12:51:52,092 maskrcnn_benchmark.trainer INFO: eta: 2:01:36  iter: 37120  loss: 0.6357 (0.6957)  loss_classifier: 0.2249 (0.2394)  loss_box_reg: 0.1149 (0.1159)  loss_mask: 0.2503 (0.2626)  loss_objectness: 0.0170 (0.0306)  loss_rpn_box_reg: 0.0371 (0.0471)  time: 0.8523 (1.4952)  data: 0.0032 (0.6556)  lr: 0.001200  max mem: 24032
2020-02-11 12:52:08,824 maskrcnn_benchmark.trainer INFO: eta: 2:01:04  iter: 37140  loss: 0.5364 (0.6956)  loss_classifier: 0.1815 (0.2394)  loss_box_reg: 0.0887 (0.1159)  loss_mask: 0.2343 (0.2626)  loss_objectness: 0.0143 (0.0306)  loss_rpn_box_reg: 0.0304 (0.0471)  time: 0.8402 (1.4948)  data: 0.0031 (0.6552)  lr: 0.001200  max mem: 24032
2020-02-11 12:52:25,800 maskrcnn_benchmark.trainer INFO: eta: 2:00:33  iter: 37160  loss: 0.5648 (0.6955)  loss_classifier: 0.1964 (0.2394)  loss_box_reg: 0.1022 (0.1159)  loss_mask: 0.2329 (0.2626)  loss_objectness: 0.0163 (0.0306)  loss_rpn_box_reg: 0.0367 (0.0471)  time: 0.8482 (1.4945)  data: 0.0031 (0.6549)  lr: 0.001200  max mem: 24032
2020-02-11 12:52:42,870 maskrcnn_benchmark.trainer INFO: eta: 2:00:01  iter: 37180  loss: 0.5496 (0.6955)  loss_classifier: 0.1826 (0.2393)  loss_box_reg: 0.1013 (0.1159)  loss_mask: 0.2361 (0.2626)  loss_objectness: 0.0163 (0.0306)  loss_rpn_box_reg: 0.0282 (0.0471)  time: 0.8473 (1.4941)  data: 0.0030 (0.6545)  lr: 0.001200  max mem: 24032
2020-02-11 12:52:59,854 maskrcnn_benchmark.trainer INFO: eta: 1:59:30  iter: 37200  loss: 0.6200 (0.6954)  loss_classifier: 0.2106 (0.2393)  loss_box_reg: 0.1104 (0.1159)  loss_mask: 0.2264 (0.2625)  loss_objectness: 0.0149 (0.0306)  loss_rpn_box_reg: 0.0354 (0.0471)  time: 0.8508 (1.4938)  data: 0.0030 (0.6542)  lr: 0.001200  max mem: 24032
2020-02-11 12:53:16,637 maskrcnn_benchmark.trainer INFO: eta: 1:58:58  iter: 37220  loss: 0.6336 (0.6954)  loss_classifier: 0.1884 (0.2393)  loss_box_reg: 0.1114 (0.1159)  loss_mask: 0.2544 (0.2625)  loss_objectness: 0.0191 (0.0306)  loss_rpn_box_reg: 0.0351 (0.0471)  time: 0.8360 (1.4934)  data: 0.0031 (0.6538)  lr: 0.001200  max mem: 24032
2020-02-11 12:53:33,531 maskrcnn_benchmark.trainer INFO: eta: 1:58:27  iter: 37240  loss: 0.5781 (0.6953)  loss_classifier: 0.1890 (0.2393)  loss_box_reg: 0.0953 (0.1159)  loss_mask: 0.2391 (0.2625)  loss_objectness: 0.0134 (0.0306)  loss_rpn_box_reg: 0.0368 (0.0471)  time: 0.8460 (1.4931)  data: 0.0031 (0.6535)  lr: 0.001200  max mem: 24032
2020-02-11 12:53:50,471 maskrcnn_benchmark.trainer INFO: eta: 1:57:55  iter: 37260  loss: 0.6253 (0.6953)  loss_classifier: 0.2008 (0.2392)  loss_box_reg: 0.1035 (0.1159)  loss_mask: 0.2419 (0.2625)  loss_objectness: 0.0206 (0.0306)  loss_rpn_box_reg: 0.0460 (0.0471)  time: 0.8433 (1.4927)  data: 0.0031 (0.6531)  lr: 0.001200  max mem: 24032
2020-02-11 12:54:07,400 maskrcnn_benchmark.trainer INFO: eta: 1:57:24  iter: 37280  loss: 0.6329 (0.6952)  loss_classifier: 0.2025 (0.2392)  loss_box_reg: 0.0973 (0.1159)  loss_mask: 0.2397 (0.2625)  loss_objectness: 0.0188 (0.0306)  loss_rpn_box_reg: 0.0395 (0.0471)  time: 0.8480 (1.4924)  data: 0.0031 (0.6528)  lr: 0.001200  max mem: 24032
2020-02-11 12:54:24,272 maskrcnn_benchmark.trainer INFO: eta: 1:56:52  iter: 37300  loss: 0.5689 (0.6952)  loss_classifier: 0.1775 (0.2392)  loss_box_reg: 0.0946 (0.1159)  loss_mask: 0.2436 (0.2625)  loss_objectness: 0.0169 (0.0306)  loss_rpn_box_reg: 0.0312 (0.0471)  time: 0.8414 (1.4920)  data: 0.0029 (0.6524)  lr: 0.001200  max mem: 24032
2020-02-11 12:54:41,216 maskrcnn_benchmark.trainer INFO: eta: 1:56:21  iter: 37320  loss: 0.5573 (0.6951)  loss_classifier: 0.1901 (0.2392)  loss_box_reg: 0.0939 (0.1158)  loss_mask: 0.2336 (0.2625)  loss_objectness: 0.0159 (0.0305)  loss_rpn_box_reg: 0.0302 (0.0471)  time: 0.8479 (1.4917)  data: 0.0030 (0.6521)  lr: 0.001200  max mem: 24032
2020-02-11 12:54:58,261 maskrcnn_benchmark.trainer INFO: eta: 1:55:49  iter: 37340  loss: 0.5692 (0.6951)  loss_classifier: 0.1783 (0.2391)  loss_box_reg: 0.0938 (0.1158)  loss_mask: 0.2431 (0.2625)  loss_objectness: 0.0164 (0.0305)  loss_rpn_box_reg: 0.0313 (0.0471)  time: 0.8502 (1.4914)  data: 0.0030 (0.6517)  lr: 0.001200  max mem: 24032
2020-02-11 12:55:15,257 maskrcnn_benchmark.trainer INFO: eta: 1:55:18  iter: 37360  loss: 0.5661 (0.6950)  loss_classifier: 0.1881 (0.2391)  loss_box_reg: 0.1039 (0.1158)  loss_mask: 0.2477 (0.2625)  loss_objectness: 0.0159 (0.0305)  loss_rpn_box_reg: 0.0405 (0.0471)  time: 0.8467 (1.4910)  data: 0.0030 (0.6514)  lr: 0.001200  max mem: 24032
2020-02-11 12:55:32,089 maskrcnn_benchmark.trainer INFO: eta: 1:54:46  iter: 37380  loss: 0.6351 (0.6950)  loss_classifier: 0.1956 (0.2391)  loss_box_reg: 0.1103 (0.1158)  loss_mask: 0.2424 (0.2625)  loss_objectness: 0.0180 (0.0305)  loss_rpn_box_reg: 0.0402 (0.0471)  time: 0.8448 (1.4907)  data: 0.0030 (0.6510)  lr: 0.001200  max mem: 24032
2020-02-11 12:55:49,005 maskrcnn_benchmark.trainer INFO: eta: 1:54:15  iter: 37400  loss: 0.5456 (0.6949)  loss_classifier: 0.1787 (0.2391)  loss_box_reg: 0.0927 (0.1158)  loss_mask: 0.2354 (0.2624)  loss_objectness: 0.0137 (0.0305)  loss_rpn_box_reg: 0.0336 (0.0471)  time: 0.8442 (1.4903)  data: 0.0031 (0.6507)  lr: 0.001200  max mem: 24032
2020-02-11 12:56:05,961 maskrcnn_benchmark.trainer INFO: eta: 1:53:44  iter: 37420  loss: 0.5425 (0.6948)  loss_classifier: 0.1739 (0.2391)  loss_box_reg: 0.0898 (0.1158)  loss_mask: 0.2256 (0.2624)  loss_objectness: 0.0140 (0.0305)  loss_rpn_box_reg: 0.0374 (0.0471)  time: 0.8521 (1.4900)  data: 0.0030 (0.6503)  lr: 0.001200  max mem: 24032
2020-02-11 12:56:22,926 maskrcnn_benchmark.trainer INFO: eta: 1:53:12  iter: 37440  loss: 0.6195 (0.6948)  loss_classifier: 0.2128 (0.2390)  loss_box_reg: 0.1114 (0.1158)  loss_mask: 0.2537 (0.2624)  loss_objectness: 0.0204 (0.0305)  loss_rpn_box_reg: 0.0374 (0.0471)  time: 0.8496 (1.4896)  data: 0.0031 (0.6500)  lr: 0.001200  max mem: 24032
2020-02-11 12:56:39,788 maskrcnn_benchmark.trainer INFO: eta: 1:52:41  iter: 37460  loss: 0.5493 (0.6947)  loss_classifier: 0.1792 (0.2390)  loss_box_reg: 0.0927 (0.1158)  loss_mask: 0.2240 (0.2624)  loss_objectness: 0.0169 (0.0305)  loss_rpn_box_reg: 0.0280 (0.0470)  time: 0.8408 (1.4893)  data: 0.0031 (0.6496)  lr: 0.001200  max mem: 24032
2020-02-11 12:56:56,742 maskrcnn_benchmark.trainer INFO: eta: 1:52:10  iter: 37480  loss: 0.6048 (0.6947)  loss_classifier: 0.2042 (0.2390)  loss_box_reg: 0.1048 (0.1158)  loss_mask: 0.2551 (0.2624)  loss_objectness: 0.0167 (0.0305)  loss_rpn_box_reg: 0.0299 (0.0470)  time: 0.8500 (1.4889)  data: 0.0030 (0.6493)  lr: 0.001200  max mem: 24032
2020-02-11 12:57:13,735 maskrcnn_benchmark.trainer INFO: eta: 1:51:38  iter: 37500  loss: 0.6005 (0.6947)  loss_classifier: 0.2109 (0.2390)  loss_box_reg: 0.1003 (0.1158)  loss_mask: 0.2412 (0.2624)  loss_objectness: 0.0173 (0.0305)  loss_rpn_box_reg: 0.0340 (0.0470)  time: 0.8469 (1.4886)  data: 0.0031 (0.6490)  lr: 0.001200  max mem: 24032
2020-02-11 12:57:30,682 maskrcnn_benchmark.trainer INFO: eta: 1:51:07  iter: 37520  loss: 0.5491 (0.6946)  loss_classifier: 0.1901 (0.2389)  loss_box_reg: 0.0887 (0.1158)  loss_mask: 0.2340 (0.2624)  loss_objectness: 0.0179 (0.0305)  loss_rpn_box_reg: 0.0322 (0.0470)  time: 0.8443 (1.4883)  data: 0.0030 (0.6486)  lr: 0.001200  max mem: 24032
2020-02-11 12:57:47,548 maskrcnn_benchmark.trainer INFO: eta: 1:50:36  iter: 37540  loss: 0.5624 (0.6945)  loss_classifier: 0.1881 (0.2389)  loss_box_reg: 0.0920 (0.1158)  loss_mask: 0.2378 (0.2624)  loss_objectness: 0.0163 (0.0305)  loss_rpn_box_reg: 0.0347 (0.0470)  time: 0.8377 (1.4879)  data: 0.0030 (0.6483)  lr: 0.001200  max mem: 24032
2020-02-11 12:58:04,400 maskrcnn_benchmark.trainer INFO: eta: 1:50:04  iter: 37560  loss: 0.5884 (0.6945)  loss_classifier: 0.1947 (0.2389)  loss_box_reg: 0.0961 (0.1158)  loss_mask: 0.2380 (0.2624)  loss_objectness: 0.0185 (0.0305)  loss_rpn_box_reg: 0.0456 (0.0470)  time: 0.8427 (1.4876)  data: 0.0029 (0.6479)  lr: 0.001200  max mem: 24032
2020-02-11 12:58:21,380 maskrcnn_benchmark.trainer INFO: eta: 1:49:33  iter: 37580  loss: 0.5933 (0.6944)  loss_classifier: 0.2051 (0.2389)  loss_box_reg: 0.1057 (0.1157)  loss_mask: 0.2362 (0.2623)  loss_objectness: 0.0170 (0.0305)  loss_rpn_box_reg: 0.0401 (0.0470)  time: 0.8507 (1.4872)  data: 0.0031 (0.6476)  lr: 0.001200  max mem: 24032
2020-02-11 12:58:38,232 maskrcnn_benchmark.trainer INFO: eta: 1:49:02  iter: 37600  loss: 0.5824 (0.6944)  loss_classifier: 0.1919 (0.2388)  loss_box_reg: 0.0942 (0.1157)  loss_mask: 0.2408 (0.2623)  loss_objectness: 0.0164 (0.0305)  loss_rpn_box_reg: 0.0362 (0.0470)  time: 0.8382 (1.4869)  data: 0.0031 (0.6472)  lr: 0.001200  max mem: 24032
2020-02-11 12:58:55,163 maskrcnn_benchmark.trainer INFO: eta: 1:48:31  iter: 37620  loss: 0.5904 (0.6943)  loss_classifier: 0.2128 (0.2388)  loss_box_reg: 0.0894 (0.1157)  loss_mask: 0.2258 (0.2623)  loss_objectness: 0.0183 (0.0304)  loss_rpn_box_reg: 0.0434 (0.0470)  time: 0.8481 (1.4866)  data: 0.0030 (0.6469)  lr: 0.001200  max mem: 24032
2020-02-11 12:59:12,075 maskrcnn_benchmark.trainer INFO: eta: 1:47:59  iter: 37640  loss: 0.5059 (0.6943)  loss_classifier: 0.1544 (0.2388)  loss_box_reg: 0.0778 (0.1157)  loss_mask: 0.2271 (0.2623)  loss_objectness: 0.0148 (0.0304)  loss_rpn_box_reg: 0.0340 (0.0470)  time: 0.8498 (1.4862)  data: 0.0029 (0.6465)  lr: 0.001200  max mem: 24032
2020-02-11 12:59:28,974 maskrcnn_benchmark.trainer INFO: eta: 1:47:28  iter: 37660  loss: 0.5677 (0.6942)  loss_classifier: 0.1829 (0.2388)  loss_box_reg: 0.0879 (0.1157)  loss_mask: 0.2320 (0.2623)  loss_objectness: 0.0161 (0.0304)  loss_rpn_box_reg: 0.0379 (0.0470)  time: 0.8395 (1.4859)  data: 0.0030 (0.6462)  lr: 0.001200  max mem: 24032
:::MLL 1581425971.943 epoch_stop: {"value": null, "metadata": {"epoch_num": 44, "file": "tools/train_mlperf.py", "lineno": 75}}
:::MLL 1581425971.944 block_stop: {"value": null, "metadata": {"first_epoch_num": 44, "file": "tools/train_mlperf.py", "lineno": 76}}
:::MLL 1581425971.945 eval_start: {"value": null, "metadata": {"epoch_num": 44, "file": "tools/train_mlperf.py", "lineno": 77}}
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
2020-02-11 12:59:32,984 maskrcnn_benchmark.data.build WARNING: When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
Done (t=3.96s)
creating index...
Done (t=3.83s)
creating index...
Done (t=3.88s)
creating index...
Done (t=3.89s)
creating index...
Done (t=3.88s)
creating index...
Done (t=4.04s)
creating index...
Done (t=3.89s)
creating index...
index created!
index created!
index created!
Done (t=3.94s)
creating index...
index created!
  0%|                                                  | 0/2532 [00:00<?, ?it/s]index created!
index created!
  0%|                                                  | 0/2532 [00:00<?, ?it/s]index created!
  0%|                                                  | 0/2532 [00:00<?, ?it/s]index created!
  0%|                                                  | 0/2532 [00:00<?, ?it/s]2020-02-11 12:59:37,346 maskrcnn_benchmark.inference INFO: Start evaluation on coco_2014_val dataset(40504 images).
100%|███████████████████████████████████████| 2532/2532 [03:47<00:00, 11.15it/s]
 99%|██████████████████████████████████████▍| 2496/2532 [03:47<00:03, 11.41it/s]
 99%|██████████████████████████████████████▊| 2518/2532 [03:47<00:01, 11.54it/s]
 99%|██████████████████████████████████████▋| 2512/2532 [03:48<00:01, 11.46it/s]
 99%|██████████████████████████████████████▋| 2512/2532 [03:50<00:01, 10.89it/s]
100%|██████████████████████████████████████▉| 2530/2532 [03:51<00:00, 11.90it/s]
100%|███████████████████████████████████████| 2532/2532 [03:53<00:00, 10.86it/s]

2020-02-11 13:03:30,990 maskrcnn_benchmark.inference INFO: Total inference time: 0:03:53.643900 (0.046147323751929904 s / img per device, on 8 devices)
2020-02-11 13:03:32,004 maskrcnn_benchmark.inference INFO: Preparing results for COCO format
2020-02-11 13:03:32,005 maskrcnn_benchmark.inference INFO: Preparing bbox results
2020-02-11 13:03:33,524 maskrcnn_benchmark.inference INFO: Preparing segm results
:::MLL 1581426445.295 block_start: {"value": null, "metadata": {"first_epoch_num": 45, "epoch_count": 1, "file": "tools/train_mlperf.py", "lineno": 134}}
:::MLL 1581426445.297 epoch_start: {"value": null, "metadata": {"epoch_num": 45, "file": "tools/train_mlperf.py", "lineno": 135}}
Evaluating predictions
creating index...
GT annotations already exist!
2020-02-11 13:07:38,993 maskrcnn_benchmark.trainer INFO: eta: 1:47:51  iter: 37680  loss: 0.5736 (0.6941)  loss_classifier: 0.1685 (0.2387)  loss_box_reg: 0.0898 (0.1157)  loss_mask: 0.2393 (0.2623)  loss_objectness: 0.0126 (0.0304)  loss_rpn_box_reg: 0.0298 (0.0470)  time: 0.8467 (1.4981)  data: 0.0030 (0.6584)  lr: 0.001200  max mem: 24032
2020-02-11 13:07:56,008 maskrcnn_benchmark.trainer INFO: eta: 1:47:20  iter: 37700  loss: 0.5963 (0.6941)  loss_classifier: 0.2051 (0.2387)  loss_box_reg: 0.1111 (0.1157)  loss_mask: 0.2520 (0.2623)  loss_objectness: 0.0189 (0.0304)  loss_rpn_box_reg: 0.0399 (0.0470)  time: 0.8492 (1.4977)  data: 0.0029 (0.6581)  lr: 0.001200  max mem: 24032
2020-02-11 13:08:12,877 maskrcnn_benchmark.trainer INFO: eta: 1:46:48  iter: 37720  loss: 0.5651 (0.6940)  loss_classifier: 0.1766 (0.2387)  loss_box_reg: 0.0951 (0.1157)  loss_mask: 0.2405 (0.2623)  loss_objectness: 0.0137 (0.0304)  loss_rpn_box_reg: 0.0336 (0.0470)  time: 0.8413 (1.4974)  data: 0.0029 (0.6577)  lr: 0.001200  max mem: 24032
Loading and preparing results...
resFile is ./inference/coco_2014_val/bbox.json
DONE (t=6.12s)
Running per image evaluation...
Evaluate annotation type *bbox*
2020-02-11 13:08:30,057 maskrcnn_benchmark.trainer INFO: eta: 1:46:17  iter: 37740  loss: 0.6170 (0.6940)  loss_classifier: 0.1955 (0.2387)  loss_box_reg: 0.1023 (0.1157)  loss_mask: 0.2392 (0.2622)  loss_objectness: 0.0204 (0.0304)  loss_rpn_box_reg: 0.0498 (0.0470)  time: 0.8432 (1.4971)  data: 0.0029 (0.6574)  lr: 0.001200  max mem: 24032
2020-02-11 13:08:47,071 maskrcnn_benchmark.trainer INFO: eta: 1:45:46  iter: 37760  loss: 0.5636 (0.6939)  loss_classifier: 0.1643 (0.2386)  loss_box_reg: 0.0949 (0.1157)  loss_mask: 0.2448 (0.2622)  loss_objectness: 0.0183 (0.0304)  loss_rpn_box_reg: 0.0286 (0.0470)  time: 0.8527 (1.4967)  data: 0.0029 (0.6570)  lr: 0.001200  max mem: 24032
DONE (t=23.88s).
Accumulating evaluation results...
DONE (t=0.00s).
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.35798
 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=100 ] = 0.56809
 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=100 ] = 0.38838
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.18572
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.37335
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.46313
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=  1 ] = 0.30133
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets= 10 ] = 0.46843
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.48883
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.28996
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.51445
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.62885
2020-02-11 13:09:03,989 maskrcnn_benchmark.trainer INFO: eta: 1:45:14  iter: 37780  loss: 0.5978 (0.6939)  loss_classifier: 0.1818 (0.2386)  loss_box_reg: 0.0993 (0.1157)  loss_mask: 0.2280 (0.2622)  loss_objectness: 0.0169 (0.0304)  loss_rpn_box_reg: 0.0430 (0.0470)  time: 0.8511 (1.4964)  data: 0.0029 (0.6567)  lr: 0.001200  max mem: 24032
2020-02-11 13:09:20,974 maskrcnn_benchmark.trainer INFO: eta: 1:44:43  iter: 37800  loss: 0.5732 (0.6938)  loss_classifier: 0.1844 (0.2386)  loss_box_reg: 0.0911 (0.1156)  loss_mask: 0.2309 (0.2622)  loss_objectness: 0.0147 (0.0304)  loss_rpn_box_reg: 0.0293 (0.0470)  time: 0.8474 (1.4960)  data: 0.0030 (0.6563)  lr: 0.001200  max mem: 24032
Loading and preparing results...
resFile is ./inference/coco_2014_val/segm.json
2020-02-11 13:09:37,982 maskrcnn_benchmark.trainer INFO: eta: 1:44:11  iter: 37820  loss: 0.6003 (0.6938)  loss_classifier: 0.1909 (0.2386)  loss_box_reg: 0.0932 (0.1156)  loss_mask: 0.2530 (0.2622)  loss_objectness: 0.0191 (0.0304)  loss_rpn_box_reg: 0.0358 (0.0470)  time: 0.8487 (1.4957)  data: 0.0028 (0.6560)  lr: 0.001200  max mem: 24032
DONE (t=14.31s)
Running per image evaluation...
Evaluate annotation type *segm*
2020-02-11 13:09:54,826 maskrcnn_benchmark.trainer INFO: eta: 1:43:40  iter: 37840  loss: 0.5457 (0.6937)  loss_classifier: 0.1710 (0.2385)  loss_box_reg: 0.0897 (0.1156)  loss_mask: 0.2344 (0.2622)  loss_objectness: 0.0138 (0.0304)  loss_rpn_box_reg: 0.0353 (0.0470)  time: 0.8446 (1.4953)  data: 0.0028 (0.6557)  lr: 0.001200  max mem: 24032
2020-02-11 13:10:11,853 maskrcnn_benchmark.trainer INFO: eta: 1:43:09  iter: 37860  loss: 0.6416 (0.6937)  loss_classifier: 0.1964 (0.2385)  loss_box_reg: 0.1110 (0.1156)  loss_mask: 0.2514 (0.2622)  loss_objectness: 0.0168 (0.0304)  loss_rpn_box_reg: 0.0344 (0.0470)  time: 0.8484 (1.4950)  data: 0.0029 (0.6553)  lr: 0.001200  max mem: 24032
DONE (t=31.17s).
Accumulating evaluation results...
DONE (t=0.00s).
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.32410
 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=100 ] = 0.53645
 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=100 ] = 0.34224
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.13243
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.33596
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.47785
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=  1 ] = 0.28320
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets= 10 ] = 0.42934
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.44619
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.24692
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.47449
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.60049
2020-02-11 13:10:25,727 maskrcnn_benchmark.trainer INFO: bbox mAP: 0.35797801819220565, segm mAP: 0.32410136673721707
:::MLL 1581426625.741 eval_accuracy: {"value": {"accuracy": {"BBOX": 0.35797801819220565, "SEGM": 0.32410136673721707}}, "metadata": {"epoch_num": 44, "file": "tools/train_mlperf.py", "lineno": 99}}
:::MLL 1581426625.742 eval_stop: {"value": null, "metadata": {"epoch_num": 44, "file": "tools/train_mlperf.py", "lineno": 100}}
2020-02-11 13:10:30,855 maskrcnn_benchmark.trainer INFO: eta: 1:42:38  iter: 37880  loss: 0.6170 (0.6936)  loss_classifier: 0.2015 (0.2385)  loss_box_reg: 0.1068 (0.1156)  loss_mask: 0.2500 (0.2622)  loss_objectness: 0.0195 (0.0304)  loss_rpn_box_reg: 0.0355 (0.0470)  time: 0.8517 (1.4947)  data: 0.0031 (0.6550)  lr: 0.001200  max mem: 24032
2020-02-11 13:10:47,910 maskrcnn_benchmark.trainer INFO: eta: 1:42:06  iter: 37900  loss: 0.5325 (0.6935)  loss_classifier: 0.1695 (0.2385)  loss_box_reg: 0.0872 (0.1156)  loss_mask: 0.2274 (0.2622)  loss_objectness: 0.0143 (0.0304)  loss_rpn_box_reg: 0.0301 (0.0470)  time: 0.8554 (1.4944)  data: 0.0030 (0.6546)  lr: 0.001200  max mem: 24032
2020-02-11 13:11:04,705 maskrcnn_benchmark.trainer INFO: eta: 1:41:35  iter: 37920  loss: 0.5901 (0.6935)  loss_classifier: 0.1971 (0.2384)  loss_box_reg: 0.0959 (0.1156)  loss_mask: 0.2430 (0.2621)  loss_objectness: 0.0129 (0.0303)  loss_rpn_box_reg: 0.0380 (0.0470)  time: 0.8450 (1.4940)  data: 0.0030 (0.6543)  lr: 0.001200  max mem: 24032
2020-02-11 13:11:21,767 maskrcnn_benchmark.trainer INFO: eta: 1:41:04  iter: 37940  loss: 0.5719 (0.6934)  loss_classifier: 0.1999 (0.2384)  loss_box_reg: 0.0934 (0.1156)  loss_mask: 0.2249 (0.2621)  loss_objectness: 0.0177 (0.0303)  loss_rpn_box_reg: 0.0353 (0.0470)  time: 0.8536 (1.4937)  data: 0.0032 (0.6539)  lr: 0.001200  max mem: 24032
2020-02-11 13:11:38,661 maskrcnn_benchmark.trainer INFO: eta: 1:40:33  iter: 37960  loss: 0.5420 (0.6934)  loss_classifier: 0.1788 (0.2384)  loss_box_reg: 0.0918 (0.1156)  loss_mask: 0.2346 (0.2621)  loss_objectness: 0.0182 (0.0303)  loss_rpn_box_reg: 0.0280 (0.0470)  time: 0.8435 (1.4934)  data: 0.0029 (0.6536)  lr: 0.001200  max mem: 24032
2020-02-11 13:11:55,501 maskrcnn_benchmark.trainer INFO: eta: 1:40:01  iter: 37980  loss: 0.5539 (0.6933)  loss_classifier: 0.1706 (0.2383)  loss_box_reg: 0.0923 (0.1156)  loss_mask: 0.2351 (0.2621)  loss_objectness: 0.0165 (0.0303)  loss_rpn_box_reg: 0.0313 (0.0470)  time: 0.8410 (1.4930)  data: 0.0030 (0.6533)  lr: 0.001200  max mem: 24032
2020-02-11 13:12:12,368 maskrcnn_benchmark.trainer INFO: eta: 1:39:30  iter: 38000  loss: 0.5776 (0.6932)  loss_classifier: 0.1771 (0.2383)  loss_box_reg: 0.0913 (0.1155)  loss_mask: 0.2383 (0.2621)  loss_objectness: 0.0160 (0.0303)  loss_rpn_box_reg: 0.0357 (0.0470)  time: 0.8394 (1.4927)  data: 0.0031 (0.6529)  lr: 0.001200  max mem: 24032
2020-02-11 13:12:29,320 maskrcnn_benchmark.trainer INFO: eta: 1:38:59  iter: 38020  loss: 0.6116 (0.6932)  loss_classifier: 0.1808 (0.2383)  loss_box_reg: 0.0986 (0.1155)  loss_mask: 0.2528 (0.2621)  loss_objectness: 0.0190 (0.0303)  loss_rpn_box_reg: 0.0445 (0.0470)  time: 0.8519 (1.4923)  data: 0.0030 (0.6526)  lr: 0.001200  max mem: 24032
2020-02-11 13:12:46,039 maskrcnn_benchmark.trainer INFO: eta: 1:38:28  iter: 38040  loss: 0.4995 (0.6931)  loss_classifier: 0.1513 (0.2383)  loss_box_reg: 0.0744 (0.1155)  loss_mask: 0.2220 (0.2621)  loss_objectness: 0.0133 (0.0303)  loss_rpn_box_reg: 0.0345 (0.0469)  time: 0.8392 (1.4920)  data: 0.0028 (0.6522)  lr: 0.001200  max mem: 24032
2020-02-11 13:13:02,888 maskrcnn_benchmark.trainer INFO: eta: 1:37:57  iter: 38060  loss: 0.5630 (0.6930)  loss_classifier: 0.1830 (0.2382)  loss_box_reg: 0.0912 (0.1155)  loss_mask: 0.2279 (0.2621)  loss_objectness: 0.0143 (0.0303)  loss_rpn_box_reg: 0.0363 (0.0469)  time: 0.8372 (1.4916)  data: 0.0030 (0.6519)  lr: 0.001200  max mem: 24032
2020-02-11 13:13:19,714 maskrcnn_benchmark.trainer INFO: eta: 1:37:25  iter: 38080  loss: 0.6020 (0.6930)  loss_classifier: 0.1834 (0.2382)  loss_box_reg: 0.0992 (0.1155)  loss_mask: 0.2473 (0.2620)  loss_objectness: 0.0190 (0.0303)  loss_rpn_box_reg: 0.0382 (0.0469)  time: 0.8403 (1.4913)  data: 0.0030 (0.6515)  lr: 0.001200  max mem: 24032
2020-02-11 13:13:36,646 maskrcnn_benchmark.trainer INFO: eta: 1:36:54  iter: 38100  loss: 0.5872 (0.6929)  loss_classifier: 0.1904 (0.2382)  loss_box_reg: 0.0974 (0.1155)  loss_mask: 0.2439 (0.2620)  loss_objectness: 0.0165 (0.0303)  loss_rpn_box_reg: 0.0379 (0.0469)  time: 0.8417 (1.4910)  data: 0.0029 (0.6512)  lr: 0.001200  max mem: 24032
2020-02-11 13:13:53,498 maskrcnn_benchmark.trainer INFO: eta: 1:36:23  iter: 38120  loss: 0.5920 (0.6929)  loss_classifier: 0.1969 (0.2382)  loss_box_reg: 0.1011 (0.1155)  loss_mask: 0.2440 (0.2620)  loss_objectness: 0.0160 (0.0303)  loss_rpn_box_reg: 0.0402 (0.0469)  time: 0.8436 (1.4906)  data: 0.0030 (0.6509)  lr: 0.001200  max mem: 24032
2020-02-11 13:14:10,273 maskrcnn_benchmark.trainer INFO: eta: 1:35:52  iter: 38140  loss: 0.5302 (0.6928)  loss_classifier: 0.1822 (0.2381)  loss_box_reg: 0.0905 (0.1155)  loss_mask: 0.2302 (0.2620)  loss_objectness: 0.0146 (0.0303)  loss_rpn_box_reg: 0.0299 (0.0469)  time: 0.8390 (1.4903)  data: 0.0029 (0.6505)  lr: 0.001200  max mem: 24032
2020-02-11 13:14:27,131 maskrcnn_benchmark.trainer INFO: eta: 1:35:21  iter: 38160  loss: 0.5683 (0.6928)  loss_classifier: 0.1841 (0.2381)  loss_box_reg: 0.0950 (0.1155)  loss_mask: 0.2336 (0.2620)  loss_objectness: 0.0144 (0.0303)  loss_rpn_box_reg: 0.0298 (0.0469)  time: 0.8449 (1.4899)  data: 0.0031 (0.6502)  lr: 0.001200  max mem: 24032
2020-02-11 13:14:44,088 maskrcnn_benchmark.trainer INFO: eta: 1:34:50  iter: 38180  loss: 0.5807 (0.6927)  loss_classifier: 0.1820 (0.2381)  loss_box_reg: 0.1133 (0.1155)  loss_mask: 0.2409 (0.2620)  loss_objectness: 0.0174 (0.0303)  loss_rpn_box_reg: 0.0366 (0.0469)  time: 0.8434 (1.4896)  data: 0.0029 (0.6498)  lr: 0.001200  max mem: 24032
2020-02-11 13:15:01,156 maskrcnn_benchmark.trainer INFO: eta: 1:34:19  iter: 38200  loss: 0.5110 (0.6926)  loss_classifier: 0.1627 (0.2380)  loss_box_reg: 0.0830 (0.1155)  loss_mask: 0.2164 (0.2620)  loss_objectness: 0.0147 (0.0303)  loss_rpn_box_reg: 0.0257 (0.0469)  time: 0.8522 (1.4893)  data: 0.0029 (0.6495)  lr: 0.001200  max mem: 24032
2020-02-11 13:15:18,011 maskrcnn_benchmark.trainer INFO: eta: 1:33:48  iter: 38220  loss: 0.5309 (0.6926)  loss_classifier: 0.1622 (0.2380)  loss_box_reg: 0.0814 (0.1154)  loss_mask: 0.2305 (0.2620)  loss_objectness: 0.0149 (0.0302)  loss_rpn_box_reg: 0.0292 (0.0469)  time: 0.8438 (1.4889)  data: 0.0028 (0.6492)  lr: 0.001200  max mem: 24032
2020-02-11 13:15:35,003 maskrcnn_benchmark.trainer INFO: eta: 1:33:17  iter: 38240  loss: 0.6226 (0.6925)  loss_classifier: 0.1943 (0.2380)  loss_box_reg: 0.1064 (0.1154)  loss_mask: 0.2427 (0.2620)  loss_objectness: 0.0158 (0.0302)  loss_rpn_box_reg: 0.0316 (0.0469)  time: 0.8494 (1.4886)  data: 0.0031 (0.6488)  lr: 0.001200  max mem: 24032
2020-02-11 13:15:51,854 maskrcnn_benchmark.trainer INFO: eta: 1:32:46  iter: 38260  loss: 0.5445 (0.6925)  loss_classifier: 0.1666 (0.2380)  loss_box_reg: 0.0856 (0.1154)  loss_mask: 0.2381 (0.2619)  loss_objectness: 0.0159 (0.0302)  loss_rpn_box_reg: 0.0388 (0.0469)  time: 0.8411 (1.4883)  data: 0.0030 (0.6485)  lr: 0.001200  max mem: 24032
2020-02-11 13:16:08,857 maskrcnn_benchmark.trainer INFO: eta: 1:32:15  iter: 38280  loss: 0.6502 (0.6924)  loss_classifier: 0.2009 (0.2379)  loss_box_reg: 0.1190 (0.1154)  loss_mask: 0.2562 (0.2619)  loss_objectness: 0.0188 (0.0302)  loss_rpn_box_reg: 0.0332 (0.0469)  time: 0.8478 (1.4879)  data: 0.0031 (0.6482)  lr: 0.001200  max mem: 24032
2020-02-11 13:16:25,805 maskrcnn_benchmark.trainer INFO: eta: 1:31:44  iter: 38300  loss: 0.5912 (0.6924)  loss_classifier: 0.1962 (0.2379)  loss_box_reg: 0.0905 (0.1154)  loss_mask: 0.2412 (0.2619)  loss_objectness: 0.0184 (0.0302)  loss_rpn_box_reg: 0.0328 (0.0469)  time: 0.8420 (1.4876)  data: 0.0031 (0.6478)  lr: 0.001200  max mem: 24032
2020-02-11 13:16:42,703 maskrcnn_benchmark.trainer INFO: eta: 1:31:13  iter: 38320  loss: 0.5781 (0.6923)  loss_classifier: 0.1904 (0.2379)  loss_box_reg: 0.0972 (0.1154)  loss_mask: 0.2409 (0.2619)  loss_objectness: 0.0163 (0.0302)  loss_rpn_box_reg: 0.0323 (0.0469)  time: 0.8454 (1.4873)  data: 0.0031 (0.6475)  lr: 0.001200  max mem: 24032
2020-02-11 13:16:59,624 maskrcnn_benchmark.trainer INFO: eta: 1:30:42  iter: 38340  loss: 0.6048 (0.6923)  loss_classifier: 0.2077 (0.2379)  loss_box_reg: 0.0922 (0.1154)  loss_mask: 0.2469 (0.2619)  loss_objectness: 0.0136 (0.0302)  loss_rpn_box_reg: 0.0332 (0.0469)  time: 0.8478 (1.4869)  data: 0.0030 (0.6471)  lr: 0.001200  max mem: 24032
2020-02-11 13:17:16,541 maskrcnn_benchmark.trainer INFO: eta: 1:30:11  iter: 38360  loss: 0.6466 (0.6922)  loss_classifier: 0.2105 (0.2378)  loss_box_reg: 0.1099 (0.1154)  loss_mask: 0.2490 (0.2619)  loss_objectness: 0.0215 (0.0302)  loss_rpn_box_reg: 0.0433 (0.0469)  time: 0.8478 (1.4866)  data: 0.0031 (0.6468)  lr: 0.001200  max mem: 24032
2020-02-11 13:17:33,556 maskrcnn_benchmark.trainer INFO: eta: 1:29:40  iter: 38380  loss: 0.6065 (0.6922)  loss_classifier: 0.2102 (0.2378)  loss_box_reg: 0.1045 (0.1154)  loss_mask: 0.2412 (0.2619)  loss_objectness: 0.0197 (0.0302)  loss_rpn_box_reg: 0.0317 (0.0469)  time: 0.8495 (1.4863)  data: 0.0030 (0.6465)  lr: 0.001200  max mem: 24032
2020-02-11 13:17:50,469 maskrcnn_benchmark.trainer INFO: eta: 1:29:09  iter: 38400  loss: 0.6191 (0.6921)  loss_classifier: 0.2018 (0.2378)  loss_box_reg: 0.1029 (0.1154)  loss_mask: 0.2384 (0.2619)  loss_objectness: 0.0174 (0.0302)  loss_rpn_box_reg: 0.0369 (0.0469)  time: 0.8470 (1.4859)  data: 0.0031 (0.6461)  lr: 0.001200  max mem: 24032
2020-02-11 13:18:07,337 maskrcnn_benchmark.trainer INFO: eta: 1:28:38  iter: 38420  loss: 0.6091 (0.6921)  loss_classifier: 0.2026 (0.2378)  loss_box_reg: 0.1017 (0.1154)  loss_mask: 0.2452 (0.2619)  loss_objectness: 0.0172 (0.0302)  loss_rpn_box_reg: 0.0355 (0.0469)  time: 0.8419 (1.4856)  data: 0.0030 (0.6458)  lr: 0.001200  max mem: 24032
2020-02-11 13:18:24,413 maskrcnn_benchmark.trainer INFO: eta: 1:28:07  iter: 38440  loss: 0.5516 (0.6920)  loss_classifier: 0.1896 (0.2378)  loss_box_reg: 0.0909 (0.1154)  loss_mask: 0.2339 (0.2619)  loss_objectness: 0.0178 (0.0302)  loss_rpn_box_reg: 0.0320 (0.0469)  time: 0.8535 (1.4853)  data: 0.0030 (0.6455)  lr: 0.001200  max mem: 24032
2020-02-11 13:18:41,096 maskrcnn_benchmark.trainer INFO: eta: 1:27:36  iter: 38460  loss: 0.5459 (0.6920)  loss_classifier: 0.1817 (0.2377)  loss_box_reg: 0.0961 (0.1154)  loss_mask: 0.2369 (0.2618)  loss_objectness: 0.0154 (0.0302)  loss_rpn_box_reg: 0.0282 (0.0469)  time: 0.8331 (1.4849)  data: 0.0029 (0.6451)  lr: 0.001200  max mem: 24032
2020-02-11 13:18:58,034 maskrcnn_benchmark.trainer INFO: eta: 1:27:05  iter: 38480  loss: 0.5530 (0.6919)  loss_classifier: 0.1742 (0.2377)  loss_box_reg: 0.0917 (0.1154)  loss_mask: 0.2285 (0.2618)  loss_objectness: 0.0136 (0.0302)  loss_rpn_box_reg: 0.0336 (0.0469)  time: 0.8444 (1.4846)  data: 0.0030 (0.6448)  lr: 0.001200  max mem: 24032
2020-02-11 13:19:15,007 maskrcnn_benchmark.trainer INFO: eta: 1:26:34  iter: 38500  loss: 0.5587 (0.6919)  loss_classifier: 0.1756 (0.2377)  loss_box_reg: 0.0906 (0.1153)  loss_mask: 0.2385 (0.2618)  loss_objectness: 0.0153 (0.0302)  loss_rpn_box_reg: 0.0305 (0.0469)  time: 0.8423 (1.4843)  data: 0.0030 (0.6445)  lr: 0.001200  max mem: 24032
2020-02-11 13:19:31,582 maskrcnn_benchmark.trainer INFO: eta: 1:26:04  iter: 38520  loss: 0.6082 (0.6918)  loss_classifier: 0.1958 (0.2377)  loss_box_reg: 0.1028 (0.1153)  loss_mask: 0.2364 (0.2618)  loss_objectness: 0.0192 (0.0302)  loss_rpn_box_reg: 0.0421 (0.0469)  time: 0.8426 (1.4839)  data: 0.0031 (0.6441)  lr: 0.001200  max mem: 24032
:::MLL 1581427171.584 epoch_stop: {"value": null, "metadata": {"epoch_num": 45, "file": "tools/train_mlperf.py", "lineno": 75}}
:::MLL 1581427171.584 block_stop: {"value": null, "metadata": {"first_epoch_num": 45, "file": "tools/train_mlperf.py", "lineno": 76}}
:::MLL 1581427171.585 eval_start: {"value": null, "metadata": {"epoch_num": 45, "file": "tools/train_mlperf.py", "lineno": 77}}
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
2020-02-11 13:19:32,449 maskrcnn_benchmark.data.build WARNING: When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
Done (t=3.92s)
creating index...
Done (t=3.86s)
creating index...
index created!
Done (t=3.90s)
creating index...
Done (t=3.89s)
creating index...
  0%|                                                  | 0/2532 [00:00<?, ?it/s]Done (t=3.88s)
creating index...
Done (t=3.86s)
creating index...
index created!
Done (t=3.92s)
creating index...
Done (t=3.90s)
creating index...
index created!
index created!
  0%|                                                  | 0/2532 [00:00<?, ?it/s]index created!
index created!
index created!
index created!
  0%|                                                  | 0/2532 [00:00<?, ?it/s]2020-02-11 13:19:36,773 maskrcnn_benchmark.inference INFO: Start evaluation on coco_2014_val dataset(40504 images).
100%|██████████████████████████████████████▉| 2528/2532 [03:46<00:00, 11.37it/s]
100%|███████████████████████████████████████| 2532/2532 [03:47<00:00, 11.14it/s]
 98%|██████████████████████████████████████ | 2473/2532 [03:48<00:05, 10.98it/s]
100%|███████████████████████████████████████| 2532/2532 [03:49<00:00, 11.04it/s]
100%|███████████████████████████████████████| 2532/2532 [03:51<00:00, 10.96it/s]
100%|███████████████████████████████████████| 2532/2532 [03:52<00:00, 10.91it/s]
 99%|██████████████████████████████████████▊| 2519/2532 [03:52<00:01, 11.60it/s]
100%|███████████████████████████████████████| 2532/2532 [03:55<00:00, 10.76it/s]
2020-02-11 13:23:32,112 maskrcnn_benchmark.inference INFO: Total inference time: 0:03:55.339056 (0.04648213628580183 s / img per device, on 8 devices)
2020-02-11 13:23:33,128 maskrcnn_benchmark.inference INFO: Preparing results for COCO format
2020-02-11 13:23:33,128 maskrcnn_benchmark.inference INFO: Preparing bbox results
2020-02-11 13:23:34,639 maskrcnn_benchmark.inference INFO: Preparing segm results
:::MLL 1581427642.949 block_start: {"value": null, "metadata": {"first_epoch_num": 46, "epoch_count": 1, "file": "tools/train_mlperf.py", "lineno": 134}}
:::MLL 1581427642.951 epoch_start: {"value": null, "metadata": {"epoch_num": 46, "file": "tools/train_mlperf.py", "lineno": 135}}
Evaluating predictions
creating index...
GT annotations already exist!
2020-02-11 13:27:40,165 maskrcnn_benchmark.trainer INFO: eta: 1:26:15  iter: 38540  loss: 0.5385 (0.6917)  loss_classifier: 0.1849 (0.2376)  loss_box_reg: 0.0864 (0.1153)  loss_mask: 0.2306 (0.2618)  loss_objectness: 0.0158 (0.0301)  loss_rpn_box_reg: 0.0247 (0.0468)  time: 0.8485 (1.4958)  data: 0.0029 (0.6560)  lr: 0.001200  max mem: 24032
2020-02-11 13:27:57,102 maskrcnn_benchmark.trainer INFO: eta: 1:25:44  iter: 38560  loss: 0.5756 (0.6917)  loss_classifier: 0.2044 (0.2376)  loss_box_reg: 0.0956 (0.1153)  loss_mask: 0.2399 (0.2618)  loss_objectness: 0.0164 (0.0301)  loss_rpn_box_reg: 0.0372 (0.0468)  time: 0.8432 (1.4955)  data: 0.0031 (0.6557)  lr: 0.001200  max mem: 24032
2020-02-11 13:28:14,042 maskrcnn_benchmark.trainer INFO: eta: 1:25:13  iter: 38580  loss: 0.5619 (0.6916)  loss_classifier: 0.1825 (0.2376)  loss_box_reg: 0.0984 (0.1153)  loss_mask: 0.2389 (0.2618)  loss_objectness: 0.0169 (0.0301)  loss_rpn_box_reg: 0.0310 (0.0468)  time: 0.8431 (1.4952)  data: 0.0029 (0.6554)  lr: 0.001200  max mem: 24032
Loading and preparing results...
resFile is ./inference/coco_2014_val/bbox.json
DONE (t=5.99s)
Running per image evaluation...
Evaluate annotation type *bbox*
2020-02-11 13:28:30,993 maskrcnn_benchmark.trainer INFO: eta: 1:24:42  iter: 38600  loss: 0.5282 (0.6916)  loss_classifier: 0.1758 (0.2376)  loss_box_reg: 0.0905 (0.1153)  loss_mask: 0.2505 (0.2618)  loss_objectness: 0.0144 (0.0301)  loss_rpn_box_reg: 0.0304 (0.0468)  time: 0.8433 (1.4948)  data: 0.0029 (0.6550)  lr: 0.001200  max mem: 24032
DONE (t=24.46s).
Accumulating evaluation results...
DONE (t=0.00s).
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.35739
 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=100 ] = 0.56781
 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=100 ] = 0.38755
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.18583
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.37225
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.46199
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=  1 ] = 0.30092
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets= 10 ] = 0.46756
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.48805
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.29094
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.51223
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.62607
2020-02-11 13:28:47,832 maskrcnn_benchmark.trainer INFO: eta: 1:24:11  iter: 38620  loss: 0.5572 (0.6915)  loss_classifier: 0.1823 (0.2375)  loss_box_reg: 0.0871 (0.1153)  loss_mask: 0.2301 (0.2618)  loss_objectness: 0.0172 (0.0301)  loss_rpn_box_reg: 0.0342 (0.0468)  time: 0.8458 (1.4945)  data: 0.0030 (0.6547)  lr: 0.001200  max mem: 24032
2020-02-11 13:29:04,846 maskrcnn_benchmark.trainer INFO: eta: 1:23:40  iter: 38640  loss: 0.5346 (0.6915)  loss_classifier: 0.1810 (0.2375)  loss_box_reg: 0.0858 (0.1153)  loss_mask: 0.2342 (0.2617)  loss_objectness: 0.0167 (0.0301)  loss_rpn_box_reg: 0.0239 (0.0468)  time: 0.8545 (1.4941)  data: 0.0029 (0.6543)  lr: 0.001200  max mem: 24032
2020-02-11 13:29:21,778 maskrcnn_benchmark.trainer INFO: eta: 1:23:09  iter: 38660  loss: 0.5577 (0.6914)  loss_classifier: 0.1763 (0.2375)  loss_box_reg: 0.0930 (0.1153)  loss_mask: 0.2378 (0.2617)  loss_objectness: 0.0147 (0.0301)  loss_rpn_box_reg: 0.0303 (0.0468)  time: 0.8465 (1.4938)  data: 0.0028 (0.6540)  lr: 0.001200  max mem: 24032
Loading and preparing results...
resFile is ./inference/coco_2014_val/segm.json
2020-02-11 13:29:38,768 maskrcnn_benchmark.trainer INFO: eta: 1:22:38  iter: 38680  loss: 0.5692 (0.6914)  loss_classifier: 0.1686 (0.2375)  loss_box_reg: 0.1005 (0.1153)  loss_mask: 0.2403 (0.2617)  loss_objectness: 0.0181 (0.0301)  loss_rpn_box_reg: 0.0383 (0.0468)  time: 0.8452 (1.4935)  data: 0.0030 (0.6537)  lr: 0.001200  max mem: 24032
DONE (t=14.08s)
Running per image evaluation...
Evaluate annotation type *segm*
2020-02-11 13:29:55,586 maskrcnn_benchmark.trainer INFO: eta: 1:22:07  iter: 38700  loss: 0.5571 (0.6913)  loss_classifier: 0.1774 (0.2374)  loss_box_reg: 0.0965 (0.1153)  loss_mask: 0.2395 (0.2617)  loss_objectness: 0.0156 (0.0301)  loss_rpn_box_reg: 0.0245 (0.0468)  time: 0.8404 (1.4931)  data: 0.0030 (0.6533)  lr: 0.001200  max mem: 24032
2020-02-11 13:30:12,478 maskrcnn_benchmark.trainer INFO: eta: 1:21:36  iter: 38720  loss: 0.5649 (0.6912)  loss_classifier: 0.1730 (0.2374)  loss_box_reg: 0.0931 (0.1152)  loss_mask: 0.2364 (0.2617)  loss_objectness: 0.0137 (0.0301)  loss_rpn_box_reg: 0.0329 (0.0468)  time: 0.8448 (1.4928)  data: 0.0030 (0.6530)  lr: 0.001200  max mem: 24032
DONE (t=30.92s).
Accumulating evaluation results...
DONE (t=0.00s).
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.32356
 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=100 ] = 0.53593
 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=100 ] = 0.34157
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.13231
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.33526
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.47662
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=  1 ] = 0.28273
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets= 10 ] = 0.42847
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.44521
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.24766
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.47243
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.59848
2020-02-11 13:30:21,756 maskrcnn_benchmark.trainer INFO: bbox mAP: 0.3573943385960344, segm mAP: 0.32355722701594775
:::MLL 1581427821.770 eval_accuracy: {"value": {"accuracy": {"BBOX": 0.3573943385960344, "SEGM": 0.32355722701594775}}, "metadata": {"epoch_num": 45, "file": "tools/train_mlperf.py", "lineno": 99}}
:::MLL 1581427821.771 eval_stop: {"value": null, "metadata": {"epoch_num": 45, "file": "tools/train_mlperf.py", "lineno": 100}}
2020-02-11 13:30:31,960 maskrcnn_benchmark.trainer INFO: eta: 1:21:05  iter: 38740  loss: 0.5786 (0.6912)  loss_classifier: 0.1758 (0.2374)  loss_box_reg: 0.0944 (0.1152)  loss_mask: 0.2361 (0.2617)  loss_objectness: 0.0159 (0.0301)  loss_rpn_box_reg: 0.0317 (0.0468)  time: 0.8527 (1.4925)  data: 0.0029 (0.6527)  lr: 0.001200  max mem: 24032
2020-02-11 13:30:48,863 maskrcnn_benchmark.trainer INFO: eta: 1:20:34  iter: 38760  loss: 0.6126 (0.6911)  loss_classifier: 0.1871 (0.2373)  loss_box_reg: 0.1018 (0.1152)  loss_mask: 0.2284 (0.2617)  loss_objectness: 0.0181 (0.0301)  loss_rpn_box_reg: 0.0373 (0.0468)  time: 0.8401 (1.4922)  data: 0.0030 (0.6523)  lr: 0.001200  max mem: 24032
2020-02-11 13:31:05,805 maskrcnn_benchmark.trainer INFO: eta: 1:20:03  iter: 38780  loss: 0.5896 (0.6911)  loss_classifier: 0.2039 (0.2373)  loss_box_reg: 0.0979 (0.1152)  loss_mask: 0.2424 (0.2617)  loss_objectness: 0.0162 (0.0301)  loss_rpn_box_reg: 0.0353 (0.0468)  time: 0.8458 (1.4919)  data: 0.0029 (0.6520)  lr: 0.001200  max mem: 24032
2020-02-11 13:31:22,695 maskrcnn_benchmark.trainer INFO: eta: 1:19:32  iter: 38800  loss: 0.6248 (0.6910)  loss_classifier: 0.2033 (0.2373)  loss_box_reg: 0.1177 (0.1152)  loss_mask: 0.2519 (0.2617)  loss_objectness: 0.0188 (0.0301)  loss_rpn_box_reg: 0.0372 (0.0468)  time: 0.8447 (1.4915)  data: 0.0029 (0.6517)  lr: 0.001200  max mem: 24032
2020-02-11 13:31:39,780 maskrcnn_benchmark.trainer INFO: eta: 1:19:02  iter: 38820  loss: 0.5984 (0.6910)  loss_classifier: 0.1930 (0.2373)  loss_box_reg: 0.1104 (0.1152)  loss_mask: 0.2429 (0.2616)  loss_objectness: 0.0200 (0.0301)  loss_rpn_box_reg: 0.0369 (0.0468)  time: 0.8486 (1.4912)  data: 0.0030 (0.6513)  lr: 0.001200  max mem: 24032
2020-02-11 13:31:56,665 maskrcnn_benchmark.trainer INFO: eta: 1:18:31  iter: 38840  loss: 0.5766 (0.6909)  loss_classifier: 0.1983 (0.2373)  loss_box_reg: 0.0976 (0.1152)  loss_mask: 0.2401 (0.2616)  loss_objectness: 0.0154 (0.0301)  loss_rpn_box_reg: 0.0403 (0.0468)  time: 0.8494 (1.4909)  data: 0.0030 (0.6510)  lr: 0.001200  max mem: 24032
2020-02-11 13:32:13,634 maskrcnn_benchmark.trainer INFO: eta: 1:18:00  iter: 38860  loss: 0.6377 (0.6909)  loss_classifier: 0.2046 (0.2372)  loss_box_reg: 0.1118 (0.1152)  loss_mask: 0.2503 (0.2616)  loss_objectness: 0.0208 (0.0300)  loss_rpn_box_reg: 0.0456 (0.0468)  time: 0.8492 (1.4905)  data: 0.0029 (0.6507)  lr: 0.001200  max mem: 24032
2020-02-11 13:32:30,487 maskrcnn_benchmark.trainer INFO: eta: 1:17:29  iter: 38880  loss: 0.5528 (0.6908)  loss_classifier: 0.1769 (0.2372)  loss_box_reg: 0.0848 (0.1152)  loss_mask: 0.2266 (0.2616)  loss_objectness: 0.0197 (0.0300)  loss_rpn_box_reg: 0.0290 (0.0468)  time: 0.8423 (1.4902)  data: 0.0030 (0.6503)  lr: 0.001200  max mem: 24032
2020-02-11 13:32:47,538 maskrcnn_benchmark.trainer INFO: eta: 1:16:58  iter: 38900  loss: 0.5905 (0.6908)  loss_classifier: 0.1906 (0.2372)  loss_box_reg: 0.0979 (0.1152)  loss_mask: 0.2486 (0.2616)  loss_objectness: 0.0161 (0.0300)  loss_rpn_box_reg: 0.0351 (0.0468)  time: 0.8546 (1.4899)  data: 0.0032 (0.6500)  lr: 0.001200  max mem: 24032
2020-02-11 13:33:04,401 maskrcnn_benchmark.trainer INFO: eta: 1:16:27  iter: 38920  loss: 0.6126 (0.6908)  loss_classifier: 0.2028 (0.2372)  loss_box_reg: 0.1017 (0.1152)  loss_mask: 0.2422 (0.2616)  loss_objectness: 0.0173 (0.0300)  loss_rpn_box_reg: 0.0333 (0.0468)  time: 0.8447 (1.4896)  data: 0.0031 (0.6497)  lr: 0.001200  max mem: 24032
2020-02-11 13:33:21,569 maskrcnn_benchmark.trainer INFO: eta: 1:15:57  iter: 38940  loss: 0.5642 (0.6907)  loss_classifier: 0.1886 (0.2372)  loss_box_reg: 0.0937 (0.1152)  loss_mask: 0.2352 (0.2616)  loss_objectness: 0.0168 (0.0300)  loss_rpn_box_reg: 0.0329 (0.0468)  time: 0.8605 (1.4892)  data: 0.0031 (0.6493)  lr: 0.001200  max mem: 24032
2020-02-11 13:33:38,598 maskrcnn_benchmark.trainer INFO: eta: 1:15:26  iter: 38960  loss: 0.5715 (0.6907)  loss_classifier: 0.1796 (0.2371)  loss_box_reg: 0.0951 (0.1152)  loss_mask: 0.2496 (0.2616)  loss_objectness: 0.0142 (0.0300)  loss_rpn_box_reg: 0.0332 (0.0468)  time: 0.8539 (1.4889)  data: 0.0029 (0.6490)  lr: 0.001200  max mem: 24032
2020-02-11 13:33:55,516 maskrcnn_benchmark.trainer INFO: eta: 1:14:55  iter: 38980  loss: 0.5595 (0.6906)  loss_classifier: 0.1751 (0.2371)  loss_box_reg: 0.0954 (0.1152)  loss_mask: 0.2431 (0.2616)  loss_objectness: 0.0175 (0.0300)  loss_rpn_box_reg: 0.0328 (0.0468)  time: 0.8411 (1.4886)  data: 0.0030 (0.6487)  lr: 0.001200  max mem: 24032
2020-02-11 13:34:12,458 maskrcnn_benchmark.trainer INFO: eta: 1:14:24  iter: 39000  loss: 0.5601 (0.6905)  loss_classifier: 0.1791 (0.2371)  loss_box_reg: 0.0927 (0.1151)  loss_mask: 0.2399 (0.2616)  loss_objectness: 0.0133 (0.0300)  loss_rpn_box_reg: 0.0303 (0.0468)  time: 0.8503 (1.4882)  data: 0.0031 (0.6483)  lr: 0.001200  max mem: 24032
2020-02-11 13:34:29,411 maskrcnn_benchmark.trainer INFO: eta: 1:13:53  iter: 39020  loss: 0.5368 (0.6905)  loss_classifier: 0.1710 (0.2370)  loss_box_reg: 0.0865 (0.1151)  loss_mask: 0.2391 (0.2615)  loss_objectness: 0.0167 (0.0300)  loss_rpn_box_reg: 0.0311 (0.0467)  time: 0.8446 (1.4879)  data: 0.0030 (0.6480)  lr: 0.001200  max mem: 24032
2020-02-11 13:34:46,359 maskrcnn_benchmark.trainer INFO: eta: 1:13:23  iter: 39040  loss: 0.5822 (0.6904)  loss_classifier: 0.1893 (0.2370)  loss_box_reg: 0.0873 (0.1151)  loss_mask: 0.2380 (0.2615)  loss_objectness: 0.0164 (0.0300)  loss_rpn_box_reg: 0.0470 (0.0467)  time: 0.8414 (1.4876)  data: 0.0029 (0.6477)  lr: 0.001200  max mem: 24032
2020-02-11 13:35:03,233 maskrcnn_benchmark.trainer INFO: eta: 1:12:52  iter: 39060  loss: 0.5542 (0.6904)  loss_classifier: 0.1677 (0.2370)  loss_box_reg: 0.0941 (0.1151)  loss_mask: 0.2422 (0.2615)  loss_objectness: 0.0150 (0.0300)  loss_rpn_box_reg: 0.0257 (0.0467)  time: 0.8408 (1.4873)  data: 0.0028 (0.6473)  lr: 0.001200  max mem: 24032
2020-02-11 13:35:20,105 maskrcnn_benchmark.trainer INFO: eta: 1:12:21  iter: 39080  loss: 0.5281 (0.6903)  loss_classifier: 0.1871 (0.2370)  loss_box_reg: 0.0820 (0.1151)  loss_mask: 0.2410 (0.2615)  loss_objectness: 0.0156 (0.0300)  loss_rpn_box_reg: 0.0318 (0.0467)  time: 0.8433 (1.4869)  data: 0.0029 (0.6470)  lr: 0.001200  max mem: 24032
2020-02-11 13:35:36,937 maskrcnn_benchmark.trainer INFO: eta: 1:11:51  iter: 39100  loss: 0.5890 (0.6903)  loss_classifier: 0.1981 (0.2370)  loss_box_reg: 0.1041 (0.1151)  loss_mask: 0.2418 (0.2615)  loss_objectness: 0.0162 (0.0300)  loss_rpn_box_reg: 0.0295 (0.0467)  time: 0.8388 (1.4866)  data: 0.0029 (0.6467)  lr: 0.001200  max mem: 24032
2020-02-11 13:35:53,835 maskrcnn_benchmark.trainer INFO: eta: 1:11:20  iter: 39120  loss: 0.6323 (0.6902)  loss_classifier: 0.1927 (0.2369)  loss_box_reg: 0.0999 (0.1151)  loss_mask: 0.2427 (0.2615)  loss_objectness: 0.0194 (0.0300)  loss_rpn_box_reg: 0.0434 (0.0467)  time: 0.8437 (1.4863)  data: 0.0031 (0.6464)  lr: 0.001200  max mem: 24032
2020-02-11 13:36:10,798 maskrcnn_benchmark.trainer INFO: eta: 1:10:49  iter: 39140  loss: 0.5535 (0.6902)  loss_classifier: 0.1868 (0.2369)  loss_box_reg: 0.0942 (0.1151)  loss_mask: 0.2317 (0.2615)  loss_objectness: 0.0166 (0.0300)  loss_rpn_box_reg: 0.0336 (0.0467)  time: 0.8495 (1.4859)  data: 0.0031 (0.6460)  lr: 0.001200  max mem: 24032
2020-02-11 13:36:27,814 maskrcnn_benchmark.trainer INFO: eta: 1:10:19  iter: 39160  loss: 0.5789 (0.6901)  loss_classifier: 0.1896 (0.2369)  loss_box_reg: 0.0974 (0.1151)  loss_mask: 0.2347 (0.2615)  loss_objectness: 0.0183 (0.0300)  loss_rpn_box_reg: 0.0344 (0.0467)  time: 0.8512 (1.4856)  data: 0.0030 (0.6457)  lr: 0.001200  max mem: 24032
2020-02-11 13:36:44,822 maskrcnn_benchmark.trainer INFO: eta: 1:09:48  iter: 39180  loss: 0.5723 (0.6900)  loss_classifier: 0.1856 (0.2369)  loss_box_reg: 0.0847 (0.1151)  loss_mask: 0.2403 (0.2615)  loss_objectness: 0.0164 (0.0299)  loss_rpn_box_reg: 0.0338 (0.0467)  time: 0.8468 (1.4853)  data: 0.0029 (0.6454)  lr: 0.001200  max mem: 24032
2020-02-11 13:37:01,735 maskrcnn_benchmark.trainer INFO: eta: 1:09:17  iter: 39200  loss: 0.5531 (0.6900)  loss_classifier: 0.1760 (0.2368)  loss_box_reg: 0.0916 (0.1151)  loss_mask: 0.2243 (0.2614)  loss_objectness: 0.0149 (0.0299)  loss_rpn_box_reg: 0.0420 (0.0467)  time: 0.8503 (1.4850)  data: 0.0029 (0.6450)  lr: 0.001200  max mem: 24032
2020-02-11 13:37:18,586 maskrcnn_benchmark.trainer INFO: eta: 1:08:47  iter: 39220  loss: 0.6341 (0.6900)  loss_classifier: 0.2120 (0.2368)  loss_box_reg: 0.1124 (0.1151)  loss_mask: 0.2455 (0.2614)  loss_objectness: 0.0188 (0.0299)  loss_rpn_box_reg: 0.0363 (0.0467)  time: 0.8417 (1.4846)  data: 0.0032 (0.6447)  lr: 0.001200  max mem: 24032
2020-02-11 13:37:35,515 maskrcnn_benchmark.trainer INFO: eta: 1:08:16  iter: 39240  loss: 0.5594 (0.6899)  loss_classifier: 0.1796 (0.2368)  loss_box_reg: 0.0864 (0.1150)  loss_mask: 0.2423 (0.2614)  loss_objectness: 0.0158 (0.0299)  loss_rpn_box_reg: 0.0325 (0.0467)  time: 0.8505 (1.4843)  data: 0.0029 (0.6444)  lr: 0.001200  max mem: 24032
2020-02-11 13:37:52,278 maskrcnn_benchmark.trainer INFO: eta: 1:07:46  iter: 39260  loss: 0.5607 (0.6898)  loss_classifier: 0.1793 (0.2368)  loss_box_reg: 0.0896 (0.1150)  loss_mask: 0.2279 (0.2614)  loss_objectness: 0.0167 (0.0299)  loss_rpn_box_reg: 0.0356 (0.0467)  time: 0.8385 (1.4840)  data: 0.0029 (0.6441)  lr: 0.001200  max mem: 24032
2020-02-11 13:38:09,160 maskrcnn_benchmark.trainer INFO: eta: 1:07:15  iter: 39280  loss: 0.5853 (0.6898)  loss_classifier: 0.1971 (0.2367)  loss_box_reg: 0.0958 (0.1150)  loss_mask: 0.2435 (0.2614)  loss_objectness: 0.0199 (0.0299)  loss_rpn_box_reg: 0.0383 (0.0467)  time: 0.8422 (1.4837)  data: 0.0030 (0.6437)  lr: 0.001200  max mem: 24032
2020-02-11 13:38:25,977 maskrcnn_benchmark.trainer INFO: eta: 1:06:44  iter: 39300  loss: 0.5966 (0.6897)  loss_classifier: 0.1900 (0.2367)  loss_box_reg: 0.1023 (0.1150)  loss_mask: 0.2514 (0.2614)  loss_objectness: 0.0173 (0.0299)  loss_rpn_box_reg: 0.0278 (0.0467)  time: 0.8377 (1.4833)  data: 0.0032 (0.6434)  lr: 0.001200  max mem: 24032
2020-02-11 13:38:42,875 maskrcnn_benchmark.trainer INFO: eta: 1:06:14  iter: 39320  loss: 0.6001 (0.6897)  loss_classifier: 0.1932 (0.2367)  loss_box_reg: 0.1101 (0.1150)  loss_mask: 0.2394 (0.2614)  loss_objectness: 0.0131 (0.0299)  loss_rpn_box_reg: 0.0342 (0.0467)  time: 0.8466 (1.4830)  data: 0.0030 (0.6431)  lr: 0.001200  max mem: 24032
2020-02-11 13:38:59,740 maskrcnn_benchmark.trainer INFO: eta: 1:05:43  iter: 39340  loss: 0.6379 (0.6897)  loss_classifier: 0.1873 (0.2367)  loss_box_reg: 0.1105 (0.1150)  loss_mask: 0.2523 (0.2614)  loss_objectness: 0.0179 (0.0299)  loss_rpn_box_reg: 0.0438 (0.0467)  time: 0.8374 (1.4827)  data: 0.0031 (0.6428)  lr: 0.001200  max mem: 24032
2020-02-11 13:39:16,760 maskrcnn_benchmark.trainer INFO: eta: 1:05:13  iter: 39360  loss: 0.5478 (0.6896)  loss_classifier: 0.1801 (0.2367)  loss_box_reg: 0.0921 (0.1150)  loss_mask: 0.2400 (0.2614)  loss_objectness: 0.0135 (0.0299)  loss_rpn_box_reg: 0.0316 (0.0467)  time: 0.8534 (1.4824)  data: 0.0031 (0.6424)  lr: 0.001200  max mem: 24032
:::MLL 1581428369.839 epoch_stop: {"value": null, "metadata": {"epoch_num": 46, "file": "tools/train_mlperf.py", "lineno": 75}}
:::MLL 1581428369.840 block_stop: {"value": null, "metadata": {"first_epoch_num": 46, "file": "tools/train_mlperf.py", "lineno": 76}}
:::MLL 1581428369.840 eval_start: {"value": null, "metadata": {"epoch_num": 46, "file": "tools/train_mlperf.py", "lineno": 77}}
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
2020-02-11 13:39:30,449 maskrcnn_benchmark.data.build WARNING: When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
Done (t=3.88s)
creating index...
Done (t=3.91s)
creating index...
Done (t=3.81s)
creating index...
Done (t=3.88s)
creating index...
Done (t=3.92s)
creating index...
Done (t=3.93s)
creating index...
Done (t=3.92s)
creating index...
Done (t=3.96s)
creating index...
index created!
index created!
index created!
index created!
  0%|                                                  | 0/2532 [00:00<?, ?it/s]index created!
index created!
2020-02-11 13:39:34,781 maskrcnn_benchmark.inference INFO: Start evaluation on coco_2014_val dataset(40504 images).
  0%|                                                  | 0/2532 [00:00<?, ?it/s]index created!
index created!
 97%|█████████████████████████████████████▊ | 2452/2532 [03:47<00:07, 11.26it/s]
 98%|██████████████████████████████████████▍| 2492/2532 [03:47<00:03, 11.45it/s]
 99%|██████████████████████████████████████▍| 2498/2532 [03:48<00:02, 12.18it/s]
 99%|██████████████████████████████████████▌| 2500/2532 [03:48<00:02, 12.01it/s]
100%|███████████████████████████████████████| 2532/2532 [03:52<00:00, 10.90it/s]
 99%|██████████████████████████████████████▋| 2512/2532 [03:52<00:01, 11.45it/s]
 99%|██████████████████████████████████████▋| 2514/2532 [03:52<00:01, 11.37it/s]
100%|███████████████████████████████████████| 2532/2532 [03:54<00:00, 13.21it/s]
2020-02-11 13:43:30,654 maskrcnn_benchmark.inference INFO: Total inference time: 0:03:55.872070 (0.04658741261585649 s / img per device, on 8 devices)
2020-02-11 13:43:31,660 maskrcnn_benchmark.inference INFO: Preparing results for COCO format
2020-02-11 13:43:31,660 maskrcnn_benchmark.inference INFO: Preparing bbox results
2020-02-11 13:43:33,168 maskrcnn_benchmark.inference INFO: Preparing segm results
:::MLL 1581428840.491 block_start: {"value": null, "metadata": {"first_epoch_num": 47, "epoch_count": 1, "file": "tools/train_mlperf.py", "lineno": 134}}
:::MLL 1581428840.493 epoch_start: {"value": null, "metadata": {"epoch_num": 47, "file": "tools/train_mlperf.py", "lineno": 135}}
2020-02-11 13:47:23,872 maskrcnn_benchmark.trainer INFO: eta: 1:05:14  iter: 39380  loss: 0.5596 (0.6895)  loss_classifier: 0.1867 (0.2366)  loss_box_reg: 0.0928 (0.1150)  loss_mask: 0.2360 (0.2614)  loss_objectness: 0.0148 (0.0299)  loss_rpn_box_reg: 0.0361 (0.0467)  time: 0.8361 (1.4940)  data: 0.0031 (0.6541)  lr: 0.001200  max mem: 24032
Evaluating predictions
creating index...
GT annotations already exist!
2020-02-11 13:47:40,862 maskrcnn_benchmark.trainer INFO: eta: 1:04:43  iter: 39400  loss: 0.5853 (0.6895)  loss_classifier: 0.1830 (0.2366)  loss_box_reg: 0.0935 (0.1150)  loss_mask: 0.2268 (0.2613)  loss_objectness: 0.0187 (0.0299)  loss_rpn_box_reg: 0.0314 (0.0467)  time: 0.8530 (1.4936)  data: 0.0031 (0.6537)  lr: 0.001200  max mem: 24032
2020-02-11 13:47:57,938 maskrcnn_benchmark.trainer INFO: eta: 1:04:12  iter: 39420  loss: 0.6018 (0.6894)  loss_classifier: 0.1928 (0.2366)  loss_box_reg: 0.1036 (0.1150)  loss_mask: 0.2441 (0.2613)  loss_objectness: 0.0214 (0.0299)  loss_rpn_box_reg: 0.0398 (0.0467)  time: 0.8518 (1.4933)  data: 0.0029 (0.6534)  lr: 0.001200  max mem: 24032
Loading and preparing results...
resFile is ./inference/coco_2014_val/bbox.json
2020-02-11 13:48:14,624 maskrcnn_benchmark.trainer INFO: eta: 1:03:42  iter: 39440  loss: 0.5946 (0.6894)  loss_classifier: 0.1820 (0.2366)  loss_box_reg: 0.0885 (0.1150)  loss_mask: 0.2463 (0.2613)  loss_objectness: 0.0165 (0.0299)  loss_rpn_box_reg: 0.0384 (0.0467)  time: 0.8344 (1.4930)  data: 0.0028 (0.6531)  lr: 0.001200  max mem: 24032
DONE (t=6.03s)
Running per image evaluation...
Evaluate annotation type *bbox*
2020-02-11 13:48:31,653 maskrcnn_benchmark.trainer INFO: eta: 1:03:11  iter: 39460  loss: 0.5402 (0.6893)  loss_classifier: 0.1672 (0.2365)  loss_box_reg: 0.0823 (0.1149)  loss_mask: 0.2295 (0.2613)  loss_objectness: 0.0147 (0.0299)  loss_rpn_box_reg: 0.0256 (0.0467)  time: 0.8487 (1.4927)  data: 0.0028 (0.6527)  lr: 0.001200  max mem: 24032
DONE (t=23.85s).
Accumulating evaluation results...
DONE (t=0.00s).
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.35758
 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=100 ] = 0.56811
 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=100 ] = 0.38769
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.18554
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.37224
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.46157
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=  1 ] = 0.30115
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets= 10 ] = 0.46873
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.48933
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.29127
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.51516
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.62501
2020-02-11 13:48:48,446 maskrcnn_benchmark.trainer INFO: eta: 1:02:40  iter: 39480  loss: 0.5498 (0.6893)  loss_classifier: 0.1668 (0.2365)  loss_box_reg: 0.0896 (0.1149)  loss_mask: 0.2312 (0.2613)  loss_objectness: 0.0186 (0.0299)  loss_rpn_box_reg: 0.0286 (0.0467)  time: 0.8322 (1.4923)  data: 0.0029 (0.6524)  lr: 0.001200  max mem: 24032
2020-02-11 13:49:05,363 maskrcnn_benchmark.trainer INFO: eta: 1:02:10  iter: 39500  loss: 0.5534 (0.6892)  loss_classifier: 0.1796 (0.2365)  loss_box_reg: 0.0863 (0.1149)  loss_mask: 0.2297 (0.2613)  loss_objectness: 0.0144 (0.0298)  loss_rpn_box_reg: 0.0337 (0.0467)  time: 0.8488 (1.4920)  data: 0.0028 (0.6521)  lr: 0.001200  max mem: 24032
Gradient overflow.  Skipping step, loss scaler 0 reducing loss scale to 131072.0
Gradient overflow.  Skipping step, loss scaler 0 reducing loss scale to 131072.0
Gradient overflow.  Skipping step, loss scaler 0 reducing loss scale to 131072.0
Gradient overflow.  Skipping step, loss scaler 0 reducing loss scale to 131072.0
Gradient overflow.  Skipping step, loss scaler 0 reducing loss scale to 131072.0
Gradient overflow.  Skipping step, loss scaler 0 reducing loss scale to 131072.0
Gradient overflow.  Skipping step, loss scaler 0 reducing loss scale to 131072.0
Gradient overflow.  Skipping step, loss scaler 0 reducing loss scale to 131072.0
2020-02-11 13:49:22,252 maskrcnn_benchmark.trainer INFO: eta: 1:01:39  iter: 39520  loss: 0.5387 (0.6891)  loss_classifier: 0.1780 (0.2364)  loss_box_reg: 0.0844 (0.1149)  loss_mask: 0.2262 (0.2613)  loss_objectness: 0.0176 (0.0298)  loss_rpn_box_reg: 0.0292 (0.0467)  time: 0.8400 (1.4917)  data: 0.0031 (0.6518)  lr: 0.001200  max mem: 24032
Loading and preparing results...
resFile is ./inference/coco_2014_val/segm.json
2020-02-11 13:49:39,212 maskrcnn_benchmark.trainer INFO: eta: 1:01:08  iter: 39540  loss: 0.6010 (0.6891)  loss_classifier: 0.1720 (0.2364)  loss_box_reg: 0.1044 (0.1149)  loss_mask: 0.2409 (0.2613)  loss_objectness: 0.0145 (0.0298)  loss_rpn_box_reg: 0.0329 (0.0467)  time: 0.8495 (1.4914)  data: 0.0028 (0.6514)  lr: 0.001200  max mem: 24032
DONE (t=13.98s)
Running per image evaluation...
Evaluate annotation type *segm*
2020-02-11 13:49:56,059 maskrcnn_benchmark.trainer INFO: eta: 1:00:38  iter: 39560  loss: 0.5556 (0.6890)  loss_classifier: 0.1845 (0.2364)  loss_box_reg: 0.0916 (0.1149)  loss_mask: 0.2313 (0.2612)  loss_objectness: 0.0159 (0.0298)  loss_rpn_box_reg: 0.0379 (0.0467)  time: 0.8382 (1.4910)  data: 0.0029 (0.6511)  lr: 0.001200  max mem: 24032
2020-02-11 13:50:13,000 maskrcnn_benchmark.trainer INFO: eta: 1:00:07  iter: 39580  loss: 0.5777 (0.6890)  loss_classifier: 0.1822 (0.2364)  loss_box_reg: 0.0984 (0.1149)  loss_mask: 0.2384 (0.2612)  loss_objectness: 0.0169 (0.0298)  loss_rpn_box_reg: 0.0345 (0.0466)  time: 0.8505 (1.4907)  data: 0.0030 (0.6508)  lr: 0.001200  max mem: 24032
DONE (t=30.97s).
Accumulating evaluation results...
DONE (t=0.00s).
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.32355
 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=100 ] = 0.53602
 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=100 ] = 0.34139
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.13245
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.33566
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.47699
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=  1 ] = 0.28290
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets= 10 ] = 0.42940
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.44630
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.24861
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.47458
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.59715
2020-02-11 13:50:19,359 maskrcnn_benchmark.trainer INFO: bbox mAP: 0.3575773058884139, segm mAP: 0.3235478706050344
:::MLL 1581429019.373 eval_accuracy: {"value": {"accuracy": {"BBOX": 0.3575773058884139, "SEGM": 0.3235478706050344}}, "metadata": {"epoch_num": 46, "file": "tools/train_mlperf.py", "lineno": 99}}
:::MLL 1581429019.374 eval_stop: {"value": null, "metadata": {"epoch_num": 46, "file": "tools/train_mlperf.py", "lineno": 100}}
2020-02-11 13:50:32,123 maskrcnn_benchmark.trainer INFO: eta: 0:59:37  iter: 39600  loss: 0.5702 (0.6889)  loss_classifier: 0.1770 (0.2363)  loss_box_reg: 0.0944 (0.1149)  loss_mask: 0.2408 (0.2612)  loss_objectness: 0.0142 (0.0298)  loss_rpn_box_reg: 0.0326 (0.0466)  time: 0.8472 (1.4904)  data: 0.0029 (0.6504)  lr: 0.001200  max mem: 24032
2020-02-11 13:50:49,013 maskrcnn_benchmark.trainer INFO: eta: 0:59:06  iter: 39620  loss: 0.5537 (0.6888)  loss_classifier: 0.1856 (0.2363)  loss_box_reg: 0.0810 (0.1149)  loss_mask: 0.2274 (0.2612)  loss_objectness: 0.0136 (0.0298)  loss_rpn_box_reg: 0.0316 (0.0466)  time: 0.8431 (1.4901)  data: 0.0029 (0.6501)  lr: 0.001200  max mem: 24032
2020-02-11 13:51:05,831 maskrcnn_benchmark.trainer INFO: eta: 0:58:35  iter: 39640  loss: 0.5593 (0.6888)  loss_classifier: 0.1791 (0.2363)  loss_box_reg: 0.0963 (0.1149)  loss_mask: 0.2454 (0.2612)  loss_objectness: 0.0168 (0.0298)  loss_rpn_box_reg: 0.0332 (0.0466)  time: 0.8383 (1.4898)  data: 0.0031 (0.6498)  lr: 0.001200  max mem: 24032
2020-02-11 13:51:22,740 maskrcnn_benchmark.trainer INFO: eta: 0:58:05  iter: 39660  loss: 0.6268 (0.6888)  loss_classifier: 0.2128 (0.2363)  loss_box_reg: 0.1114 (0.1149)  loss_mask: 0.2502 (0.2612)  loss_objectness: 0.0220 (0.0298)  loss_rpn_box_reg: 0.0320 (0.0466)  time: 0.8466 (1.4895)  data: 0.0030 (0.6495)  lr: 0.001200  max mem: 24032
2020-02-11 13:51:39,669 maskrcnn_benchmark.trainer INFO: eta: 0:57:34  iter: 39680  loss: 0.5958 (0.6887)  loss_classifier: 0.1875 (0.2363)  loss_box_reg: 0.1003 (0.1149)  loss_mask: 0.2456 (0.2612)  loss_objectness: 0.0145 (0.0298)  loss_rpn_box_reg: 0.0364 (0.0466)  time: 0.8447 (1.4891)  data: 0.0030 (0.6491)  lr: 0.001200  max mem: 24032
2020-02-11 13:51:56,607 maskrcnn_benchmark.trainer INFO: eta: 0:57:04  iter: 39700  loss: 0.5916 (0.6887)  loss_classifier: 0.1851 (0.2362)  loss_box_reg: 0.0956 (0.1148)  loss_mask: 0.2313 (0.2612)  loss_objectness: 0.0154 (0.0298)  loss_rpn_box_reg: 0.0328 (0.0466)  time: 0.8477 (1.4888)  data: 0.0029 (0.6488)  lr: 0.001200  max mem: 24032
2020-02-11 13:52:13,617 maskrcnn_benchmark.trainer INFO: eta: 0:56:33  iter: 39720  loss: 0.5188 (0.6886)  loss_classifier: 0.1666 (0.2362)  loss_box_reg: 0.0839 (0.1148)  loss_mask: 0.2264 (0.2612)  loss_objectness: 0.0142 (0.0298)  loss_rpn_box_reg: 0.0291 (0.0466)  time: 0.8516 (1.4885)  data: 0.0029 (0.6485)  lr: 0.001200  max mem: 24032
2020-02-11 13:52:30,578 maskrcnn_benchmark.trainer INFO: eta: 0:56:03  iter: 39740  loss: 0.5705 (0.6885)  loss_classifier: 0.1835 (0.2362)  loss_box_reg: 0.0989 (0.1148)  loss_mask: 0.2362 (0.2612)  loss_objectness: 0.0202 (0.0298)  loss_rpn_box_reg: 0.0340 (0.0466)  time: 0.8450 (1.4882)  data: 0.0029 (0.6482)  lr: 0.001200  max mem: 24032
2020-02-11 13:52:47,565 maskrcnn_benchmark.trainer INFO: eta: 0:55:32  iter: 39760  loss: 0.5717 (0.6885)  loss_classifier: 0.1827 (0.2362)  loss_box_reg: 0.0944 (0.1148)  loss_mask: 0.2401 (0.2611)  loss_objectness: 0.0168 (0.0298)  loss_rpn_box_reg: 0.0380 (0.0466)  time: 0.8469 (1.4878)  data: 0.0030 (0.6478)  lr: 0.001200  max mem: 24032
2020-02-11 13:53:04,520 maskrcnn_benchmark.trainer INFO: eta: 0:55:02  iter: 39780  loss: 0.6000 (0.6884)  loss_classifier: 0.1839 (0.2361)  loss_box_reg: 0.0962 (0.1148)  loss_mask: 0.2442 (0.2611)  loss_objectness: 0.0166 (0.0298)  loss_rpn_box_reg: 0.0317 (0.0466)  time: 0.8463 (1.4875)  data: 0.0030 (0.6475)  lr: 0.001200  max mem: 24032
2020-02-11 13:53:21,460 maskrcnn_benchmark.trainer INFO: eta: 0:54:31  iter: 39800  loss: 0.5762 (0.6884)  loss_classifier: 0.1760 (0.2361)  loss_box_reg: 0.1010 (0.1148)  loss_mask: 0.2414 (0.2611)  loss_objectness: 0.0174 (0.0298)  loss_rpn_box_reg: 0.0386 (0.0466)  time: 0.8436 (1.4872)  data: 0.0031 (0.6472)  lr: 0.001200  max mem: 24032
2020-02-11 13:53:38,404 maskrcnn_benchmark.trainer INFO: eta: 0:54:01  iter: 39820  loss: 0.5457 (0.6883)  loss_classifier: 0.1776 (0.2361)  loss_box_reg: 0.0887 (0.1148)  loss_mask: 0.2272 (0.2611)  loss_objectness: 0.0154 (0.0297)  loss_rpn_box_reg: 0.0334 (0.0466)  time: 0.8479 (1.4869)  data: 0.0030 (0.6469)  lr: 0.001200  max mem: 24032
2020-02-11 13:53:55,183 maskrcnn_benchmark.trainer INFO: eta: 0:53:30  iter: 39840  loss: 0.5632 (0.6883)  loss_classifier: 0.1740 (0.2361)  loss_box_reg: 0.0963 (0.1148)  loss_mask: 0.2283 (0.2611)  loss_objectness: 0.0149 (0.0297)  loss_rpn_box_reg: 0.0309 (0.0466)  time: 0.8414 (1.4865)  data: 0.0029 (0.6465)  lr: 0.001200  max mem: 24032
2020-02-11 13:54:12,029 maskrcnn_benchmark.trainer INFO: eta: 0:53:00  iter: 39860  loss: 0.5833 (0.6882)  loss_classifier: 0.1987 (0.2360)  loss_box_reg: 0.0973 (0.1148)  loss_mask: 0.2371 (0.2611)  loss_objectness: 0.0186 (0.0297)  loss_rpn_box_reg: 0.0409 (0.0466)  time: 0.8356 (1.4862)  data: 0.0030 (0.6462)  lr: 0.001200  max mem: 24032
2020-02-11 13:54:28,978 maskrcnn_benchmark.trainer INFO: eta: 0:52:30  iter: 39880  loss: 0.5847 (0.6882)  loss_classifier: 0.1951 (0.2360)  loss_box_reg: 0.0958 (0.1148)  loss_mask: 0.2326 (0.2611)  loss_objectness: 0.0185 (0.0297)  loss_rpn_box_reg: 0.0341 (0.0466)  time: 0.8471 (1.4859)  data: 0.0030 (0.6459)  lr: 0.001200  max mem: 24032
2020-02-11 13:54:45,934 maskrcnn_benchmark.trainer INFO: eta: 0:51:59  iter: 39900  loss: 0.5656 (0.6881)  loss_classifier: 0.1924 (0.2360)  loss_box_reg: 0.0878 (0.1148)  loss_mask: 0.2432 (0.2611)  loss_objectness: 0.0175 (0.0297)  loss_rpn_box_reg: 0.0250 (0.0466)  time: 0.8442 (1.4856)  data: 0.0029 (0.6456)  lr: 0.001200  max mem: 24032
2020-02-11 13:55:02,840 maskrcnn_benchmark.trainer INFO: eta: 0:51:29  iter: 39920  loss: 0.5914 (0.6881)  loss_classifier: 0.2046 (0.2360)  loss_box_reg: 0.0946 (0.1148)  loss_mask: 0.2397 (0.2611)  loss_objectness: 0.0177 (0.0297)  loss_rpn_box_reg: 0.0295 (0.0466)  time: 0.8447 (1.4853)  data: 0.0031 (0.6452)  lr: 0.001200  max mem: 24032
2020-02-11 13:55:19,828 maskrcnn_benchmark.trainer INFO: eta: 0:50:58  iter: 39940  loss: 0.5799 (0.6880)  loss_classifier: 0.1834 (0.2360)  loss_box_reg: 0.0971 (0.1147)  loss_mask: 0.2329 (0.2610)  loss_objectness: 0.0141 (0.0297)  loss_rpn_box_reg: 0.0330 (0.0466)  time: 0.8498 (1.4849)  data: 0.0029 (0.6449)  lr: 0.001200  max mem: 24032
2020-02-11 13:55:36,787 maskrcnn_benchmark.trainer INFO: eta: 0:50:28  iter: 39960  loss: 0.5794 (0.6880)  loss_classifier: 0.1934 (0.2359)  loss_box_reg: 0.1025 (0.1147)  loss_mask: 0.2385 (0.2610)  loss_objectness: 0.0163 (0.0297)  loss_rpn_box_reg: 0.0338 (0.0466)  time: 0.8492 (1.4846)  data: 0.0031 (0.6446)  lr: 0.001200  max mem: 24032
2020-02-11 13:55:53,644 maskrcnn_benchmark.trainer INFO: eta: 0:49:58  iter: 39980  loss: 0.6158 (0.6879)  loss_classifier: 0.1936 (0.2359)  loss_box_reg: 0.1074 (0.1147)  loss_mask: 0.2514 (0.2610)  loss_objectness: 0.0190 (0.0297)  loss_rpn_box_reg: 0.0346 (0.0466)  time: 0.8455 (1.4843)  data: 0.0031 (0.6443)  lr: 0.001200  max mem: 24032
2020-02-11 13:56:10,618 maskrcnn_benchmark.trainer INFO: eta: 0:49:27  iter: 40000  loss: 0.6339 (0.6879)  loss_classifier: 0.1933 (0.2359)  loss_box_reg: 0.1139 (0.1147)  loss_mask: 0.2563 (0.2610)  loss_objectness: 0.0170 (0.0297)  loss_rpn_box_reg: 0.0385 (0.0466)  time: 0.8508 (1.4840)  data: 0.0031 (0.6440)  lr: 0.001200  max mem: 24032
2020-02-11 13:56:27,625 maskrcnn_benchmark.trainer INFO: eta: 0:48:57  iter: 40020  loss: 0.5939 (0.6878)  loss_classifier: 0.1969 (0.2359)  loss_box_reg: 0.1007 (0.1147)  loss_mask: 0.2315 (0.2610)  loss_objectness: 0.0162 (0.0297)  loss_rpn_box_reg: 0.0323 (0.0466)  time: 0.8523 (1.4837)  data: 0.0029 (0.6436)  lr: 0.001200  max mem: 24032
2020-02-11 13:56:44,644 maskrcnn_benchmark.trainer INFO: eta: 0:48:27  iter: 40040  loss: 0.5463 (0.6878)  loss_classifier: 0.1897 (0.2358)  loss_box_reg: 0.0889 (0.1147)  loss_mask: 0.2298 (0.2610)  loss_objectness: 0.0140 (0.0297)  loss_rpn_box_reg: 0.0261 (0.0466)  time: 0.8469 (1.4834)  data: 0.0030 (0.6433)  lr: 0.001200  max mem: 24032
2020-02-11 13:57:01,587 maskrcnn_benchmark.trainer INFO: eta: 0:47:57  iter: 40060  loss: 0.6031 (0.6878)  loss_classifier: 0.1910 (0.2358)  loss_box_reg: 0.1074 (0.1147)  loss_mask: 0.2526 (0.2610)  loss_objectness: 0.0164 (0.0297)  loss_rpn_box_reg: 0.0365 (0.0466)  time: 0.8485 (1.4830)  data: 0.0030 (0.6430)  lr: 0.001200  max mem: 24032
2020-02-11 13:57:18,473 maskrcnn_benchmark.trainer INFO: eta: 0:47:26  iter: 40080  loss: 0.5837 (0.6877)  loss_classifier: 0.1877 (0.2358)  loss_box_reg: 0.0966 (0.1147)  loss_mask: 0.2383 (0.2610)  loss_objectness: 0.0146 (0.0297)  loss_rpn_box_reg: 0.0373 (0.0465)  time: 0.8401 (1.4827)  data: 0.0030 (0.6427)  lr: 0.001200  max mem: 24032
2020-02-11 13:57:35,406 maskrcnn_benchmark.trainer INFO: eta: 0:46:56  iter: 40100  loss: 0.5574 (0.6876)  loss_classifier: 0.1753 (0.2358)  loss_box_reg: 0.0962 (0.1147)  loss_mask: 0.2353 (0.2610)  loss_objectness: 0.0158 (0.0297)  loss_rpn_box_reg: 0.0299 (0.0465)  time: 0.8406 (1.4824)  data: 0.0031 (0.6424)  lr: 0.001200  max mem: 24032
2020-02-11 13:57:52,314 maskrcnn_benchmark.trainer INFO: eta: 0:46:26  iter: 40120  loss: 0.6010 (0.6876)  loss_classifier: 0.1802 (0.2358)  loss_box_reg: 0.0910 (0.1147)  loss_mask: 0.2460 (0.2610)  loss_objectness: 0.0165 (0.0297)  loss_rpn_box_reg: 0.0351 (0.0465)  time: 0.8458 (1.4821)  data: 0.0031 (0.6420)  lr: 0.001200  max mem: 24032
2020-02-11 13:58:09,291 maskrcnn_benchmark.trainer INFO: eta: 0:45:56  iter: 40140  loss: 0.5980 (0.6875)  loss_classifier: 0.1896 (0.2357)  loss_box_reg: 0.1005 (0.1147)  loss_mask: 0.2503 (0.2610)  loss_objectness: 0.0156 (0.0297)  loss_rpn_box_reg: 0.0288 (0.0465)  time: 0.8544 (1.4818)  data: 0.0030 (0.6417)  lr: 0.001200  max mem: 24032
2020-02-11 13:58:26,342 maskrcnn_benchmark.trainer INFO: eta: 0:45:25  iter: 40160  loss: 0.5880 (0.6875)  loss_classifier: 0.1999 (0.2357)  loss_box_reg: 0.0984 (0.1147)  loss_mask: 0.2389 (0.2609)  loss_objectness: 0.0171 (0.0296)  loss_rpn_box_reg: 0.0324 (0.0465)  time: 0.8559 (1.4815)  data: 0.0030 (0.6414)  lr: 0.001200  max mem: 24032
2020-02-11 13:58:43,183 maskrcnn_benchmark.trainer INFO: eta: 0:44:55  iter: 40180  loss: 0.5534 (0.6874)  loss_classifier: 0.1603 (0.2357)  loss_box_reg: 0.0855 (0.1147)  loss_mask: 0.2292 (0.2609)  loss_objectness: 0.0154 (0.0296)  loss_rpn_box_reg: 0.0345 (0.0465)  time: 0.8401 (1.4811)  data: 0.0029 (0.6411)  lr: 0.001200  max mem: 24032
2020-02-11 13:59:00,010 maskrcnn_benchmark.trainer INFO: eta: 0:44:25  iter: 40200  loss: 0.5471 (0.6874)  loss_classifier: 0.1715 (0.2357)  loss_box_reg: 0.0882 (0.1146)  loss_mask: 0.2377 (0.2609)  loss_objectness: 0.0163 (0.0296)  loss_rpn_box_reg: 0.0320 (0.0465)  time: 0.8433 (1.4808)  data: 0.0030 (0.6408)  lr: 0.001200  max mem: 24032
2020-02-11 13:59:16,935 maskrcnn_benchmark.trainer INFO: eta: 0:43:55  iter: 40220  loss: 0.6065 (0.6873)  loss_classifier: 0.1874 (0.2356)  loss_box_reg: 0.1132 (0.1146)  loss_mask: 0.2502 (0.2609)  loss_objectness: 0.0193 (0.0296)  loss_rpn_box_reg: 0.0328 (0.0465)  time: 0.8487 (1.4805)  data: 0.0031 (0.6405)  lr: 0.001200  max mem: 24032
:::MLL 1581429566.729 epoch_stop: {"value": null, "metadata": {"epoch_num": 47, "file": "tools/train_mlperf.py", "lineno": 75}}
:::MLL 1581429566.730 block_stop: {"value": null, "metadata": {"first_epoch_num": 47, "file": "tools/train_mlperf.py", "lineno": 76}}
:::MLL 1581429566.730 eval_start: {"value": null, "metadata": {"epoch_num": 47, "file": "tools/train_mlperf.py", "lineno": 77}}
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
2020-02-11 13:59:27,443 maskrcnn_benchmark.data.build WARNING: When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
Done (t=3.89s)
creating index...
Done (t=3.92s)
creating index...
Done (t=3.84s)
creating index...
Done (t=3.85s)
creating index...
index created!
Done (t=3.95s)
creating index...
Done (t=3.89s)
creating index...
  0%|                                                  | 0/2532 [00:00<?, ?it/s]Done (t=4.03s)
creating index...
index created!
index created!
Done (t=4.18s)
creating index...
index created!
index created!
  0%|                                                  | 0/2532 [00:00<?, ?it/s]index created!
  0%|                                                  | 0/2532 [00:00<?, ?it/s]index created!
  0%|                                                  | 0/2532 [00:00<?, ?it/s]index created!
  0%|                                                  | 0/2532 [00:00<?, ?it/s]2020-02-11 13:59:32,078 maskrcnn_benchmark.inference INFO: Start evaluation on coco_2014_val dataset(40504 images).
 99%|██████████████████████████████████████▍| 2497/2532 [03:45<00:03, 11.49it/s]
100%|███████████████████████████████████████| 2532/2532 [03:48<00:00, 11.10it/s]
 96%|█████████████████████████████████████▍ | 2431/2532 [03:48<00:10,  9.99it/s]
100%|███████████████████████████████████████| 2532/2532 [03:49<00:00, 11.04it/s]
100%|███████████████████████████████████████| 2532/2532 [03:50<00:00, 10.98it/s]
 99%|██████████████████████████████████████▋| 2510/2532 [03:51<00:01, 11.46it/s]
 99%|██████████████████████████████████████▍| 2499/2532 [03:54<00:03, 10.74it/s]
100%|███████████████████████████████████████| 2532/2532 [03:59<00:00, 10.59it/s]
2020-02-11 14:03:31,243 maskrcnn_benchmark.inference INFO: Total inference time: 0:03:59.164550 (0.04723771480663525 s / img per device, on 8 devices)
2020-02-11 14:03:32,248 maskrcnn_benchmark.inference INFO: Preparing results for COCO format
2020-02-11 14:03:32,248 maskrcnn_benchmark.inference INFO: Preparing bbox results
2020-02-11 14:03:33,751 maskrcnn_benchmark.inference INFO: Preparing segm results
:::MLL 1581430040.370 block_start: {"value": null, "metadata": {"first_epoch_num": 48, "epoch_count": 1, "file": "tools/train_mlperf.py", "lineno": 134}}
:::MLL 1581430040.373 epoch_start: {"value": null, "metadata": {"epoch_num": 48, "file": "tools/train_mlperf.py", "lineno": 135}}
2020-02-11 14:07:26,988 maskrcnn_benchmark.trainer INFO: eta: 0:43:45  iter: 40240  loss: 0.5852 (0.6873)  loss_classifier: 0.1783 (0.2356)  loss_box_reg: 0.0931 (0.1146)  loss_mask: 0.2395 (0.2609)  loss_objectness: 0.0148 (0.0296)  loss_rpn_box_reg: 0.0341 (0.0465)  time: 0.8503 (1.4919)  data: 0.0031 (0.6519)  lr: 0.001200  max mem: 24032
Evaluating predictions
creating index...
GT annotations already exist!
2020-02-11 14:07:43,941 maskrcnn_benchmark.trainer INFO: eta: 0:43:15  iter: 40260  loss: 0.5920 (0.6873)  loss_classifier: 0.2003 (0.2356)  loss_box_reg: 0.1041 (0.1146)  loss_mask: 0.2439 (0.2609)  loss_objectness: 0.0177 (0.0296)  loss_rpn_box_reg: 0.0402 (0.0465)  time: 0.8449 (1.4916)  data: 0.0030 (0.6516)  lr: 0.001200  max mem: 24032
2020-02-11 14:08:00,848 maskrcnn_benchmark.trainer INFO: eta: 0:42:45  iter: 40280  loss: 0.5786 (0.6872)  loss_classifier: 0.2136 (0.2356)  loss_box_reg: 0.0936 (0.1146)  loss_mask: 0.2477 (0.2609)  loss_objectness: 0.0167 (0.0296)  loss_rpn_box_reg: 0.0349 (0.0465)  time: 0.8442 (1.4913)  data: 0.0029 (0.6513)  lr: 0.001200  max mem: 24032
Loading and preparing results...
resFile is ./inference/coco_2014_val/bbox.json
DONE (t=5.96s)
Running per image evaluation...
Evaluate annotation type *bbox*
2020-02-11 14:08:17,825 maskrcnn_benchmark.trainer INFO: eta: 0:42:14  iter: 40300  loss: 0.5772 (0.6872)  loss_classifier: 0.1913 (0.2356)  loss_box_reg: 0.1025 (0.1146)  loss_mask: 0.2476 (0.2609)  loss_objectness: 0.0160 (0.0296)  loss_rpn_box_reg: 0.0335 (0.0465)  time: 0.8465 (1.4910)  data: 0.0030 (0.6509)  lr: 0.001200  max mem: 24032
2020-02-11 14:08:34,842 maskrcnn_benchmark.trainer INFO: eta: 0:41:44  iter: 40320  loss: 0.5301 (0.6871)  loss_classifier: 0.1677 (0.2355)  loss_box_reg: 0.0860 (0.1146)  loss_mask: 0.2319 (0.2609)  loss_objectness: 0.0176 (0.0296)  loss_rpn_box_reg: 0.0362 (0.0465)  time: 0.8494 (1.4907)  data: 0.0028 (0.6506)  lr: 0.001200  max mem: 24032
DONE (t=24.59s).
Accumulating evaluation results...
DONE (t=0.00s).
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.35693
 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=100 ] = 0.56740
 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=100 ] = 0.38678
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.18420
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.37257
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.46202
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=  1 ] = 0.30122
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets= 10 ] = 0.46800
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.48832
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.28933
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.51274
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.62788
2020-02-11 14:08:51,635 maskrcnn_benchmark.trainer INFO: eta: 0:41:13  iter: 40340  loss: 0.5490 (0.6870)  loss_classifier: 0.1767 (0.2355)  loss_box_reg: 0.0895 (0.1146)  loss_mask: 0.2287 (0.2609)  loss_objectness: 0.0140 (0.0296)  loss_rpn_box_reg: 0.0347 (0.0465)  time: 0.8379 (1.4903)  data: 0.0029 (0.6503)  lr: 0.001200  max mem: 24032
2020-02-11 14:09:08,624 maskrcnn_benchmark.trainer INFO: eta: 0:40:43  iter: 40360  loss: 0.5643 (0.6870)  loss_classifier: 0.1620 (0.2355)  loss_box_reg: 0.0890 (0.1146)  loss_mask: 0.2405 (0.2608)  loss_objectness: 0.0136 (0.0296)  loss_rpn_box_reg: 0.0351 (0.0465)  time: 0.8490 (1.4900)  data: 0.0029 (0.6500)  lr: 0.001200  max mem: 24032
2020-02-11 14:09:25,708 maskrcnn_benchmark.trainer INFO: eta: 0:40:13  iter: 40380  loss: 0.5349 (0.6869)  loss_classifier: 0.1686 (0.2354)  loss_box_reg: 0.0849 (0.1146)  loss_mask: 0.2421 (0.2608)  loss_objectness: 0.0151 (0.0296)  loss_rpn_box_reg: 0.0272 (0.0465)  time: 0.8561 (1.4897)  data: 0.0029 (0.6497)  lr: 0.001200  max mem: 24032
Loading and preparing results...
resFile is ./inference/coco_2014_val/segm.json
2020-02-11 14:09:42,753 maskrcnn_benchmark.trainer INFO: eta: 0:39:43  iter: 40400  loss: 0.5696 (0.6868)  loss_classifier: 0.1680 (0.2354)  loss_box_reg: 0.0900 (0.1146)  loss_mask: 0.2377 (0.2608)  loss_objectness: 0.0143 (0.0296)  loss_rpn_box_reg: 0.0321 (0.0465)  time: 0.8555 (1.4894)  data: 0.0028 (0.6493)  lr: 0.001200  max mem: 24032
DONE (t=14.00s)
Running per image evaluation...
Evaluate annotation type *segm*
2020-02-11 14:09:59,857 maskrcnn_benchmark.trainer INFO: eta: 0:39:12  iter: 40420  loss: 0.5785 (0.6868)  loss_classifier: 0.1847 (0.2354)  loss_box_reg: 0.1007 (0.1146)  loss_mask: 0.2452 (0.2608)  loss_objectness: 0.0147 (0.0296)  loss_rpn_box_reg: 0.0418 (0.0465)  time: 0.8539 (1.4891)  data: 0.0030 (0.6490)  lr: 0.001200  max mem: 24032
DONE (t=30.67s).
Accumulating evaluation results...
DONE (t=0.00s).
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.32337
 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=100 ] = 0.53539
 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=100 ] = 0.34106
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.13171
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.33497
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.47733
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=  1 ] = 0.28315
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets= 10 ] = 0.42880
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.44547
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.24587
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.47263
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.60045
2020-02-11 14:10:18,536 maskrcnn_benchmark.trainer INFO: bbox mAP: 0.3569314552803612, segm mAP: 0.3233702123695111
:::MLL 1581430218.537 eval_accuracy: {"value": {"accuracy": {"BBOX": 0.3569314552803612, "SEGM": 0.3233702123695111}}, "metadata": {"epoch_num": 47, "file": "tools/train_mlperf.py", "lineno": 99}}
:::MLL 1581430218.537 eval_stop: {"value": null, "metadata": {"epoch_num": 47, "file": "tools/train_mlperf.py", "lineno": 100}}
2020-02-11 14:10:19,406 maskrcnn_benchmark.trainer INFO: eta: 0:38:42  iter: 40440  loss: 0.6339 (0.6868)  loss_classifier: 0.2069 (0.2354)  loss_box_reg: 0.1093 (0.1145)  loss_mask: 0.2517 (0.2608)  loss_objectness: 0.0206 (0.0296)  loss_rpn_box_reg: 0.0425 (0.0465)  time: 0.8469 (1.4888)  data: 0.0031 (0.6487)  lr: 0.001200  max mem: 24032
2020-02-11 14:10:36,262 maskrcnn_benchmark.trainer INFO: eta: 0:38:12  iter: 40460  loss: 0.6130 (0.6867)  loss_classifier: 0.1764 (0.2354)  loss_box_reg: 0.0892 (0.1145)  loss_mask: 0.2458 (0.2608)  loss_objectness: 0.0198 (0.0296)  loss_rpn_box_reg: 0.0426 (0.0465)  time: 0.8397 (1.4885)  data: 0.0030 (0.6484)  lr: 0.001200  max mem: 24032
2020-02-11 14:10:53,123 maskrcnn_benchmark.trainer INFO: eta: 0:37:42  iter: 40480  loss: 0.5677 (0.6867)  loss_classifier: 0.1778 (0.2353)  loss_box_reg: 0.0891 (0.1145)  loss_mask: 0.2463 (0.2608)  loss_objectness: 0.0162 (0.0296)  loss_rpn_box_reg: 0.0333 (0.0465)  time: 0.8436 (1.4882)  data: 0.0029 (0.6481)  lr: 0.001200  max mem: 24032
2020-02-11 14:11:10,028 maskrcnn_benchmark.trainer INFO: eta: 0:37:11  iter: 40500  loss: 0.5806 (0.6866)  loss_classifier: 0.1743 (0.2353)  loss_box_reg: 0.0993 (0.1145)  loss_mask: 0.2342 (0.2608)  loss_objectness: 0.0141 (0.0295)  loss_rpn_box_reg: 0.0330 (0.0465)  time: 0.8409 (1.4879)  data: 0.0030 (0.6477)  lr: 0.001200  max mem: 24032
2020-02-11 14:11:26,875 maskrcnn_benchmark.trainer INFO: eta: 0:36:41  iter: 40520  loss: 0.5581 (0.6865)  loss_classifier: 0.1641 (0.2353)  loss_box_reg: 0.0855 (0.1145)  loss_mask: 0.2371 (0.2608)  loss_objectness: 0.0146 (0.0295)  loss_rpn_box_reg: 0.0294 (0.0465)  time: 0.8432 (1.4876)  data: 0.0029 (0.6474)  lr: 0.001200  max mem: 24032
2020-02-11 14:11:43,774 maskrcnn_benchmark.trainer INFO: eta: 0:36:11  iter: 40540  loss: 0.5544 (0.6865)  loss_classifier: 0.1654 (0.2353)  loss_box_reg: 0.0908 (0.1145)  loss_mask: 0.2345 (0.2607)  loss_objectness: 0.0161 (0.0295)  loss_rpn_box_reg: 0.0336 (0.0465)  time: 0.8449 (1.4872)  data: 0.0030 (0.6471)  lr: 0.001200  max mem: 24032
2020-02-11 14:12:00,657 maskrcnn_benchmark.trainer INFO: eta: 0:35:41  iter: 40560  loss: 0.5770 (0.6864)  loss_classifier: 0.1809 (0.2352)  loss_box_reg: 0.0914 (0.1145)  loss_mask: 0.2375 (0.2607)  loss_objectness: 0.0175 (0.0295)  loss_rpn_box_reg: 0.0340 (0.0465)  time: 0.8423 (1.4869)  data: 0.0030 (0.6468)  lr: 0.001200  max mem: 24032
2020-02-11 14:12:17,685 maskrcnn_benchmark.trainer INFO: eta: 0:35:10  iter: 40580  loss: 0.5346 (0.6864)  loss_classifier: 0.1732 (0.2352)  loss_box_reg: 0.0895 (0.1145)  loss_mask: 0.2333 (0.2607)  loss_objectness: 0.0162 (0.0295)  loss_rpn_box_reg: 0.0309 (0.0464)  time: 0.8525 (1.4866)  data: 0.0030 (0.6465)  lr: 0.001200  max mem: 24032
2020-02-11 14:12:34,514 maskrcnn_benchmark.trainer INFO: eta: 0:34:40  iter: 40600  loss: 0.5463 (0.6863)  loss_classifier: 0.1699 (0.2352)  loss_box_reg: 0.0814 (0.1145)  loss_mask: 0.2272 (0.2607)  loss_objectness: 0.0139 (0.0295)  loss_rpn_box_reg: 0.0288 (0.0464)  time: 0.8425 (1.4863)  data: 0.0030 (0.6462)  lr: 0.001200  max mem: 24032
2020-02-11 14:12:51,431 maskrcnn_benchmark.trainer INFO: eta: 0:34:10  iter: 40620  loss: 0.5865 (0.6862)  loss_classifier: 0.1898 (0.2351)  loss_box_reg: 0.0982 (0.1145)  loss_mask: 0.2361 (0.2607)  loss_objectness: 0.0140 (0.0295)  loss_rpn_box_reg: 0.0311 (0.0464)  time: 0.8468 (1.4860)  data: 0.0030 (0.6458)  lr: 0.001200  max mem: 24032
2020-02-11 14:13:08,414 maskrcnn_benchmark.trainer INFO: eta: 0:33:40  iter: 40640  loss: 0.6066 (0.6862)  loss_classifier: 0.2017 (0.2351)  loss_box_reg: 0.1066 (0.1145)  loss_mask: 0.2447 (0.2607)  loss_objectness: 0.0194 (0.0295)  loss_rpn_box_reg: 0.0401 (0.0464)  time: 0.8448 (1.4857)  data: 0.0030 (0.6455)  lr: 0.001200  max mem: 24032
2020-02-11 14:13:25,314 maskrcnn_benchmark.trainer INFO: eta: 0:33:10  iter: 40660  loss: 0.5795 (0.6862)  loss_classifier: 0.1841 (0.2351)  loss_box_reg: 0.0956 (0.1144)  loss_mask: 0.2378 (0.2607)  loss_objectness: 0.0132 (0.0295)  loss_rpn_box_reg: 0.0307 (0.0464)  time: 0.8455 (1.4853)  data: 0.0029 (0.6452)  lr: 0.001200  max mem: 24032
2020-02-11 14:13:42,132 maskrcnn_benchmark.trainer INFO: eta: 0:32:40  iter: 40680  loss: 0.5928 (0.6861)  loss_classifier: 0.1909 (0.2351)  loss_box_reg: 0.0992 (0.1144)  loss_mask: 0.2406 (0.2607)  loss_objectness: 0.0176 (0.0295)  loss_rpn_box_reg: 0.0338 (0.0464)  time: 0.8435 (1.4850)  data: 0.0031 (0.6449)  lr: 0.001200  max mem: 24032
2020-02-11 14:13:59,008 maskrcnn_benchmark.trainer INFO: eta: 0:32:10  iter: 40700  loss: 0.5846 (0.6861)  loss_classifier: 0.1830 (0.2351)  loss_box_reg: 0.0943 (0.1144)  loss_mask: 0.2416 (0.2607)  loss_objectness: 0.0169 (0.0295)  loss_rpn_box_reg: 0.0373 (0.0464)  time: 0.8405 (1.4847)  data: 0.0030 (0.6446)  lr: 0.001200  max mem: 24032
2020-02-11 14:14:15,928 maskrcnn_benchmark.trainer INFO: eta: 0:31:40  iter: 40720  loss: 0.5562 (0.6860)  loss_classifier: 0.1749 (0.2350)  loss_box_reg: 0.0835 (0.1144)  loss_mask: 0.2382 (0.2607)  loss_objectness: 0.0159 (0.0295)  loss_rpn_box_reg: 0.0340 (0.0464)  time: 0.8456 (1.4844)  data: 0.0030 (0.6443)  lr: 0.001200  max mem: 24032
2020-02-11 14:14:32,796 maskrcnn_benchmark.trainer INFO: eta: 0:31:09  iter: 40740  loss: 0.5643 (0.6860)  loss_classifier: 0.1792 (0.2350)  loss_box_reg: 0.0945 (0.1144)  loss_mask: 0.2328 (0.2606)  loss_objectness: 0.0141 (0.0295)  loss_rpn_box_reg: 0.0364 (0.0464)  time: 0.8408 (1.4841)  data: 0.0030 (0.6439)  lr: 0.001200  max mem: 24032
2020-02-11 14:14:49,720 maskrcnn_benchmark.trainer INFO: eta: 0:30:39  iter: 40760  loss: 0.5592 (0.6859)  loss_classifier: 0.1941 (0.2350)  loss_box_reg: 0.0948 (0.1144)  loss_mask: 0.2358 (0.2606)  loss_objectness: 0.0145 (0.0295)  loss_rpn_box_reg: 0.0352 (0.0464)  time: 0.8467 (1.4838)  data: 0.0030 (0.6436)  lr: 0.001200  max mem: 24032
2020-02-11 14:15:06,561 maskrcnn_benchmark.trainer INFO: eta: 0:30:09  iter: 40780  loss: 0.5711 (0.6859)  loss_classifier: 0.1779 (0.2350)  loss_box_reg: 0.0838 (0.1144)  loss_mask: 0.2341 (0.2606)  loss_objectness: 0.0191 (0.0295)  loss_rpn_box_reg: 0.0333 (0.0464)  time: 0.8430 (1.4835)  data: 0.0031 (0.6433)  lr: 0.001200  max mem: 24032
2020-02-11 14:15:23,424 maskrcnn_benchmark.trainer INFO: eta: 0:29:39  iter: 40800  loss: 0.5849 (0.6858)  loss_classifier: 0.1857 (0.2349)  loss_box_reg: 0.0975 (0.1144)  loss_mask: 0.2324 (0.2606)  loss_objectness: 0.0191 (0.0295)  loss_rpn_box_reg: 0.0377 (0.0464)  time: 0.8435 (1.4831)  data: 0.0031 (0.6430)  lr: 0.001200  max mem: 24032
2020-02-11 14:15:40,357 maskrcnn_benchmark.trainer INFO: eta: 0:29:09  iter: 40820  loss: 0.5634 (0.6858)  loss_classifier: 0.1924 (0.2349)  loss_box_reg: 0.0961 (0.1144)  loss_mask: 0.2320 (0.2606)  loss_objectness: 0.0178 (0.0295)  loss_rpn_box_reg: 0.0332 (0.0464)  time: 0.8492 (1.4828)  data: 0.0031 (0.6427)  lr: 0.001200  max mem: 24032
2020-02-11 14:15:57,225 maskrcnn_benchmark.trainer INFO: eta: 0:28:39  iter: 40840  loss: 0.4886 (0.6857)  loss_classifier: 0.1676 (0.2349)  loss_box_reg: 0.0809 (0.1144)  loss_mask: 0.2268 (0.2606)  loss_objectness: 0.0131 (0.0294)  loss_rpn_box_reg: 0.0279 (0.0464)  time: 0.8380 (1.4825)  data: 0.0030 (0.6424)  lr: 0.001200  max mem: 24032
2020-02-11 14:16:14,275 maskrcnn_benchmark.trainer INFO: eta: 0:28:09  iter: 40860  loss: 0.6245 (0.6857)  loss_classifier: 0.1995 (0.2349)  loss_box_reg: 0.0928 (0.1144)  loss_mask: 0.2357 (0.2606)  loss_objectness: 0.0190 (0.0294)  loss_rpn_box_reg: 0.0434 (0.0464)  time: 0.8523 (1.4822)  data: 0.0032 (0.6421)  lr: 0.001200  max mem: 24032
2020-02-11 14:16:31,248 maskrcnn_benchmark.trainer INFO: eta: 0:27:39  iter: 40880  loss: 0.5608 (0.6856)  loss_classifier: 0.1702 (0.2348)  loss_box_reg: 0.0869 (0.1144)  loss_mask: 0.2448 (0.2606)  loss_objectness: 0.0160 (0.0294)  loss_rpn_box_reg: 0.0307 (0.0464)  time: 0.8510 (1.4819)  data: 0.0030 (0.6418)  lr: 0.001200  max mem: 24032
2020-02-11 14:16:48,140 maskrcnn_benchmark.trainer INFO: eta: 0:27:09  iter: 40900  loss: 0.5394 (0.6855)  loss_classifier: 0.1708 (0.2348)  loss_box_reg: 0.0934 (0.1143)  loss_mask: 0.2351 (0.2606)  loss_objectness: 0.0142 (0.0294)  loss_rpn_box_reg: 0.0284 (0.0464)  time: 0.8427 (1.4816)  data: 0.0031 (0.6414)  lr: 0.001200  max mem: 24032
2020-02-11 14:17:05,032 maskrcnn_benchmark.trainer INFO: eta: 0:26:39  iter: 40920  loss: 0.6285 (0.6855)  loss_classifier: 0.1985 (0.2348)  loss_box_reg: 0.1109 (0.1143)  loss_mask: 0.2432 (0.2606)  loss_objectness: 0.0174 (0.0294)  loss_rpn_box_reg: 0.0368 (0.0464)  time: 0.8468 (1.4813)  data: 0.0032 (0.6411)  lr: 0.001200  max mem: 24032
2020-02-11 14:17:21,907 maskrcnn_benchmark.trainer INFO: eta: 0:26:09  iter: 40940  loss: 0.6258 (0.6855)  loss_classifier: 0.1968 (0.2348)  loss_box_reg: 0.1010 (0.1143)  loss_mask: 0.2449 (0.2605)  loss_objectness: 0.0189 (0.0294)  loss_rpn_box_reg: 0.0446 (0.0464)  time: 0.8449 (1.4810)  data: 0.0031 (0.6408)  lr: 0.001200  max mem: 24032
2020-02-11 14:17:38,946 maskrcnn_benchmark.trainer INFO: eta: 0:25:39  iter: 40960  loss: 0.5839 (0.6854)  loss_classifier: 0.1966 (0.2348)  loss_box_reg: 0.1040 (0.1143)  loss_mask: 0.2327 (0.2605)  loss_objectness: 0.0159 (0.0294)  loss_rpn_box_reg: 0.0308 (0.0464)  time: 0.8511 (1.4807)  data: 0.0031 (0.6405)  lr: 0.001200  max mem: 24032
2020-02-11 14:17:55,868 maskrcnn_benchmark.trainer INFO: eta: 0:25:09  iter: 40980  loss: 0.5614 (0.6854)  loss_classifier: 0.1808 (0.2347)  loss_box_reg: 0.0838 (0.1143)  loss_mask: 0.2366 (0.2605)  loss_objectness: 0.0155 (0.0294)  loss_rpn_box_reg: 0.0401 (0.0464)  time: 0.8454 (1.4804)  data: 0.0031 (0.6402)  lr: 0.001200  max mem: 24032
2020-02-11 14:18:12,767 maskrcnn_benchmark.trainer INFO: eta: 0:24:40  iter: 41000  loss: 0.5988 (0.6853)  loss_classifier: 0.1932 (0.2347)  loss_box_reg: 0.1052 (0.1143)  loss_mask: 0.2360 (0.2605)  loss_objectness: 0.0201 (0.0294)  loss_rpn_box_reg: 0.0422 (0.0464)  time: 0.8429 (1.4800)  data: 0.0031 (0.6399)  lr: 0.001200  max mem: 24032
2020-02-11 14:18:29,668 maskrcnn_benchmark.trainer INFO: eta: 0:24:10  iter: 41020  loss: 0.5240 (0.6853)  loss_classifier: 0.1649 (0.2347)  loss_box_reg: 0.0786 (0.1143)  loss_mask: 0.2358 (0.2605)  loss_objectness: 0.0143 (0.0294)  loss_rpn_box_reg: 0.0400 (0.0464)  time: 0.8423 (1.4797)  data: 0.0030 (0.6396)  lr: 0.001200  max mem: 24032
2020-02-11 14:18:46,617 maskrcnn_benchmark.trainer INFO: eta: 0:23:40  iter: 41040  loss: 0.5023 (0.6852)  loss_classifier: 0.1664 (0.2347)  loss_box_reg: 0.0849 (0.1143)  loss_mask: 0.2198 (0.2605)  loss_objectness: 0.0140 (0.0294)  loss_rpn_box_reg: 0.0292 (0.0464)  time: 0.8516 (1.4794)  data: 0.0029 (0.6393)  lr: 0.001200  max mem: 24032
2020-02-11 14:19:03,587 maskrcnn_benchmark.trainer INFO: eta: 0:23:10  iter: 41060  loss: 0.5957 (0.6852)  loss_classifier: 0.1940 (0.2346)  loss_box_reg: 0.1041 (0.1143)  loss_mask: 0.2437 (0.2605)  loss_objectness: 0.0164 (0.0294)  loss_rpn_box_reg: 0.0382 (0.0464)  time: 0.8472 (1.4791)  data: 0.0032 (0.6390)  lr: 0.001200  max mem: 24032
2020-02-11 14:19:20,435 maskrcnn_benchmark.trainer INFO: eta: 0:22:40  iter: 41080  loss: 0.5127 (0.6851)  loss_classifier: 0.1691 (0.2346)  loss_box_reg: 0.0791 (0.1143)  loss_mask: 0.2218 (0.2605)  loss_objectness: 0.0112 (0.0294)  loss_rpn_box_reg: 0.0323 (0.0464)  time: 0.8371 (1.4788)  data: 0.0031 (0.6386)  lr: 0.001200  max mem: 24032
:::MLL 1581430767.013 epoch_stop: {"value": null, "metadata": {"epoch_num": 48, "file": "tools/train_mlperf.py", "lineno": 75}}
:::MLL 1581430767.014 block_stop: {"value": null, "metadata": {"first_epoch_num": 48, "file": "tools/train_mlperf.py", "lineno": 76}}
:::MLL 1581430767.014 eval_start: {"value": null, "metadata": {"epoch_num": 48, "file": "tools/train_mlperf.py", "lineno": 77}}
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
2020-02-11 14:19:27,571 maskrcnn_benchmark.data.build WARNING: When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
Done (t=3.93s)
creating index...
Done (t=3.87s)
creating index...
Done (t=3.92s)
creating index...
Done (t=3.98s)
creating index...
Done (t=3.87s)
creating index...
Done (t=3.96s)
creating index...
Done (t=3.94s)
creating index...
index created!
Done (t=3.94s)
creating index...
index created!
index created!
  0%|                                                  | 0/2532 [00:00<?, ?it/s]2020-02-11 14:19:31,911 maskrcnn_benchmark.inference INFO: Start evaluation on coco_2014_val dataset(40504 images).
  0%|                                                  | 0/2532 [00:00<?, ?it/s]index created!
  0%|                                                  | 0/2532 [00:00<?, ?it/s]index created!
index created!
index created!
index created!
100%|███████████████████████████████████████| 2532/2532 [03:46<00:00, 11.18it/s]
100%|███████████████████████████████████████| 2532/2532 [03:48<00:00, 11.09it/s]
100%|███████████████████████████████████████| 2532/2532 [03:48<00:00, 11.07it/s]
100%|███████████████████████████████████████| 2532/2532 [03:49<00:00, 11.04it/s]
100%|███████████████████████████████████████| 2532/2532 [03:49<00:00, 11.04it/s]
100%|██████████████████████████████████████▉| 2531/2532 [03:52<00:00, 11.96it/s]
100%|███████████████████████████████████████| 2532/2532 [03:52<00:00, 10.88it/s]
100%|███████████████████████████████████████| 2532/2532 [03:53<00:00, 10.82it/s]
2020-02-11 14:23:25,934 maskrcnn_benchmark.inference INFO: Total inference time: 0:03:54.023017 (0.0462222036203094 s / img per device, on 8 devices)
2020-02-11 14:23:26,953 maskrcnn_benchmark.inference INFO: Preparing results for COCO format
2020-02-11 14:23:26,953 maskrcnn_benchmark.inference INFO: Preparing bbox results
2020-02-11 14:23:28,455 maskrcnn_benchmark.inference INFO: Preparing segm results
:::MLL 1581431234.110 block_start: {"value": null, "metadata": {"first_epoch_num": 49, "epoch_count": 1, "file": "tools/train_mlperf.py", "lineno": 134}}
:::MLL 1581431234.112 epoch_start: {"value": null, "metadata": {"epoch_num": 49, "file": "tools/train_mlperf.py", "lineno": 135}}
Evaluating predictions
creating index...
GT annotations already exist!
2020-02-11 14:27:24,216 maskrcnn_benchmark.trainer INFO: eta: 0:22:20  iter: 41100  loss: 0.5264 (0.6850)  loss_classifier: 0.1762 (0.2346)  loss_box_reg: 0.0881 (0.1143)  loss_mask: 0.2347 (0.2604)  loss_objectness: 0.0150 (0.0294)  loss_rpn_box_reg: 0.0334 (0.0464)  time: 0.8427 (1.4899)  data: 0.0030 (0.6497)  lr: 0.001200  max mem: 24032
2020-02-11 14:27:41,303 maskrcnn_benchmark.trainer INFO: eta: 0:21:50  iter: 41120  loss: 0.6162 (0.6850)  loss_classifier: 0.1912 (0.2346)  loss_box_reg: 0.1054 (0.1143)  loss_mask: 0.2445 (0.2604)  loss_objectness: 0.0183 (0.0294)  loss_rpn_box_reg: 0.0308 (0.0463)  time: 0.8552 (1.4895)  data: 0.0029 (0.6494)  lr: 0.001200  max mem: 24032
2020-02-11 14:27:58,297 maskrcnn_benchmark.trainer INFO: eta: 0:21:20  iter: 41140  loss: 0.5840 (0.6849)  loss_classifier: 0.1848 (0.2345)  loss_box_reg: 0.0934 (0.1142)  loss_mask: 0.2400 (0.2604)  loss_objectness: 0.0189 (0.0294)  loss_rpn_box_reg: 0.0304 (0.0463)  time: 0.8487 (1.4892)  data: 0.0030 (0.6491)  lr: 0.001200  max mem: 24032
Loading and preparing results...
resFile is ./inference/coco_2014_val/bbox.json
DONE (t=5.94s)
Running per image evaluation...
Evaluate annotation type *bbox*
2020-02-11 14:28:15,343 maskrcnn_benchmark.trainer INFO: eta: 0:20:50  iter: 41160  loss: 0.6075 (0.6849)  loss_classifier: 0.1972 (0.2345)  loss_box_reg: 0.0919 (0.1142)  loss_mask: 0.2469 (0.2604)  loss_objectness: 0.0175 (0.0294)  loss_rpn_box_reg: 0.0357 (0.0463)  time: 0.8528 (1.4889)  data: 0.0029 (0.6488)  lr: 0.001200  max mem: 24032
2020-02-11 14:28:32,198 maskrcnn_benchmark.trainer INFO: eta: 0:20:20  iter: 41180  loss: 0.5442 (0.6848)  loss_classifier: 0.1838 (0.2345)  loss_box_reg: 0.0923 (0.1142)  loss_mask: 0.2291 (0.2604)  loss_objectness: 0.0181 (0.0293)  loss_rpn_box_reg: 0.0403 (0.0463)  time: 0.8439 (1.4886)  data: 0.0031 (0.6484)  lr: 0.001200  max mem: 24032
DONE (t=23.89s).
Accumulating evaluation results...
DONE (t=0.00s).
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.35681
 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=100 ] = 0.56704
 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=100 ] = 0.38659
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.18385
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.37222
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.46175
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=  1 ] = 0.30092
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets= 10 ] = 0.46721
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.48741
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.28786
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.51173
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.62697
2020-02-11 14:28:49,232 maskrcnn_benchmark.trainer INFO: eta: 0:19:50  iter: 41200  loss: 0.6451 (0.6848)  loss_classifier: 0.2122 (0.2345)  loss_box_reg: 0.1011 (0.1142)  loss_mask: 0.2415 (0.2604)  loss_objectness: 0.0183 (0.0293)  loss_rpn_box_reg: 0.0479 (0.0463)  time: 0.8551 (1.4883)  data: 0.0032 (0.6481)  lr: 0.001200  max mem: 24032
2020-02-11 14:29:06,183 maskrcnn_benchmark.trainer INFO: eta: 0:19:20  iter: 41220  loss: 0.6021 (0.6847)  loss_classifier: 0.2017 (0.2345)  loss_box_reg: 0.1033 (0.1142)  loss_mask: 0.2456 (0.2604)  loss_objectness: 0.0140 (0.0293)  loss_rpn_box_reg: 0.0290 (0.0463)  time: 0.8455 (1.4880)  data: 0.0029 (0.6478)  lr: 0.001200  max mem: 24032
Loading and preparing results...
resFile is ./inference/coco_2014_val/segm.json
2020-02-11 14:29:23,413 maskrcnn_benchmark.trainer INFO: eta: 0:18:50  iter: 41240  loss: 0.5570 (0.6847)  loss_classifier: 0.1808 (0.2344)  loss_box_reg: 0.0928 (0.1142)  loss_mask: 0.2370 (0.2604)  loss_objectness: 0.0160 (0.0293)  loss_rpn_box_reg: 0.0324 (0.0463)  time: 0.8557 (1.4877)  data: 0.0029 (0.6475)  lr: 0.001200  max mem: 24032
DONE (t=14.01s)
Running per image evaluation...
Evaluate annotation type *segm*
2020-02-11 14:29:40,477 maskrcnn_benchmark.trainer INFO: eta: 0:18:20  iter: 41260  loss: 0.6097 (0.6847)  loss_classifier: 0.1923 (0.2344)  loss_box_reg: 0.1132 (0.1142)  loss_mask: 0.2404 (0.2604)  loss_objectness: 0.0194 (0.0293)  loss_rpn_box_reg: 0.0289 (0.0463)  time: 0.8463 (1.4874)  data: 0.0031 (0.6472)  lr: 0.001200  max mem: 24032
2020-02-11 14:29:57,448 maskrcnn_benchmark.trainer INFO: eta: 0:17:50  iter: 41280  loss: 0.5450 (0.6846)  loss_classifier: 0.1603 (0.2344)  loss_box_reg: 0.0856 (0.1142)  loss_mask: 0.2485 (0.2604)  loss_objectness: 0.0133 (0.0293)  loss_rpn_box_reg: 0.0335 (0.0463)  time: 0.8450 (1.4871)  data: 0.0030 (0.6469)  lr: 0.001200  max mem: 24032
DONE (t=30.78s).
Accumulating evaluation results...
DONE (t=0.00s).
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.32354
 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=100 ] = 0.53527
 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=100 ] = 0.34156
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.13162
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.33533
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.47710
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=  1 ] = 0.28279
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets= 10 ] = 0.42820
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.44485
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.24481
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.47240
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.59970
2020-02-11 14:30:11,677 maskrcnn_benchmark.trainer INFO: bbox mAP: 0.35681343068286986, segm mAP: 0.32353640459073923
:::MLL 1581431411.679 eval_accuracy: {"value": {"accuracy": {"BBOX": 0.35681343068286986, "SEGM": 0.32353640459073923}}, "metadata": {"epoch_num": 48, "file": "tools/train_mlperf.py", "lineno": 99}}
:::MLL 1581431411.679 eval_stop: {"value": null, "metadata": {"epoch_num": 48, "file": "tools/train_mlperf.py", "lineno": 100}}
2020-02-11 14:30:16,769 maskrcnn_benchmark.trainer INFO: eta: 0:17:20  iter: 41300  loss: 0.6136 (0.6846)  loss_classifier: 0.2011 (0.2344)  loss_box_reg: 0.1081 (0.1142)  loss_mask: 0.2513 (0.2604)  loss_objectness: 0.0166 (0.0293)  loss_rpn_box_reg: 0.0324 (0.0463)  time: 0.8535 (1.4868)  data: 0.0031 (0.6466)  lr: 0.001200  max mem: 24032
2020-02-11 14:30:33,612 maskrcnn_benchmark.trainer INFO: eta: 0:16:50  iter: 41320  loss: 0.5356 (0.6845)  loss_classifier: 0.1489 (0.2343)  loss_box_reg: 0.0914 (0.1142)  loss_mask: 0.2329 (0.2604)  loss_objectness: 0.0150 (0.0293)  loss_rpn_box_reg: 0.0237 (0.0463)  time: 0.8424 (1.4865)  data: 0.0029 (0.6463)  lr: 0.001200  max mem: 24032
2020-02-11 14:30:50,592 maskrcnn_benchmark.trainer INFO: eta: 0:16:20  iter: 41340  loss: 0.6078 (0.6845)  loss_classifier: 0.1957 (0.2343)  loss_box_reg: 0.1035 (0.1142)  loss_mask: 0.2398 (0.2603)  loss_objectness: 0.0161 (0.0293)  loss_rpn_box_reg: 0.0287 (0.0463)  time: 0.8422 (1.4862)  data: 0.0030 (0.6459)  lr: 0.001200  max mem: 24032
2020-02-11 14:31:07,451 maskrcnn_benchmark.trainer INFO: eta: 0:15:50  iter: 41360  loss: 0.5621 (0.6844)  loss_classifier: 0.1844 (0.2343)  loss_box_reg: 0.0914 (0.1142)  loss_mask: 0.2293 (0.2603)  loss_objectness: 0.0165 (0.0293)  loss_rpn_box_reg: 0.0399 (0.0463)  time: 0.8459 (1.4859)  data: 0.0028 (0.6456)  lr: 0.001200  max mem: 24032
2020-02-11 14:31:24,230 maskrcnn_benchmark.trainer INFO: eta: 0:15:21  iter: 41380  loss: 0.5271 (0.6844)  loss_classifier: 0.1809 (0.2343)  loss_box_reg: 0.0934 (0.1142)  loss_mask: 0.2412 (0.2603)  loss_objectness: 0.0139 (0.0293)  loss_rpn_box_reg: 0.0364 (0.0463)  time: 0.8390 (1.4856)  data: 0.0030 (0.6453)  lr: 0.001200  max mem: 24032
2020-02-11 14:31:41,153 maskrcnn_benchmark.trainer INFO: eta: 0:14:51  iter: 41400  loss: 0.5562 (0.6843)  loss_classifier: 0.1803 (0.2343)  loss_box_reg: 0.0942 (0.1142)  loss_mask: 0.2300 (0.2603)  loss_objectness: 0.0169 (0.0293)  loss_rpn_box_reg: 0.0329 (0.0463)  time: 0.8481 (1.4853)  data: 0.0029 (0.6450)  lr: 0.001200  max mem: 24032
2020-02-11 14:31:58,187 maskrcnn_benchmark.trainer INFO: eta: 0:14:21  iter: 41420  loss: 0.5962 (0.6843)  loss_classifier: 0.1789 (0.2342)  loss_box_reg: 0.0900 (0.1141)  loss_mask: 0.2373 (0.2603)  loss_objectness: 0.0153 (0.0293)  loss_rpn_box_reg: 0.0422 (0.0463)  time: 0.8539 (1.4850)  data: 0.0029 (0.6447)  lr: 0.001200  max mem: 24032
2020-02-11 14:32:15,160 maskrcnn_benchmark.trainer INFO: eta: 0:13:51  iter: 41440  loss: 0.6014 (0.6842)  loss_classifier: 0.1997 (0.2342)  loss_box_reg: 0.1055 (0.1141)  loss_mask: 0.2494 (0.2603)  loss_objectness: 0.0166 (0.0293)  loss_rpn_box_reg: 0.0352 (0.0463)  time: 0.8496 (1.4847)  data: 0.0030 (0.6444)  lr: 0.001200  max mem: 24032
2020-02-11 14:32:31,956 maskrcnn_benchmark.trainer INFO: eta: 0:13:21  iter: 41460  loss: 0.5595 (0.6842)  loss_classifier: 0.1804 (0.2342)  loss_box_reg: 0.0970 (0.1141)  loss_mask: 0.2391 (0.2603)  loss_objectness: 0.0135 (0.0293)  loss_rpn_box_reg: 0.0354 (0.0463)  time: 0.8379 (1.4843)  data: 0.0029 (0.6441)  lr: 0.001200  max mem: 24032
2020-02-11 14:32:48,711 maskrcnn_benchmark.trainer INFO: eta: 0:12:51  iter: 41480  loss: 0.5519 (0.6841)  loss_classifier: 0.1716 (0.2342)  loss_box_reg: 0.0925 (0.1141)  loss_mask: 0.2386 (0.2603)  loss_objectness: 0.0167 (0.0293)  loss_rpn_box_reg: 0.0309 (0.0463)  time: 0.8321 (1.4840)  data: 0.0029 (0.6438)  lr: 0.001200  max mem: 24032
2020-02-11 14:33:05,676 maskrcnn_benchmark.trainer INFO: eta: 0:12:21  iter: 41500  loss: 0.5460 (0.6840)  loss_classifier: 0.1771 (0.2341)  loss_box_reg: 0.0863 (0.1141)  loss_mask: 0.2359 (0.2603)  loss_objectness: 0.0151 (0.0293)  loss_rpn_box_reg: 0.0349 (0.0463)  time: 0.8465 (1.4837)  data: 0.0030 (0.6435)  lr: 0.001200  max mem: 24032
2020-02-11 14:33:22,551 maskrcnn_benchmark.trainer INFO: eta: 0:11:52  iter: 41520  loss: 0.5963 (0.6840)  loss_classifier: 0.1959 (0.2341)  loss_box_reg: 0.0980 (0.1141)  loss_mask: 0.2402 (0.2602)  loss_objectness: 0.0157 (0.0293)  loss_rpn_box_reg: 0.0300 (0.0463)  time: 0.8402 (1.4834)  data: 0.0030 (0.6432)  lr: 0.001200  max mem: 24032
2020-02-11 14:33:39,555 maskrcnn_benchmark.trainer INFO: eta: 0:11:22  iter: 41540  loss: 0.5970 (0.6840)  loss_classifier: 0.1987 (0.2341)  loss_box_reg: 0.0974 (0.1141)  loss_mask: 0.2370 (0.2602)  loss_objectness: 0.0185 (0.0292)  loss_rpn_box_reg: 0.0327 (0.0463)  time: 0.8444 (1.4831)  data: 0.0031 (0.6429)  lr: 0.001200  max mem: 24032
2020-02-11 14:33:56,392 maskrcnn_benchmark.trainer INFO: eta: 0:10:52  iter: 41560  loss: 0.5264 (0.6839)  loss_classifier: 0.1647 (0.2341)  loss_box_reg: 0.0780 (0.1141)  loss_mask: 0.2314 (0.2602)  loss_objectness: 0.0133 (0.0292)  loss_rpn_box_reg: 0.0339 (0.0463)  time: 0.8405 (1.4828)  data: 0.0029 (0.6425)  lr: 0.001200  max mem: 24032
2020-02-11 14:34:13,211 maskrcnn_benchmark.trainer INFO: eta: 0:10:22  iter: 41580  loss: 0.4954 (0.6838)  loss_classifier: 0.1653 (0.2340)  loss_box_reg: 0.0773 (0.1141)  loss_mask: 0.2377 (0.2602)  loss_objectness: 0.0121 (0.0292)  loss_rpn_box_reg: 0.0303 (0.0463)  time: 0.8403 (1.4825)  data: 0.0030 (0.6422)  lr: 0.001200  max mem: 24032
2020-02-11 14:34:30,269 maskrcnn_benchmark.trainer INFO: eta: 0:09:52  iter: 41600  loss: 0.6075 (0.6838)  loss_classifier: 0.2018 (0.2340)  loss_box_reg: 0.1027 (0.1141)  loss_mask: 0.2390 (0.2602)  loss_objectness: 0.0170 (0.0292)  loss_rpn_box_reg: 0.0424 (0.0463)  time: 0.8507 (1.4822)  data: 0.0031 (0.6419)  lr: 0.001200  max mem: 24032
2020-02-11 14:34:47,187 maskrcnn_benchmark.trainer INFO: eta: 0:09:23  iter: 41620  loss: 0.5409 (0.6837)  loss_classifier: 0.1702 (0.2340)  loss_box_reg: 0.0818 (0.1141)  loss_mask: 0.2250 (0.2602)  loss_objectness: 0.0139 (0.0292)  loss_rpn_box_reg: 0.0265 (0.0463)  time: 0.8465 (1.4819)  data: 0.0029 (0.6416)  lr: 0.001200  max mem: 24032
2020-02-11 14:35:04,013 maskrcnn_benchmark.trainer INFO: eta: 0:08:53  iter: 41640  loss: 0.5974 (0.6837)  loss_classifier: 0.1977 (0.2340)  loss_box_reg: 0.1024 (0.1141)  loss_mask: 0.2371 (0.2602)  loss_objectness: 0.0210 (0.0292)  loss_rpn_box_reg: 0.0373 (0.0463)  time: 0.8414 (1.4816)  data: 0.0029 (0.6413)  lr: 0.001200  max mem: 24032
2020-02-11 14:35:20,892 maskrcnn_benchmark.trainer INFO: eta: 0:08:23  iter: 41660  loss: 0.5465 (0.6836)  loss_classifier: 0.1662 (0.2339)  loss_box_reg: 0.0881 (0.1140)  loss_mask: 0.2413 (0.2602)  loss_objectness: 0.0138 (0.0292)  loss_rpn_box_reg: 0.0277 (0.0463)  time: 0.8464 (1.4813)  data: 0.0030 (0.6410)  lr: 0.001200  max mem: 24032
2020-02-11 14:35:37,583 maskrcnn_benchmark.trainer INFO: eta: 0:07:53  iter: 41680  loss: 0.5723 (0.6836)  loss_classifier: 0.1716 (0.2339)  loss_box_reg: 0.0880 (0.1140)  loss_mask: 0.2312 (0.2602)  loss_objectness: 0.0128 (0.0292)  loss_rpn_box_reg: 0.0284 (0.0462)  time: 0.8324 (1.4810)  data: 0.0029 (0.6407)  lr: 0.001200  max mem: 24032
2020-02-11 14:35:54,593 maskrcnn_benchmark.trainer INFO: eta: 0:07:24  iter: 41700  loss: 0.5855 (0.6835)  loss_classifier: 0.1901 (0.2339)  loss_box_reg: 0.0967 (0.1140)  loss_mask: 0.2342 (0.2602)  loss_objectness: 0.0167 (0.0292)  loss_rpn_box_reg: 0.0364 (0.0462)  time: 0.8453 (1.4807)  data: 0.0031 (0.6404)  lr: 0.001200  max mem: 24032
2020-02-11 14:36:11,429 maskrcnn_benchmark.trainer INFO: eta: 0:06:54  iter: 41720  loss: 0.6184 (0.6835)  loss_classifier: 0.1803 (0.2339)  loss_box_reg: 0.1023 (0.1140)  loss_mask: 0.2383 (0.2601)  loss_objectness: 0.0182 (0.0292)  loss_rpn_box_reg: 0.0329 (0.0462)  time: 0.8434 (1.4804)  data: 0.0031 (0.6401)  lr: 0.001200  max mem: 24032
2020-02-11 14:36:28,427 maskrcnn_benchmark.trainer INFO: eta: 0:06:24  iter: 41740  loss: 0.6097 (0.6834)  loss_classifier: 0.2039 (0.2339)  loss_box_reg: 0.1075 (0.1140)  loss_mask: 0.2483 (0.2601)  loss_objectness: 0.0154 (0.0292)  loss_rpn_box_reg: 0.0344 (0.0462)  time: 0.8489 (1.4801)  data: 0.0030 (0.6398)  lr: 0.001200  max mem: 24032
2020-02-11 14:36:45,443 maskrcnn_benchmark.trainer INFO: eta: 0:05:55  iter: 41760  loss: 0.5844 (0.6834)  loss_classifier: 0.1940 (0.2338)  loss_box_reg: 0.0944 (0.1140)  loss_mask: 0.2416 (0.2601)  loss_objectness: 0.0167 (0.0292)  loss_rpn_box_reg: 0.0294 (0.0462)  time: 0.8496 (1.4797)  data: 0.0032 (0.6395)  lr: 0.001200  max mem: 24032
2020-02-11 14:37:02,294 maskrcnn_benchmark.trainer INFO: eta: 0:05:25  iter: 41780  loss: 0.6201 (0.6834)  loss_classifier: 0.1971 (0.2338)  loss_box_reg: 0.1064 (0.1140)  loss_mask: 0.2478 (0.2601)  loss_objectness: 0.0166 (0.0292)  loss_rpn_box_reg: 0.0420 (0.0462)  time: 0.8429 (1.4794)  data: 0.0031 (0.6392)  lr: 0.001200  max mem: 24032
Gradient overflow.  Skipping step, loss scaler 0 reducing loss scale to 131072.0
Gradient overflow.  Skipping step, loss scaler 0 reducing loss scale to 131072.0
Gradient overflow.  Skipping step, loss scaler 0 reducing loss scale to 131072.0
Gradient overflow.  Skipping step, loss scaler 0 reducing loss scale to 131072.0
Gradient overflow.  Skipping step, loss scaler 0 reducing loss scale to 131072.0
Gradient overflow.  Skipping step, loss scaler 0 reducing loss scale to 131072.0
Gradient overflow.  Skipping step, loss scaler 0 reducing loss scale to 131072.0
Gradient overflow.  Skipping step, loss scaler 0 reducing loss scale to 131072.0
2020-02-11 14:37:19,157 maskrcnn_benchmark.trainer INFO: eta: 0:04:55  iter: 41800  loss: 0.6351 (0.6833)  loss_classifier: 0.2079 (0.2338)  loss_box_reg: 0.1117 (0.1140)  loss_mask: 0.2390 (0.2601)  loss_objectness: 0.0170 (0.0292)  loss_rpn_box_reg: 0.0404 (0.0462)  time: 0.8422 (1.4791)  data: 0.0032 (0.6389)  lr: 0.001200  max mem: 24032
2020-02-11 14:37:36,141 maskrcnn_benchmark.trainer INFO: eta: 0:04:26  iter: 41820  loss: 0.5592 (0.6833)  loss_classifier: 0.1915 (0.2338)  loss_box_reg: 0.0900 (0.1140)  loss_mask: 0.2269 (0.2601)  loss_objectness: 0.0159 (0.0292)  loss_rpn_box_reg: 0.0360 (0.0462)  time: 0.8433 (1.4788)  data: 0.0030 (0.6386)  lr: 0.001200  max mem: 24032
2020-02-11 14:37:53,117 maskrcnn_benchmark.trainer INFO: eta: 0:03:56  iter: 41840  loss: 0.5622 (0.6832)  loss_classifier: 0.1920 (0.2338)  loss_box_reg: 0.1003 (0.1140)  loss_mask: 0.2388 (0.2601)  loss_objectness: 0.0171 (0.0292)  loss_rpn_box_reg: 0.0333 (0.0462)  time: 0.8487 (1.4785)  data: 0.0030 (0.6383)  lr: 0.001200  max mem: 24032
2020-02-11 14:38:10,209 maskrcnn_benchmark.trainer INFO: eta: 0:03:26  iter: 41860  loss: 0.5444 (0.6832)  loss_classifier: 0.1789 (0.2338)  loss_box_reg: 0.0909 (0.1140)  loss_mask: 0.2333 (0.2601)  loss_objectness: 0.0145 (0.0292)  loss_rpn_box_reg: 0.0313 (0.0462)  time: 0.8545 (1.4782)  data: 0.0030 (0.6380)  lr: 0.001200  max mem: 24032
2020-02-11 14:38:27,055 maskrcnn_benchmark.trainer INFO: eta: 0:02:57  iter: 41880  loss: 0.5782 (0.6831)  loss_classifier: 0.1873 (0.2337)  loss_box_reg: 0.0922 (0.1140)  loss_mask: 0.2397 (0.2601)  loss_objectness: 0.0144 (0.0292)  loss_rpn_box_reg: 0.0340 (0.0462)  time: 0.8432 (1.4779)  data: 0.0032 (0.6377)  lr: 0.001200  max mem: 24032
2020-02-11 14:38:43,985 maskrcnn_benchmark.trainer INFO: eta: 0:02:27  iter: 41900  loss: 0.6214 (0.6831)  loss_classifier: 0.1933 (0.2337)  loss_box_reg: 0.1021 (0.1140)  loss_mask: 0.2396 (0.2601)  loss_objectness: 0.0173 (0.0291)  loss_rpn_box_reg: 0.0486 (0.0462)  time: 0.8427 (1.4776)  data: 0.0030 (0.6374)  lr: 0.001200  max mem: 24032
2020-02-11 14:39:00,875 maskrcnn_benchmark.trainer INFO: eta: 0:01:58  iter: 41920  loss: 0.5554 (0.6831)  loss_classifier: 0.1759 (0.2337)  loss_box_reg: 0.0881 (0.1140)  loss_mask: 0.2341 (0.2600)  loss_objectness: 0.0157 (0.0291)  loss_rpn_box_reg: 0.0340 (0.0462)  time: 0.8430 (1.4773)  data: 0.0030 (0.6371)  lr: 0.001200  max mem: 24032
2020-02-11 14:39:17,678 maskrcnn_benchmark.trainer INFO: eta: 0:01:28  iter: 41940  loss: 0.5259 (0.6830)  loss_classifier: 0.1711 (0.2337)  loss_box_reg: 0.0873 (0.1139)  loss_mask: 0.2339 (0.2600)  loss_objectness: 0.0136 (0.0291)  loss_rpn_box_reg: 0.0250 (0.0462)  time: 0.8386 (1.4770)  data: 0.0029 (0.6367)  lr: 0.001200  max mem: 24032
:::MLL 1581431960.929 epoch_stop: {"value": null, "metadata": {"epoch_num": 49, "file": "tools/train_mlperf.py", "lineno": 75}}
:::MLL 1581431960.930 block_stop: {"value": null, "metadata": {"first_epoch_num": 49, "file": "tools/train_mlperf.py", "lineno": 76}}
:::MLL 1581431960.931 eval_start: {"value": null, "metadata": {"epoch_num": 49, "file": "tools/train_mlperf.py", "lineno": 77}}
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
2020-02-11 14:39:21,701 maskrcnn_benchmark.data.build WARNING: When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
Done (t=3.91s)
creating index...
Done (t=3.81s)
creating index...
Done (t=3.91s)
creating index...
Done (t=3.86s)
creating index...
Done (t=3.86s)
creating index...
Done (t=3.83s)
creating index...
Done (t=3.89s)
creating index...
Done (t=3.90s)
creating index...
index created!
index created!
  0%|                                                  | 0/2532 [00:00<?, ?it/s]index created!
index created!
index created!
index created!
  0%|                                                  | 0/2532 [00:00<?, ?it/s]index created!
  0%|                                                  | 0/2532 [00:00<?, ?it/s]index created!
  0%|                                                  | 0/2532 [00:00<?, ?it/s]2020-02-11 14:39:26,018 maskrcnn_benchmark.inference INFO: Start evaluation on coco_2014_val dataset(40504 images).
100%|███████████████████████████████████████| 2532/2532 [03:47<00:00, 11.11it/s]
100%|███████████████████████████████████████| 2532/2532 [03:48<00:00, 11.07it/s]
100%|███████████████████████████████████████| 2532/2532 [03:48<00:00, 11.07it/s]
 98%|██████████████████████████████████████▏| 2479/2532 [03:51<00:04, 10.83it/s]
 98%|██████████████████████████████████████▎| 2485/2532 [03:51<00:04, 10.75it/s]
100%|███████████████████████████████████████| 2532/2532 [03:52<00:00, 10.88it/s]
 99%|██████████████████████████████████████▋| 2513/2532 [03:54<00:01, 10.75it/s]
100%|███████████████████████████████████████| 2532/2532 [03:57<00:00, 10.66it/s]
2020-02-11 14:43:23,417 maskrcnn_benchmark.inference INFO: Total inference time: 0:03:57.398685 (0.04688893639709364 s / img per device, on 8 devices)
2020-02-11 14:43:24,423 maskrcnn_benchmark.inference INFO: Preparing results for COCO format
2020-02-11 14:43:24,424 maskrcnn_benchmark.inference INFO: Preparing bbox results
2020-02-11 14:43:25,927 maskrcnn_benchmark.inference INFO: Preparing segm results
:::MLL 1581432454.942 block_start: {"value": null, "metadata": {"first_epoch_num": 50, "epoch_count": 1, "file": "tools/train_mlperf.py", "lineno": 134}}
:::MLL 1581432454.945 epoch_start: {"value": null, "metadata": {"epoch_num": 50, "file": "tools/train_mlperf.py", "lineno": 135}}
Evaluating predictions
creating index...
GT annotations already exist!
2020-02-11 14:47:48,549 maskrcnn_benchmark.trainer INFO: eta: 0:00:59  iter: 41960  loss: 0.5517 (0.6829)  loss_classifier: 0.1586 (0.2336)  loss_box_reg: 0.0856 (0.1139)  loss_mask: 0.2295 (0.2600)  loss_objectness: 0.0154 (0.0291)  loss_rpn_box_reg: 0.0269 (0.0462)  time: 0.8499 (1.4885)  data: 0.0028 (0.6482)  lr: 0.001200  max mem: 24032
2020-02-11 14:48:05,546 maskrcnn_benchmark.trainer INFO: eta: 0:00:29  iter: 41980  loss: 0.5247 (0.6829)  loss_classifier: 0.1770 (0.2336)  loss_box_reg: 0.0856 (0.1139)  loss_mask: 0.2327 (0.2600)  loss_objectness: 0.0125 (0.0291)  loss_rpn_box_reg: 0.0346 (0.0462)  time: 0.8477 (1.4882)  data: 0.0028 (0.6479)  lr: 0.001200  max mem: 24032
2020-02-11 14:48:23,506 maskrcnn_benchmark.trainer INFO: eta: 0:00:00  iter: 42000  loss: 0.5869 (0.6828)  loss_classifier: 0.1724 (0.2336)  loss_box_reg: 0.1040 (0.1139)  loss_mask: 0.2358 (0.2600)  loss_objectness: 0.0157 (0.0291)  loss_rpn_box_reg: 0.0337 (0.0462)  time: 0.8472 (1.4879)  data: 0.0029 (0.6476)  lr: 0.001200  max mem: 24032
2020-02-11 14:48:23,506 maskrcnn_benchmark.trainer INFO: Total training time: 17:21:32.452501 (1.4879 s / it)
&&&& MLPERF METRIC THROUGHPUT=64.5194 iterations / s
&&&& MLPERF METRIC THROUGHPUT=64.5194 iterations / s
&&&& MLPERF METRIC THROUGHPUT=64.5198 iterations / s
&&&& MLPERF METRIC THROUGHPUT=64.5199 iterations / s
&&&& MLPERF METRIC THROUGHPUT=64.5201 iterations / s
&&&& MLPERF METRIC THROUGHPUT=64.5192 iterations / s
&&&& MLPERF METRIC THROUGHPUT=64.5196 iterations / s
&&&& MLPERF METRIC THROUGHPUT=64.5198 iterations / s
Loading and preparing results...
resFile is ./inference/coco_2014_val/bbox.json
&&&& MLPERF METRIC TIME= 62544.26880431175
&&&& MLPERF METRIC TIME= 62544.26881861687
&&&& MLPERF METRIC TIME= 62544.268788576126
&&&& MLPERF METRIC TIME= 62544.26879692078
&&&& MLPERF METRIC TIME= 62544.268625974655
&&&& MLPERF METRIC TIME= 62544.26881027222
&&&& MLPERF METRIC TIME= 62544.26880836487
:::MLL 1581432507.344 run_stop: {"value": null, "metadata": {"status": "aborted", "file": "tools/train_mlperf.py", "lineno": 360}}
&&&& MLPERF METRIC TIME= 62544.27025747299
DONE (t=6.04s)
Running per image evaluation...
Evaluate annotation type *bbox*
DONE (t=21.97s).
Accumulating evaluation results...
DONE (t=0.00s).
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.35638
 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=100 ] = 0.56683
 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=100 ] = 0.38595
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.18378
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.37149
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.46131
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=  1 ] = 0.30069
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets= 10 ] = 0.46736
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.48781
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.28991
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.51208
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.62576
Loading and preparing results...
resFile is ./inference/coco_2014_val/segm.json
DONE (t=14.14s)
Running per image evaluation...
Evaluate annotation type *segm*
DONE (t=31.21s).
Accumulating evaluation results...
DONE (t=0.00s).
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.32266
 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=100 ] = 0.53470
 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=100 ] = 0.34085
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.13138
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.33455
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.47624
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=  1 ] = 0.28275
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets= 10 ] = 0.42836
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.44519
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.24618
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.47265
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.59757
+ ret_code=0
+ set +x
ENDING TIMING RUN AT 2020-02-11 02:53:16 PM
RESULT,OBJECT_DETECTION,,62834,nvidia,2020-02-10 09:26:02 PM
